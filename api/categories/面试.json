{"name":"面试","slug":"面试","count":1,"postlist":[{"title":"面试题JS题","slug":"原理题","date":"2019-10-10T10:51:32.000Z","updated":"2019-10-10T10:51:32.000Z","comments":true,"path":"api/articles/原理题.json","excerpt":"","keywords":null,"cover":"/2019/10/10/原理题/1.png","content":"<h2 id=\"JavaScript-——-面试题合集1\"><a href=\"#JavaScript-——-面试题合集1\" class=\"headerlink\" title=\"JavaScript —— 面试题合集1\"></a>JavaScript —— 面试题合集1</h2><h4 id=\"call-和-apply-的区别是什么，哪个性能更好一些\"><a href=\"#call-和-apply-的区别是什么，哪个性能更好一些\" class=\"headerlink\" title=\"call 和 apply 的区别是什么，哪个性能更好一些\"></a>call 和 apply 的区别是什么，哪个性能更好一些</h4><p>call的性能要比apply好一些，（传递给函数的参数超过三个的时候差距明显）后期开发过程中偏向使用call<br>性能检测的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.time(&apos;A&apos;);</span><br><span class=\"line\">for(let i = 0;i&lt;9;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.timeEnd(&apos;A&apos;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h4><ol>\n<li>箭头函数语法上上普通函数更加简洁（ES6中的每一种函数都可以使用形参赋值和剩余运算符）iiiiiiiiiiiiiii</li>\n<li>箭头函数没有this，他里面出现的this继承函数所处上下文中的this，使用call/apply等任何方式无法改变。</li>\n<li>箭头函数没有ArgumentS（类数组）只能基于…arg获取传递的参数集合（数组）；</li>\n<li>箭头函数不能被new执行（因为：箭头函数没有prototype也没有this）<h4 id=\"实现-5-add-3-minus-2-，使其输出结果为：6\"><a href=\"#实现-5-add-3-minus-2-，使其输出结果为：6\" class=\"headerlink\" title=\"实现 (5).add(3).minus(2) ，使其输出结果为：6\"></a>实现 (5).add(3).minus(2) ，使其输出结果为：6</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ~ function () &#123;</span><br><span class=\"line\">\t//=&gt;每一个方法执行完，都要返回NUMBER这个类的实例，这样才可以继续调取NUMBER类原型中的方法（链式写法）</span><br><span class=\"line\">\tfunction check(n) &#123;</span><br><span class=\"line\">\t\tn = Number(n);</span><br><span class=\"line\">\t\treturn isNaN(n) ? 0 : n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunction add(n) &#123;</span><br><span class=\"line\">\t\tn = check(n);</span><br><span class=\"line\">\t\treturn this + n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunction minus(n) &#123;</span><br><span class=\"line\">\t\tn = check(n);</span><br><span class=\"line\">\t\treturn this - n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tNumber.prototype.add = add;</span><br><span class=\"line\">\tNumber.prototype.minus = minus;</span><br><span class=\"line\">\t//  [&quot;add&quot;, &quot;minus&quot;].forEach(item =&gt; &#123;</span><br><span class=\"line\">\t// \tNumber.prototype[item] = eval(item);</span><br><span class=\"line\">\t// &#125;); </span><br><span class=\"line\">&#125;();</span><br><span class=\"line\">console.log((5).add(3).minus(2));</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//=&gt;回调函数：把一个函数B作为实参传递给另外一个函数A，函数A在执行的时候，可以把传递进来的函数B去执行（执行N次，可传值，可改THIS）</span><br><span class=\"line\"> function each(arr, callBack) &#123;</span><br><span class=\"line\">\t//=&gt;callBack:function(item, index)&#123;&#125;</span><br><span class=\"line\"> \tfor (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\"> \t\tlet flag = callBack.call(arr, arr[i], i);</span><br><span class=\"line\">\t\t//=&gt;接受回调函数返回的结果，如果是FALSE，我们结束循环</span><br><span class=\"line\">\t\tif (flag === false) &#123;</span><br><span class=\"line\"> \t\t\tbreak;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> each([10, 20, 30, 40], function (item, index) &#123;</span><br><span class=\"line\">\t//=&gt;this:原始操作数组</span><br><span class=\"line\"> \tif (index &gt; 1) &#123;</span><br><span class=\"line\"> \t\treturn false;</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如何把一个字符串的大小写取反（大写变小写小写变大写），例如-’AbC’-变成-‘aBc’\"><a href=\"#如何把一个字符串的大小写取反（大写变小写小写变大写），例如-’AbC’-变成-‘aBc’\" class=\"headerlink\" title=\"如何把一个字符串的大小写取反（大写变小写小写变大写），例如 ’AbC’ 变成 ‘aBc’\"></a>如何把一个字符串的大小写取反（大写变小写小写变大写），例如 ’AbC’ 变成 ‘aBc’</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &quot;zhufengPEIxun的周老师很帅！吁*100！HAHA&quot;;</span><br><span class=\"line\">str = str.replace(/[a-zA-Z]/g, content =&gt; &#123;</span><br><span class=\"line\">\t//=&gt;content:每一次正则匹配的结果</span><br><span class=\"line\">\t//验证是否为大写字母：把字母转换为大写后看和之前是否一样，如果一样，之前也是大写的；在ASCII表中找到大写字母的取值范围进行判断（65-90）；</span><br><span class=\"line\">\t// content.toUpperCase()===content</span><br><span class=\"line\">\t// content.charCodeAt()&gt;=65 &amp;&amp; content.charCodeAt()&lt;=90</span><br><span class=\"line\">\treturn content.toUpperCase() === content ? content.toLowerCase() : content.toUpperCase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(str);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现一个字符串匹配算法，从字符串-S-中，查找是否存在字符串-T，若存在返回所在位置，不存在返回-1！（如果不能基于indexOf-includes等内置的方法，你会如何处理呢？）\"><a href=\"#实现一个字符串匹配算法，从字符串-S-中，查找是否存在字符串-T，若存在返回所在位置，不存在返回-1！（如果不能基于indexOf-includes等内置的方法，你会如何处理呢？）\" class=\"headerlink\" title=\"实现一个字符串匹配算法，从字符串 S 中，查找是否存在字符串 T，若存在返回所在位置，不存在返回-1！（如果不能基于indexOf/includes等内置的方法，你会如何处理呢？）\"></a>实现一个字符串匹配算法，从字符串 S 中，查找是否存在字符串 T，若存在返回所在位置，不存在返回-1！（如果不能基于indexOf/includes等内置的方法，你会如何处理呢？）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ function () &#123;</span><br><span class=\"line\">\t/*</span><br><span class=\"line\">\t * 循环原始字符串中的每一项，让每一项从当前位置向后截取T.length个字符，然后和T进行比较，如果不一样，继续循环；如果一样返回当前索引即可（循环结束）；</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tfunction myIndexOf(T) &#123;</span><br><span class=\"line\">\t\t//=&gt;THIS:S</span><br><span class=\"line\">\t\tlet lenT = T.length,</span><br><span class=\"line\">\t\t\tlenS = this.length,</span><br><span class=\"line\">\t\t\tres = -1;</span><br><span class=\"line\">\t\tif (lenT &gt; lenS) return -1;</span><br><span class=\"line\">\t\tfor (let i = 0; i &lt;= lenS - lenT; i++) &#123;</span><br><span class=\"line\">\t\t\tif (this.substr(i, lenT) === T) &#123;</span><br><span class=\"line\">\t\t\t\tres = i;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t/*</span><br><span class=\"line\">\t * 正则处理 </span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tfunction myIndexOf(T) &#123;</span><br><span class=\"line\">\t\t//=&gt;THIS:S</span><br><span class=\"line\">\t\tlet reg = new RegExp(T),</span><br><span class=\"line\">\t\t\tres = reg.exec(this);</span><br><span class=\"line\">\t\treturn res === null ? -1 : res.index;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tString.prototype.myIndexOf = myIndexOf;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\">// let S = &quot;zhufengpeixun&quot;,</span><br><span class=\"line\">// \tT = &quot;pei&quot;;</span><br><span class=\"line\">// console.log(S.myIndexOf(T));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出下面代码运行结果\"><a href=\"#输出下面代码运行结果\" class=\"headerlink\" title=\"输出下面代码运行结果\"></a>输出下面代码运行结果</h4><p><img src=\"/2019/10/10/原理题/1.png\" alt=\"Alt text\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* //example 1</span><br><span class=\"line\">var a=&#123;&#125;, b=&apos;123&apos;, c=123;  </span><br><span class=\"line\">a[b]=&apos;b&apos;;</span><br><span class=\"line\">a[c]=&apos;c&apos;;  </span><br><span class=\"line\">console.log(a[b]); //=&gt;c  因为：a[&quot;123&quot;] &lt;=&gt; a[123]</span><br><span class=\"line\"></span><br><span class=\"line\">//example 2</span><br><span class=\"line\">var a=&#123;&#125;, b=Symbol(&apos;123&apos;), c=Symbol(&apos;123&apos;);  </span><br><span class=\"line\">a[b]=&apos;b&apos;;</span><br><span class=\"line\">a[c]=&apos;c&apos;;  </span><br><span class=\"line\">console.log(a[b]);  //=&gt;Symbol是ES6中新增的数据类型  typeof Symbol(&apos;123&apos;)===&quot;symbol&quot;  它创建出来的值是唯一值  Symbol(&apos;123&apos;)===Symbol(&apos;123&apos;):FALSE</span><br><span class=\"line\"></span><br><span class=\"line\">//example 3</span><br><span class=\"line\">var a=&#123;&#125;, b=&#123;key:&apos;123&apos;&#125;, c=&#123;key:&apos;456&apos;&#125;;  </span><br><span class=\"line\">a[b]=&apos;b&apos;;</span><br><span class=\"line\">a[c]=&apos;c&apos;;  </span><br><span class=\"line\">console.log(a[b]);</span><br><span class=\"line\">//1.对象的属性名不能是一个对象（遇到对象属性名，会默认转换为字符串）</span><br><span class=\"line\">// obj=&#123;&#125;  arr=[12,23]  obj[arr]=&apos;珠峰&apos;  obj=&gt;&#123;&quot;12,23&quot;:&quot;珠峰&quot;&#125;</span><br><span class=\"line\">//2.普通对象.toString() 调取的是Object.prototype上的方法（这个方法是用来检测数据类型的）</span><br><span class=\"line\">// obj=&#123;&#125;  obj.toString()=&gt;&quot;[object Object]&quot; </span><br><span class=\"line\">// obj[b]=&apos;b&apos;  =&gt; obj[&quot;[object Object]&quot;]=&apos;b&apos; */</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在输入框中如何判断输入的是一个正确的网址，例如：用户输入一个字符串，验证是否符合URL网址的格式\"><a href=\"#在输入框中如何判断输入的是一个正确的网址，例如：用户输入一个字符串，验证是否符合URL网址的格式\" class=\"headerlink\" title=\"在输入框中如何判断输入的是一个正确的网址，例如：用户输入一个字符串，验证是否符合URL网址的格式\"></a>在输入框中如何判断输入的是一个正确的网址，例如：用户输入一个字符串，验证是否符合URL网址的格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &quot;https://www.zhufengpeixun.com.cn&quot;;</span><br><span class=\"line\">let reg = /^(?:(http|https|ftp):\\/\\/)?((?:[\\w-]+\\.)+[a-z0-9]+)((?:\\/[^/?#]*)+)?(\\?[^#]+)?(#.+)?$/i;</span><br><span class=\"line\">console.log(reg.exec(str));</span><br><span class=\"line\">//=&gt;URL格式</span><br><span class=\"line\">//1.协议://  http/https/ftp</span><br><span class=\"line\">//2.域名</span><br><span class=\"line\">// www.zhufengpeixun.cn</span><br><span class=\"line\">// zhufengpeixun.cn</span><br><span class=\"line\">// kbs.sports.qq.com</span><br><span class=\"line\">// kbs.sports.qq.com.cn</span><br><span class=\"line\">//3.请求路径</span><br><span class=\"line\">// /</span><br><span class=\"line\">// /index.html</span><br><span class=\"line\">// /stu/index.html</span><br><span class=\"line\">// /stu/</span><br><span class=\"line\">//4.问号传参</span><br><span class=\"line\">// ?xxx=xxx&amp;xxx=xxx</span><br><span class=\"line\">//5.哈希值</span><br><span class=\"line\">// #xxx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写代码实现图片的懒加载\"><a href=\"#编写代码实现图片的懒加载\" class=\"headerlink\" title=\"编写代码实现图片的懒加载\"></a>编写代码实现图片的懒加载</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let $imgBox = $(&apos;.imgBox&apos;),</span><br><span class=\"line\">\t$img = $imgBox.children(&apos;img&apos;),</span><br><span class=\"line\">\t$window = $(window);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;JQ中的事件绑定支持多事件绑定：window.onload &amp; window.onscroll 两个事件触发的时候执行相同的事情</span><br><span class=\"line\">$window.on(&apos;load scroll&apos;, function () &#123;</span><br><span class=\"line\">\tif ($img.attr(&apos;isLoad&apos;) === &apos;true&apos;) &#123;</span><br><span class=\"line\">\t\t//=&gt;之前加载过则不会重新加载</span><br><span class=\"line\">\t\treturn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlet $A = $imgBox.outerHeight() + $imgBox.offset().top,</span><br><span class=\"line\">\t\t$B = $window.outerHeight() + $window.scrollTop();</span><br><span class=\"line\">\tif ($A &lt;= $B) &#123;</span><br><span class=\"line\">\t\t//=&gt;加载真实图片</span><br><span class=\"line\">\t\t$img.attr(&apos;src&apos;, $img.attr(&apos;data-img&apos;));</span><br><span class=\"line\">\t\t$img.on(&apos;load&apos;, function () &#123;</span><br><span class=\"line\">\t\t\t//=&gt;加载成功：fadeIn是JQ中的渐现动画</span><br><span class=\"line\">\t\t\t// $img.css(&apos;display&apos;, &apos;block&apos;);</span><br><span class=\"line\">\t\t\t$img.stop().fadeIn();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t$img.attr(&apos;isLoad&apos;, true); //=&gt;ATTR存储的自定义属性值都是字符串&quot;true&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;); */</span><br><span class=\"line\"></span><br><span class=\"line\">let $container = $(&apos;.container&apos;),</span><br><span class=\"line\">\t$imgBoxs = null,</span><br><span class=\"line\">\t$window = $(window);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;造点假数据 new Array(20).fill(null)创建长度为20的数组，每一项用null填充</span><br><span class=\"line\">let str = ``;</span><br><span class=\"line\">new Array(20).fill(null).forEach(item =&gt; &#123;</span><br><span class=\"line\">\tstr += `&lt;div class=&quot;imgBox&quot;&gt;</span><br><span class=\"line\">\t\t&lt;img src=&quot;&quot; alt=&quot;&quot; data-img=&quot;http://www.zhufengpeixun.cn/main/img/banner10.png&quot;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;`;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$container.html(str);</span><br><span class=\"line\">$imgBoxs = $container.children(&apos;.imgBox&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;多张图片延迟加载</span><br><span class=\"line\">$window.on(&apos;load scroll&apos;, function () &#123;</span><br><span class=\"line\">\t//$B:获取浏览器底边框距离BODY的距离</span><br><span class=\"line\">\tlet $B = $window.outerHeight() + $window.scrollTop();</span><br><span class=\"line\">\t//循环每一个图片区域，根据自己区域距离BODY的距离，计算出里面的图片是否加载</span><br><span class=\"line\">\t$imgBoxs.each((index, item) =&gt; &#123;</span><br><span class=\"line\">\t\tlet $item = $(item),</span><br><span class=\"line\">\t\t\t$itemA = $item.outerHeight() + $item.offset().top,</span><br><span class=\"line\">\t\t\tisLoad = $item.attr(&apos;isLoad&apos;);</span><br><span class=\"line\">\t\tif ($itemA &lt;= $B &amp;&amp; isLoad !== &apos;true&apos;) &#123;</span><br><span class=\"line\">\t\t\t$item.attr(&apos;isLoad&apos;, true);</span><br><span class=\"line\">\t\t\t//加载当前区域中的图片</span><br><span class=\"line\">\t\t\tlet $img = $item.children(&apos;img&apos;);</span><br><span class=\"line\">\t\t\t$img.attr(&apos;src&apos;, $img.attr(&apos;data-img&apos;));</span><br><span class=\"line\">\t\t\t$img.on(&apos;load&apos;, () =&gt; $img.stop().fadeIn());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);o7</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写一条正则，用来验证此规则：一个6-16位的字符串，必须同时包含有大小写字母和数字\"><a href=\"#编写一条正则，用来验证此规则：一个6-16位的字符串，必须同时包含有大小写字母和数字\" class=\"headerlink\" title=\"编写一条正则，用来验证此规则：一个6~16位的字符串，必须同时包含有大小写字母和数字\"></a>编写一条正则，用来验证此规则：一个6~16位的字符串，必须同时包含有大小写字母和数字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let reg = /(?!^[a-zA-Z]+$)(?!^[0-9]+$)(?!^[a-z0-9]+$)(?!^[A-Z0-9]+$)^[a-zA-Z0-9]&#123;6,16&#125;$/;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 1-10位：数字、字母、下划线组成字符串，必须有_ */</span><br><span class=\"line\">// let reg = /(?!^[a-zA-Z0-9]+$)^\\w&#123;1,10&#125;$/;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 字符串中包含 “\\w”，但是必须包含_ */</span><br><span class=\"line\">// let reg = /(?=_)\\w+/;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"完成如下需求\"><a href=\"#完成如下需求\" class=\"headerlink\" title=\"完成如下需求\"></a>完成如下需求</h4><p><img src=\"/2019/10/10/原理题/2.png\" alt=\"Alt text\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/* 实现一个$attr(name,value)遍历</span><br><span class=\"line\"> * 属性为name</span><br><span class=\"line\"> * 值为value的元素集合</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 例如下面示例:</span><br><span class=\"line\"> */</span><br><span class=\"line\"> function $attr(property, value) &#123;</span><br><span class=\"line\">\t//=&gt;获取当前页面中所有的标签</span><br><span class=\"line\">\tlet elements = document.getElementsByTagName(&apos;*&apos;),</span><br><span class=\"line\">\t\tarr = [];</span><br><span class=\"line\">\t// [].forEach.call(elements, item =&gt; &#123;&#125;);</span><br><span class=\"line\">\telements = Array.from(elements); //=&gt;把非数组转换为数组</span><br><span class=\"line\">\telements.forEach(item =&gt; &#123;</span><br><span class=\"line\">\t\t//=&gt;存储的是当前元素PROPERTY对应的属性值</span><br><span class=\"line\">\t\tlet itemValue = item.getAttribute(property);</span><br><span class=\"line\">\t\tif (property === &apos;class&apos;) &#123;</span><br><span class=\"line\">\t\t\t//=&gt;样式类属性名要特殊的处理</span><br><span class=\"line\">\t\t\tnew RegExp(&quot;\\\\b&quot; + value + &quot;\\\\b&quot;).test(itemValue) ? arr.push(item) : null;</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (itemValue === value) &#123;</span><br><span class=\"line\">\t\t\t//=&gt;获取的值和传递的值校验成功：当前就是我们想要的</span><br><span class=\"line\">\t\t\tarr.push(item);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\treturn arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log($attr(&apos;class&apos;, &apos;box&apos;));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"英文字母汉字组成的字符串，用正则给英文单词前后加空格\"><a href=\"#英文字母汉字组成的字符串，用正则给英文单词前后加空格\" class=\"headerlink\" title=\"英文字母汉字组成的字符串，用正则给英文单词前后加空格\"></a>英文字母汉字组成的字符串，用正则给英文单词前后加空格</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &quot;no作no死，你能你can，不能no哔哔！&quot;,</span><br><span class=\"line\">reg = /\\b[a-z]+\\b/ig;</span><br><span class=\"line\">str = str.replace(reg, value =&gt; &#123;</span><br><span class=\"line\">return &quot; &quot; + value + &quot; &quot;;</span><br><span class=\"line\"> &#125;).trim();            //=&gt;String.prototype.trim/.trimLeft/.trimRight 去除字符串首尾空格</span><br><span class=\"line\"> console.log(str);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组扁平化\"><a href=\"#数组扁平化\" class=\"headerlink\" title=\"数组扁平化\"></a>数组扁平化</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//=&gt;使用ES6中提供的 Array.prototype.flat 处理</span><br><span class=\"line\">// arr = arr.flat(Infinity);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;把数组直接变为字符串即可（数组TOSTRING之后，不管你有多少级，最后都会变为以逗号分隔的字符串，没有中括号和所谓的层级了），相当于直接的扁平化了</span><br><span class=\"line\">// arr = arr.toString().split(&apos;,&apos;).map(item =&gt; &#123;</span><br><span class=\"line\">// \treturn Number(item);</span><br><span class=\"line\">// &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;JSON.stringify也可以扁平化数组</span><br><span class=\"line\">// JSON.stringify(arr) : &quot;[[1,2,2],[3,4,5,5],[6,7,8,9,...&quot;</span><br><span class=\"line\">// replace(/(\\[|\\])/g, &apos;&apos;) : &quot;1,2,2,3,4,5,5,6,7,8,9...&quot;</span><br><span class=\"line\">// arr = JSON.stringify(arr).replace(/(\\[|\\])/g, &apos;&apos;).split(&apos;,&apos;).map(item =&gt; Number(item));</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;基于数组的some方法进行判断检测：验证数组中的某一项有没有符合函数中提供的规则的</span><br><span class=\"line\">//=&gt;find和some的区别：some返回的是boolean，find找到符合规则的，返回当前这一项，没找到符合规则的，返回undefined</span><br><span class=\"line\">//=&gt;Array.isArray([val])：检测某个值是否为数组类型（挺准的）</span><br><span class=\"line\">/* var A = [2, 3, 4, 5];</span><br><span class=\"line\">var B = A.find(item =&gt; &#123;</span><br><span class=\"line\">\treturn item &lt; 6;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(B); */</span><br><span class=\"line\">// while (arr.some(item =&gt; Array.isArray(item))) &#123;</span><br><span class=\"line\">// \tarr = [].concat(...arr);</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;自己递归处理</span><br><span class=\"line\">~ function () &#123;</span><br><span class=\"line\">\tfunction myFlat() &#123;</span><br><span class=\"line\">\t\tlet result = [],</span><br><span class=\"line\">\t\t\t_this = this;</span><br><span class=\"line\">\t\t//=&gt;循环ARR中的每一项，把不是数组的存储到新数组中</span><br><span class=\"line\">\t\tlet fn = (arr) =&gt; &#123;</span><br><span class=\"line\">\t\t\tfor (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tlet item = arr[i];</span><br><span class=\"line\">\t\t\t\tif (Array.isArray(item)) &#123;</span><br><span class=\"line\">\t\t\t\t\tfn(item);</span><br><span class=\"line\">\t\t\t\t\tcontinue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tresult.push(item);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tfn(_this);</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tArray.prototype.myFlat = myFlat;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\">arr = arr.myFlat();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;基于ES6中的new Set()去重数组（也可以自己写方法）</span><br><span class=\"line\">// [...new Set(arr)]</span><br><span class=\"line\">// Array.from(new Set(arr))</span><br><span class=\"line\">arr = Array.from(new Set(arr)).sort((a, b) =&gt; a - b);</span><br><span class=\"line\">console.log(arr);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重构内置new方法\"><a href=\"#重构内置new方法\" class=\"headerlink\" title=\"重构内置new方法\"></a>重构内置new方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Dog(name) &#123;</span><br><span class=\"line\">\tthis.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dog.prototype.bark = function () &#123;</span><br><span class=\"line\">\tconsole.log(&apos;wangwang&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dog.prototype.sayName = function () &#123;</span><br><span class=\"line\">\tconsole.log(&apos;my name is &apos; + this.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//=&gt;Fn当前要NEW的类  =&gt;Dog</span><br><span class=\"line\">//=&gt;ARG后期需要给构造函数传递的参数信息  =&gt;[&apos;三毛&apos;]</span><br><span class=\"line\">function _new(Fn, ...arg) &#123;</span><br><span class=\"line\">\t//=&gt;创建一个空对象，让他的原型链指向Fn.prototype（作为Fn的一个实例）</span><br><span class=\"line\">\t//=&gt;Object.create([AA对象])：创建一个空对象obj，并且让空对象obj作为AA对象所属构造函数的实例（obj.__proto__=AA）</span><br><span class=\"line\">\t// let obj = &#123;&#125;;</span><br><span class=\"line\">\t// obj.__proto__ = Fn.prototype;</span><br><span class=\"line\">\tlet obj = Object.create(Fn.prototype);</span><br><span class=\"line\">\tFn.call(obj, ...arg);</span><br><span class=\"line\">\treturn obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let sanmao = _new(Dog, &apos;三毛&apos;);</span><br><span class=\"line\">/* </span><br><span class=\"line\"> * let sanmao=new Dog(&apos;三毛&apos;); </span><br><span class=\"line\"> *   1.像普通函数执行一样，形成一个私有的作用域</span><br><span class=\"line\"> *     + 形参赋值</span><br><span class=\"line\"> *     + 变量提升</span><br><span class=\"line\"> *   2.默认创建一个对象,让函数中的this执行这个对象,这个对象就是当前类的一个实例</span><br><span class=\"line\"> *   3.代码执行</span><br><span class=\"line\"> *   4.默认把创建的对象返回</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;基于内置的new关键词，我们可以创建Dog的一个实例sanmao，实例可以调取原型上的属性和方法，现在的需求是：自己实现一个_new方法，也能模拟出内置new后的结果</span><br><span class=\"line\">// function _new() &#123;</span><br><span class=\"line\">// \t//=&gt;完成你的代码</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\">sanmao.bark(); //=&gt;&quot;wangwang&quot;</span><br><span class=\"line\">sanmao.sayName(); //=&gt;&quot;my name is 三毛&quot;</span><br><span class=\"line\">console.log(sanmao instanceof Dog); //=&gt;true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"两个数组和并为一个数组\"><a href=\"#两个数组和并为一个数组\" class=\"headerlink\" title=\"两个数组和并为一个数组\"></a>两个数组和并为一个数组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let ary1 = [&apos;D1&apos;, &apos;D2&apos;, &apos;A1&apos;, &apos;A2&apos;, &apos;C1&apos;, &apos;C2&apos;, &apos;B1&apos;, &apos;B2&apos;];</span><br><span class=\"line\">let ary2 = [&apos;B&apos;, &apos;A&apos;, &apos;D&apos;, &apos;C&apos;];</span><br><span class=\"line\">//=&gt;合并后的数组为：[&apos;D1&apos;, &apos;D2&apos;,&apos;D&apos;, &apos;A1&apos;, &apos;A2&apos;,&apos;A&apos;, &apos;C1&apos;, &apos;C2&apos;,&apos;C&apos; ,&apos;B1&apos;, &apos;B2&apos;,&apos;B&apos;]</span><br><span class=\"line\">ary2 = ary2.map(item =&gt; item + &apos;珠峰&apos;);</span><br><span class=\"line\">let arr = ary1.concat(ary2);</span><br><span class=\"line\">arr = arr.sort((a, b) =&gt; a.localeCompare(b)).map(item =&gt; &#123;</span><br><span class=\"line\">\treturn item.replace(&apos;珠峰&apos;, &apos;&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(arr); </span><br><span class=\"line\"></span><br><span class=\"line\">/* let n = 0;</span><br><span class=\"line\">for (let i = 0; i &lt; ary2.length; i++) &#123;</span><br><span class=\"line\">\tlet item2 = ary2[i];</span><br><span class=\"line\">\tfor (let k = 0; k &lt; ary1.length; k++) &#123;</span><br><span class=\"line\">\t\tlet item1 = ary1[k];</span><br><span class=\"line\">\t\tif (item1.includes(item2)) &#123;</span><br><span class=\"line\">\t\t\t//=&gt;如果包含就记录一下当前这一项的索引位置（后面还有包含的会重新记录这个值）</span><br><span class=\"line\">\t\t\tn = k;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//=&gt;把当前ITEM2这一项插入到ARY1中N的后面</span><br><span class=\"line\">\tary1.splice(n + 1, 0, item2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(ary1); */</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"改造下面代码，使之输出0-9\"><a href=\"#改造下面代码，使之输出0-9\" class=\"headerlink\" title=\"改造下面代码，使之输出0-9\"></a>改造下面代码，使之输出0-9</h4><p><img src=\"/2019/10/10/原理题/3.png\" alt=\"Alt text\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//=&gt;定时器是异步编程：每一轮循环设置定时器，无需等定时器触发执行，继续下一轮循环（定时器触发的时候，循环已经结束了）</span><br><span class=\"line\">/* for (let i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t//=&gt;LET存在块级作用域，每一次循环都会在当前块作用域中形成一个私有变量i存储0~9</span><br><span class=\"line\">\t//当定时器执行的时候，所使用的i就是所处块作用域中的i</span><br><span class=\"line\">\tsetTimeout(() =&gt; &#123;</span><br><span class=\"line\">\t\tconsole.log(i);</span><br><span class=\"line\">\t&#125;, 1000);</span><br><span class=\"line\">&#125; */</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;闭包解决</span><br><span class=\"line\">/* for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t~ function (i) &#123;</span><br><span class=\"line\">\t\tsetTimeout(() =&gt; &#123;</span><br><span class=\"line\">\t\t\tconsole.log(i);</span><br><span class=\"line\">\t\t&#125;, 1000);</span><br><span class=\"line\">\t&#125;(i);</span><br><span class=\"line\">&#125; */</span><br><span class=\"line\">/* for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\tsetTimeout((i =&gt; () =&gt; console.log(i))(i), 1000);</span><br><span class=\"line\">&#125; */</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;可以基于bind的预先处理机制：在循环的时候就把每次执行函数需要输出的结果，预先传给函数即可</span><br><span class=\"line\">/* var fn = function (i) &#123;</span><br><span class=\"line\">\tconsole.log(i);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\tsetTimeout(fn.bind(null, i), 1000);</span><br><span class=\"line\">&#125; */</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"下面代码输出的结果是多少，为什么？如何改造一下，就能让其输出-20-10？\"><a href=\"#下面代码输出的结果是多少，为什么？如何改造一下，就能让其输出-20-10？\" class=\"headerlink\" title=\"下面代码输出的结果是多少，为什么？如何改造一下，就能让其输出 20 10？\"></a>下面代码输出的结果是多少，为什么？如何改造一下，就能让其输出 20 10？</h4><p><img src=\"/2019/10/10/原理题/4.png\" alt=\"Alt text\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* var b = 10;</span><br><span class=\"line\">(function b() &#123;</span><br><span class=\"line\">\tb = 20;</span><br><span class=\"line\">\tconsole.log(b); //=&gt;函数</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">console.log(b); //=&gt;10 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* let fn = function AAA() &#123;</span><br><span class=\"line\">\t// &quot;use strict&quot;;</span><br><span class=\"line\">\t// AAA = 1000; //=&gt;Uncaught TypeError: Assignment to constant variable.</span><br><span class=\"line\">\tconsole.log(AAA); //=&gt;当前函数</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// AAA(); //=&gt;Uncaught ReferenceError: AAA is not defined  </span><br><span class=\"line\">// 1.本应匿名的函数如果设置了函数名，在外面还是无法调用，但是在函数里面是可以使用的</span><br><span class=\"line\">// 2.而且类似于创建常量一样，这个名字存储的值不能再被修改（非严格模式下不错报，但是不会有任何的效果，严格模式下直接报错，我们可以把AAA理解为是用 const 创建出来的）</span><br><span class=\"line\">fn(); */</span><br><span class=\"line\"></span><br><span class=\"line\">/* var b = 10;</span><br><span class=\"line\">(function b(b) &#123;</span><br><span class=\"line\">\tb = 20;</span><br><span class=\"line\">\tconsole.log(b); //=&gt;20 里面的b一定需要是私有的，不能是全局的（声明它或者改为形参）</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">console.log(b); //=&gt;10 */</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象比较\"><a href=\"#对象比较\" class=\"headerlink\" title=\"对象比较\"></a>对象比较</h4><p><img src=\"/2019/10/10/原理题/5.png\" alt=\"Alt text\"></p>\n<p>==进行比较的时候，如果左边数据类型不一样，则先转换为相同的数据类型，然后进行比较。</p>\n<ol>\n<li>{} == {} 对象比较的是堆内存的地址</li>\n<li><code>null == undefined   true  null === undefined false</code></li>\n<li>NaN == NaN  false</li>\n<li>[12] == ‘12’   对象和字符串比较 是把对象to string（）转换为字符串后再Number再进行比较</li>\n<li>剩余的情况比较都是转换为数字再进行比较</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//=&gt;对象和数字比较：先把对象.toString()变为字符串，然后再转换为数字</span><br><span class=\"line\"> var a = &#123;</span><br><span class=\"line\">\tn: 0,</span><br><span class=\"line\">\t//=&gt;私有的属性方法</span><br><span class=\"line\">\ttoString: function () &#123;</span><br><span class=\"line\">\t\treturn ++this.n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// a.toString(); //=&gt;此时调取的就不再是Object.prototype.toString了，调取的是自己私有的</span><br><span class=\"line\">if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) &#123;</span><br><span class=\"line\">\tconsole.log(&apos;OK&apos;);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;shift:删除数组第一项，把删除的内容返回，原有数组改变</span><br><span class=\"line\"> let a = [1, 2, 3];</span><br><span class=\"line\"> a.toString = a.shift;</span><br><span class=\"line\"> if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) &#123;</span><br><span class=\"line\">\tconsole.log(&apos;OK&apos;);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> * ES6中新增加的一些方法</span><br><span class=\"line\"> *   String.fromCharCode([n])  &lt;=&gt; &quot;z&quot;.charCodeAt()  </span><br><span class=\"line\"> *   Array.from()</span><br><span class=\"line\"> *   Array.isArray() </span><br><span class=\"line\"> *   Object.create([OBJ])</span><br><span class=\"line\"> *   Object.defineProperty()</span><br><span class=\"line\"> </span><br><span class=\"line\"> let obj = &#123;&#125;;</span><br><span class=\"line\">Object.defineProperty(obj, &apos;name&apos;, &#123;</span><br><span class=\"line\">\tget: function () &#123;</span><br><span class=\"line\">\t\tconsole.log(&apos;哈哈&apos;);</span><br><span class=\"line\">\t\treturn &quot;珠峰培训&quot;;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tset: function () &#123;</span><br><span class=\"line\">\t\tconsole.log(&apos;呵呵呵&apos;);</span><br><span class=\"line\">\t\tthis.value = &quot;呵呵呵&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(window, &apos;a&apos;, &#123;</span><br><span class=\"line\">\tget: function () &#123;</span><br><span class=\"line\">\t\t//=&gt;this:window.a</span><br><span class=\"line\">\t\tthis.value ? this.value++ : this.value = 1;</span><br><span class=\"line\">\t\treturn this.value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) &#123;</span><br><span class=\"line\">\tconsole.log(&apos;OK&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"下面代码的输出结果？push源码\"><a href=\"#下面代码的输出结果？push源码\" class=\"headerlink\" title=\"下面代码的输出结果？push源码\"></a>下面代码的输出结果？push源码</h4><p><img src=\"/2019/10/10/原理题/6.png\" alt=\"Alt text\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.prototype.push = function @@(val) &#123;</span><br><span class=\"line\">\tthis[this.length] = val;</span><br><span class=\"line\">\t//=&gt;this.length在原来的基础上加1</span><br><span class=\"line\">\treturn this.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> let obj = &#123;</span><br><span class=\"line\">\t2: 3, //=&gt;1</span><br><span class=\"line\">\t3: 4, //=&gt;2</span><br><span class=\"line\">\tlength: 2, //=&gt;3/4</span><br><span class=\"line\">\tpush: Array.prototype.push</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.push(1);</span><br><span class=\"line\">//=&gt;@@(1)  //=&gt;this:obj  //=&gt;obj[obj.length]=1  //=&gt;obj[2]=1  //=&gt;obj.length=3</span><br><span class=\"line\">obj.push(2);</span><br><span class=\"line\">//=&gt;@@(2)  //=&gt;this:obj  //=&gt;obj[obj.length]=2  //=&gt;obj[3]=2  //=&gt;obj.length=4</span><br><span class=\"line\">console.log(obj);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"冒泡排序如何实现，时间复杂度是多少，-还可以如何改进？\"><a href=\"#冒泡排序如何实现，时间复杂度是多少，-还可以如何改进？\" class=\"headerlink\" title=\"冒泡排序如何实现，时间复杂度是多少， 还可以如何改进？\"></a>冒泡排序如何实现，时间复杂度是多少， 还可以如何改进？</h4><h4 id=\"完成如下需求-1\"><a href=\"#完成如下需求-1\" class=\"headerlink\" title=\"完成如下需求\"></a>完成如下需求</h4><p><img src=\"/2019/10/10/原理题/7.png\" alt=\"Alt text\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// let obj = &#123;</span><br><span class=\"line\">// \t1: 222,</span><br><span class=\"line\">// \t2: 123,</span><br><span class=\"line\">// \t5: 888</span><br><span class=\"line\">// &#125;;</span><br><span class=\"line\">// let arr = new Array(12).fill(null).map((item, index) =&gt; &#123;</span><br><span class=\"line\">// \treturn obj[index + 1] || null;</span><br><span class=\"line\">// &#125;);</span><br><span class=\"line\">// console.log(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">// let obj = &#123;</span><br><span class=\"line\">// \t1: 222,</span><br><span class=\"line\">// \t2: 123,</span><br><span class=\"line\">// \t5: 888</span><br><span class=\"line\">// &#125;;</span><br><span class=\"line\">// obj.length = 13;</span><br><span class=\"line\">// let arr = Array.from(obj).slice(1).map(item =&gt; &#123;</span><br><span class=\"line\">// \treturn typeof item === &quot;undefined&quot; ? null : item;</span><br><span class=\"line\">// &#125;);</span><br><span class=\"line\">// console.log(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">\t1: 222,</span><br><span class=\"line\">\t2: 123,</span><br><span class=\"line\">\t5: 888</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//=&gt;Object.keys(obj):获取obj中所有的属性名，以数组的方式返回</span><br><span class=\"line\">// console.log(Object.keys(obj)); //=&gt;[&quot;1&quot;,&quot;2&quot;,&quot;5&quot;]</span><br><span class=\"line\">let arr = new Array(12).fill(null);</span><br><span class=\"line\">Object.keys(obj).forEach(item =&gt; &#123;</span><br><span class=\"line\">\tarr[item - 1] = obj[item];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(arr);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"给定两个数组，-写一个方法来计算它们的交集\"><a href=\"#给定两个数组，-写一个方法来计算它们的交集\" class=\"headerlink\" title=\"给定两个数组， 写一个方法来计算它们的交集\"></a>给定两个数组， 写一个方法来计算它们的交集</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> let nums1 = [12, 23, 34, 23, 45, 34, 25, 46, 35];</span><br><span class=\"line\">let nums2 = [10, 35, 24, 23, 36, 47, 56];</span><br><span class=\"line\">let arr = [];</span><br><span class=\"line\">nums1.forEach((item, index) =&gt; &#123;</span><br><span class=\"line\">\t//=&gt;index是第一个数组当前项的索引</span><br><span class=\"line\">\t//=&gt;n当前项在第二个数组中找到相同那一项的索引</span><br><span class=\"line\">\tlet n = nums2.indexOf(item);</span><br><span class=\"line\">\tif (n &gt;= 0) &#123;</span><br><span class=\"line\">\t\tarr.push(item);</span><br><span class=\"line\">\t\tnums1.splice(index, 1);</span><br><span class=\"line\">\t\tnums2.splice(n, 1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">// console.log(arr);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"算法题「旋转数组」\"><a href=\"#算法题「旋转数组」\" class=\"headerlink\" title=\"算法题「旋转数组」\"></a>算法题「旋转数组」</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* </span><br><span class=\"line\">旋转数组</span><br><span class=\"line\">给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数</span><br><span class=\"line\">输入: [1, 2, 3, 4, 5, 6, 7] 和 k = 3</span><br><span class=\"line\">输出: [5, 6, 7, 1, 2, 3, 4]</span><br><span class=\"line\">解释:</span><br><span class=\"line\">向右旋转 1 步: [7, 1, 2, 3, 4, 5, 6]</span><br><span class=\"line\">向右旋转 2 步: [6, 7, 1, 2, 3, 4, 5]</span><br><span class=\"line\">向右旋转 3 步: [5, 6, 7, 1, 2, 3, 4]</span><br><span class=\"line\">​</span><br><span class=\"line\">输入: [-1, -100, 3, 99] 和 k = 2</span><br><span class=\"line\">输出: [3, 99, -1, -100]</span><br><span class=\"line\">解释: </span><br><span class=\"line\">向右旋转 1 步: [99, -1, -100, 3]</span><br><span class=\"line\">向右旋转 2 步: [3, 99, -1, -100] </span><br><span class=\"line\">*/</span><br><span class=\"line\">/* function rotate(k) &#123;</span><br><span class=\"line\">\t//=&gt;参数处理</span><br><span class=\"line\">\tif (k &lt; 0 || k === 0 || k === this.length) return this;</span><br><span class=\"line\">\tif (k &gt; this.length) k = k % this.length;</span><br><span class=\"line\">\t//=&gt;旋转数组</span><br><span class=\"line\">\t// return this.slice(-k).concat(this.slice(0, this.length - k));</span><br><span class=\"line\">\t// return [...this.splice(this.length - k), ...this];</span><br><span class=\"line\"></span><br><span class=\"line\">\t/!* for (let i = 0; i &lt; k; i++) &#123;</span><br><span class=\"line\">\t\tthis.unshift(this.pop());</span><br><span class=\"line\">\t&#125; *!/</span><br><span class=\"line\">\tnew Array(k).fill(&apos;&apos;).forEach(() =&gt; this.unshift(this.pop()));</span><br><span class=\"line\">\treturn this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Array.prototype.rotate = rotate;</span><br><span class=\"line\"></span><br><span class=\"line\">let arr = [1, 2, 3, 4, 5, 6, 7];</span><br><span class=\"line\">console.log(arr.rotate(3)); */</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数柯理化：预先处理思想（利用闭包的机制）\"><a href=\"#函数柯理化：预先处理思想（利用闭包的机制）\" class=\"headerlink\" title=\"函数柯理化：预先处理思想（利用闭包的机制）\"></a>函数柯理化：预先处理思想（利用闭包的机制）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 函数柯理化：预先处理的思想（利用闭包的机制） */</span><br><span class=\"line\">/* function fn(x)&#123;</span><br><span class=\"line\">\t//=&gt;预先在闭包中把X值存储起来</span><br><span class=\"line\">\treturn function(y)&#123;</span><br><span class=\"line\">\t\treturn x+y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(100)(200) */</span><br><span class=\"line\">/* (function () &#123;</span><br><span class=\"line\">\t//=&gt;this:需要改变THIS的函数</span><br><span class=\"line\">\t//=&gt;context:需要改变的THIS指向</span><br><span class=\"line\">\t//=&gt;outerArg:其余需要传递给函数的实参信息</span><br><span class=\"line\">\tfunction myBind(context = window, ...outerArg) &#123;</span><br><span class=\"line\">\t\tlet _this = this; </span><br><span class=\"line\">\t\treturn function anonymous(...innerArg) &#123;</span><br><span class=\"line\">\t\t\t_this.call(context, ...outerArg.concat(innerArg));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tFunction.prototype.myBind = myBind;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">\tname: &apos;OBJ&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function fn(...arg) &#123;</span><br><span class=\"line\">\tconsole.log(this, arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">document.body.onclick = fn.myBind(obj, 100, 200);;</span><br><span class=\"line\"> */</span><br><span class=\"line\">//=&gt;点击的时候FN中的this=&gt;obj arg=&gt;[100,200,事件对象]</span><br><span class=\"line\">// document.body.onclick = fn.bind(obj, 100, 200);</span><br><span class=\"line\">// document.body.onclick = function (ev) &#123;</span><br><span class=\"line\">// \tfn.call(obj, 100, 200, ev);</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\">//=&gt;执行bind方法，会返回一个匿名函数，当事件触发，匿名函数执行，我们再处理fn即可</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// document.body.onclick = fn; //=&gt;this:BODY  arg:[事件对象]</span><br><span class=\"line\">/* document.body.onclick = function (ev) &#123;</span><br><span class=\"line\">\t//=&gt;ev事件对象：给元素的某个事件绑定方法，当事件触发会执行这个方法，并且会把当前事件的相关信息传递给这个函数“事件对象”</span><br><span class=\"line\">\tconsole.log(ev);</span><br><span class=\"line\">&#125; */</span><br></pre></td></tr></table></figure>\n\n","text":"JavaScript —— 面试题合集1call 和 apply 的区别是什么，哪个性能更好一些call的性能要比apply好一些，（传递给函数的参数超过三个的时候差距明显）后期开发过程中偏向使用call<br>性能检测的方法：1<br>2<br>3<br>4<br>5<br>c","link":"","raw":null,"photos":[],"categories":[{"name":"面试","slug":"面试","count":1,"path":"api/categories/面试.json"}],"tags":[{"name":"指令","slug":"指令","count":4,"path":"api/tags/指令.json"}]}]}