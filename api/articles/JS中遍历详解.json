{"title":"JS中遍历详解","slug":"JS中遍历详解","date":"2019-06-26T13:48:49.000Z","updated":"2019-06-26T02:12:09.000Z","comments":true,"path":"api/articles/JS中遍历详解.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h2><blockquote>\n<p>for 语句用于创建一个循环，它包含了三个可选的表达式，三个可选的表达式包围在圆括号中并由分号分隔， 后跟一个在循环中执行的语句（通常是一个块语句）。<br>语法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for ([initialization]; [condition]; [final-expression])</span><br><span class=\"line\">   statement</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>nitialization<br>一个表达式 (包含赋值语句) 或者变量声明。典型地被用于初始化一个计数器。该表达式可以使用var或let关键字声明新的变量，使用var声明的变量不是该循环的局部变量，而是与for循环处在同样的作用域中。用let声明的变量是语句的局部变量。该表达式的结果无意义。</li>\n<li>condition<br>一个条件表达式被用于确定每一次循环是否能被执行。如果该表达式的结果为true， statement 将被执行。 这个表达式是可选的。如果被忽略，那么就被认为永远为真。如果计算结果为假，那么执行流程将被跳到for语句结构后面的第一条语句。</li>\n<li>final-expression<br>每次循环的最后都要执行的表达式。执行时机是在下一次condition的计算之前。通常被用于更新或者递增计数器变量。</li>\n<li>statement<br>只要condition的结果为true就会被执行的语句。 要在循环体内执行多条语句，使用一个块语句（{ … }）来包含要执行的语句。没有任何语句要执行，使用一个空语句（;）。<br>示例Edit节<br>使用 for节<br>以下例子声明了变量i并被初始赋值为0，for语句检查i的值是否小于9，如果小于9，则执行语句块内的语句，并且最后将i的值增加 1。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i = 0; i &lt; 9; i++) &#123;</span><br><span class=\"line\">   console.log(i);</span><br><span class=\"line\">   // more statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>可选的for表达式节<br>for语句的所有的表达式都是可选的</p>\n<p>例如，初始化块中的表达式没有被指定：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i = 0;</span><br><span class=\"line\">for (; i &lt; 9; i++) &#123;</span><br><span class=\"line\">    console.log(i);</span><br><span class=\"line\">    // more statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>像初始化块一样，条件块也是可选的。如果省略此表达式，则必须确保在循环体内跳出，以防创建死循环。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i = 0;; i++) &#123;</span><br><span class=\"line\">   console.log(i);</span><br><span class=\"line\">   if (i &gt; 3) break;</span><br><span class=\"line\">   // more statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你当然可以忽略所有的表达式。同样的，确保使用了break语句来跳出循环并且还要修改（增加）一个变量，使得break 语句的条件在某个时候是真的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">for (;;) &#123;</span><br><span class=\"line\">  if (i &gt; 3) break;</span><br><span class=\"line\">  console.log(i);</span><br><span class=\"line\">  i++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用无语句的for<br>以下 for 循环计算 [final-expression] 部分中节点的偏移位置 ，它不需要执行一个 statement 或者一组 block statement ，因此使用了空语句。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showOffsetPos(sId) &#123;</span><br><span class=\"line\">  var nLeft = 0, nTop = 0;</span><br><span class=\"line\">  for (</span><br><span class=\"line\">    var oItNode = document.getElementById(sId); /* initialization */</span><br><span class=\"line\">      oItNode; /* condition */</span><br><span class=\"line\"></span><br><span class=\"line\">    nLeft += oItNode.offsetLeft, nTop += oItNode.offsetTop, oItNode = oItNode.offsetParent /* final-expression */</span><br><span class=\"line\"></span><br><span class=\"line\">  ); /* semicolon */ </span><br><span class=\"line\"></span><br><span class=\"line\">  console.log(&apos;Offset position of \\&apos;&apos; + sId + &apos;\\&apos; element:\\n left: &apos; + nLeft + &apos;px;\\n top: &apos; + nTop + &apos;px;&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Example call: */</span><br><span class=\"line\"></span><br><span class=\"line\">showOffsetPos(&apos;content&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Output:</span><br><span class=\"line\">// &quot;Offset position of &quot;content&quot; element:</span><br><span class=\"line\">// left: 0px;</span><br><span class=\"line\">// top: 153px;&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"for…in\"><a href=\"#for…in\" class=\"headerlink\" title=\"for…in\"></a>for…in</h2><blockquote>\n<p>for…in语句以任意顺序遍历一个对象的除Symbol以外的可枚举属性。</p>\n</blockquote>\n<p><strong>语法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (variable in object)</span><br><span class=\"line\">  statement</span><br></pre></td></tr></table></figure>\n\n<p><strong>variable</strong><br>在每次迭代时，variable会被赋值为不同的属性名。<br><strong>object</strong><br>非Symbol类型的可枚举属性被迭代的对象。</p>\n<h4 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h4><blockquote>\n</blockquote>\n<p>for…in 循环只遍历可枚举属性。像 Array和 Object使用内置构造函数所创建的对象都会继承自Object.prototype和String.prototype的不可枚举属性，例如 String 的 indexOf()  方法或 Object的toString()方法。循环将遍历对象本身的所有可枚举属性，以及对象从其构造函数原型中继承的属性（更接近原型链中对象的属性覆盖原型属性）。</p>\n<h4 id=\"删除，添加或者修改属性\"><a href=\"#删除，添加或者修改属性\" class=\"headerlink\" title=\"删除，添加或者修改属性\"></a>删除，添加或者修改属性</h4><p>for…in 循环以任意序迭代一个对象的属性（请参阅delete运算符，了解为什么不能依赖于迭代的表面有序性，至少在跨浏览器设置中）。如果一个属性在一次迭代中被修改，在稍后被访问，其在循环中的值是其在稍后时间的值。一个在被访问之前已经被删除的属性将不会在之后被访问。在迭代进行时被添加到对象的属性，可能在之后的迭代被访问，也可能被忽略。</p>\n<p>通常，在迭代过程中最好不要在对象上进行添加、修改或者删除属性的操作，除非是对当前正在被访问的属性。这里并不保证是否一个被添加的属性在迭代过程中会被访问到，不保证一个修改后的属性（除非是正在被访问的）会在修改前或者修改后被访问，不保证一个被删除的属性将会在它被删除之前被访问。</p>\n<p>数组迭代和 for…in</p>\n<blockquote>\n<p>for…in不应该用于迭代一个 Array，其中索引顺序很重要。</p>\n</blockquote>\n<p>数组索引只是具有整数名称的枚举属性，并且与通用对象属性相同。不能保证for … in将以任何特定的顺序返回索引。for … in循环语句将返回所有可枚举属性，包括非整数类型的名称和继承的那些。</p>\n<p>因为迭代的顺序是依赖于执行环境的，所以数组遍历不一定按次序访问元素。因此当迭代访问顺序很重要的数组时，最好用整数索引去进行for循环（或者使用 Array.prototype.forEach() 或 for…of 循环）。</p>\n<h4 id=\"仅迭代自身的属性节\"><a href=\"#仅迭代自身的属性节\" class=\"headerlink\" title=\"仅迭代自身的属性节\"></a>仅迭代自身的属性节</h4><p>如果你只要考虑对象本身的属性，而不是它的原型，那么使用 getOwnPropertyNames() 或执行 hasOwnProperty() 来确定某属性是否是对象本身的属性（也能使用propertyIsEnumerable）。或者，如果你知道不会有任何外部代码干扰，您可以使用检查方法扩展内置原型。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a><strong>示例</strong></h3><p>下面的函数接受一个对象作为参数。被调用时迭代传入对象的所有可枚举属性然后返回一个所有属性名和其对应值的字符串。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;a:1, b:2, c:3&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">for (var prop in obj) &#123;</span><br><span class=\"line\">  console.log(&quot;obj.&quot; + prop + &quot; = &quot; + obj[prop]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Output:</span><br><span class=\"line\">// &quot;obj.a = 1&quot;</span><br><span class=\"line\">// &quot;obj.b = 2&quot;</span><br><span class=\"line\">// &quot;obj.c = 3&quot;</span><br></pre></td></tr></table></figure>\n\n<p>下面的函数说明了hasOwnProperty()的用法：继承的属性不显示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var triangle = &#123;a: 1, b: 2, c: 3&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function ColoredTriangle() &#123;</span><br><span class=\"line\">  this.color = &apos;red&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ColoredTriangle.prototype = triangle;</span><br><span class=\"line\"></span><br><span class=\"line\">var obj = new ColoredTriangle();</span><br><span class=\"line\"></span><br><span class=\"line\">for (var prop in obj) &#123;</span><br><span class=\"line\">  if (obj.hasOwnProperty(prop)) &#123;</span><br><span class=\"line\">    console.log(`obj.$&#123;prop&#125; = $&#123;obj[prop]&#125;`);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Output:</span><br><span class=\"line\">// &quot;obj.color = red&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"for…of\"><a href=\"#for…of\" class=\"headerlink\" title=\"for…of\"></a>for…of</h2><blockquote>\n<p> for…of语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句<br>语法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (variable of iterable) &#123;</span><br><span class=\"line\">    //statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>variable<br>在每次迭代中，将不同属性的值分配给变量。</li>\n<li>iterable<br>被迭代枚举其属性的对象。<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3>迭代Array<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let iterable = [10, 20, 30];</span><br><span class=\"line\"></span><br><span class=\"line\">for (let value of iterable) &#123;</span><br><span class=\"line\">    value += 1;</span><br><span class=\"line\">    console.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 11</span><br><span class=\"line\">// 21</span><br><span class=\"line\">// 31</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>如果你不想修改语句块中的变量 , 也可以使用const代替let。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let iterable = [10, 20, 30];</span><br><span class=\"line\"></span><br><span class=\"line\">for (const value of iterable) &#123;</span><br><span class=\"line\">  console.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 10</span><br><span class=\"line\">// 20</span><br><span class=\"line\">// 30</span><br></pre></td></tr></table></figure>\n\n<p>迭代String</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let iterable = &quot;boo&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">for (let value of iterable) &#123;</span><br><span class=\"line\">  console.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// &quot;b&quot;</span><br><span class=\"line\">// &quot;o&quot;</span><br><span class=\"line\">// &quot;o&quot;</span><br></pre></td></tr></table></figure>\n\n<p>迭代 TypedArray</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let iterable = new Uint8Array([0x00, 0xff]);</span><br><span class=\"line\"></span><br><span class=\"line\">for (let value of iterable) &#123;</span><br><span class=\"line\">  console.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 0</span><br><span class=\"line\">// 255</span><br></pre></td></tr></table></figure>\n\n<p>迭代Map</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let iterable = new Map([[&quot;a&quot;, 1], [&quot;b&quot;, 2], [&quot;c&quot;, 3]]);</span><br><span class=\"line\"></span><br><span class=\"line\">for (let entry of iterable) &#123;</span><br><span class=\"line\">  console.log(entry);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// [&quot;a&quot;, 1]</span><br><span class=\"line\">// [&quot;b&quot;, 2]</span><br><span class=\"line\">// [&quot;c&quot;, 3]</span><br><span class=\"line\"></span><br><span class=\"line\">for (let [key, value] of iterable) &#123;</span><br><span class=\"line\">  console.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 1</span><br><span class=\"line\">// 2</span><br><span class=\"line\">// 3</span><br></pre></td></tr></table></figure>\n\n<p>迭代 Set</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let iterable = new Set([1, 1, 2, 2, 3, 3]);</span><br><span class=\"line\"></span><br><span class=\"line\">for (let value of iterable) &#123;</span><br><span class=\"line\">  console.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 1</span><br><span class=\"line\">// 2</span><br><span class=\"line\">// 3</span><br></pre></td></tr></table></figure>\n\n<p>迭代 arguments 对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function() &#123;</span><br><span class=\"line\">  for (let argument of arguments) &#123;</span><br><span class=\"line\">    console.log(argument);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)(1, 2, 3);</span><br><span class=\"line\"></span><br><span class=\"line\">// 1</span><br><span class=\"line\">// 2</span><br><span class=\"line\">// 3</span><br></pre></td></tr></table></figure>\n\n<p>迭代 DOM 元素集合，比如一个NodeList对象：下面的例子演示给每一个 article 标签内的 p 标签添加一个 “read” 类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意：这只能在实现了NodeList.prototype[Symbol.iterator]的平台上运行</span><br><span class=\"line\">let articleParagraphs = document.querySelectorAll(&quot;article &gt; p&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">for (let paragraph of articleParagraphs) &#123;</span><br><span class=\"line\">  paragraph.classList.add(&quot;read&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关闭迭代器<br>对于for…of的循环，可以由break, throw  continue    或return终止。在这些情况下，迭代器关闭。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* foo()&#123; </span><br><span class=\"line\">  yield 1; </span><br><span class=\"line\">  yield 2; </span><br><span class=\"line\">  yield 3; </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">for (let o of foo()) &#123; </span><br><span class=\"line\">  console.log(o); </span><br><span class=\"line\">  break; // closes iterator, triggers return</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>迭代生成器<br>你还可以迭代一个生成器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* fibonacci() &#123; // 一个生成器函数</span><br><span class=\"line\">    let [prev, curr] = [0, 1];</span><br><span class=\"line\">    for (;;) &#123; // while (true) &#123;</span><br><span class=\"line\">        [prev, curr] = [curr, prev + curr];</span><br><span class=\"line\">        yield curr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">for (let n of fibonacci()) &#123;</span><br><span class=\"line\">     console.log(n); </span><br><span class=\"line\">    // 当n大于1000时跳出循环</span><br><span class=\"line\">    if (n &gt;= 1000)</span><br><span class=\"line\">        break;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不要重用生成器<br>生成器不应该重用，即使for…of循环的提前终止，例如通过break关键字。在退出循环后，生成器关闭，并尝试再次迭代，不会产生任何进一步的结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gen = (function *()&#123;</span><br><span class=\"line\">    yield 1;</span><br><span class=\"line\">    yield 2;</span><br><span class=\"line\">    yield 3;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">for (let o of gen) &#123;</span><br><span class=\"line\">    console.log(o);</span><br><span class=\"line\">    break;//关闭生成器</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">//生成器不应该重用，以下没有意义！</span><br><span class=\"line\">for (let o of gen) &#123;</span><br><span class=\"line\">    console.log(o);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>迭代其他可迭代对象<br>你还可以迭代显式实现可迭代协议的对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iterable = &#123;</span><br><span class=\"line\">  [Symbol.iterator]() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      i: 0,</span><br><span class=\"line\">      next() &#123;</span><br><span class=\"line\">        if (this.i &lt; 3) &#123;</span><br><span class=\"line\">          return &#123; value: this.i++, done: false &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return &#123; value: undefined, done: true &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">for (var value of iterable) &#123;</span><br><span class=\"line\">  console.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 0</span><br><span class=\"line\">// 1</span><br><span class=\"line\">// 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for…of与for…in的区别节\"><a href=\"#for…of与for…in的区别节\" class=\"headerlink\" title=\"for…of与for…in的区别节\"></a>for…of与for…in的区别节</h3><p>无论是for…in还是for…of语句都是迭代一些东西。它们之间的主要区别在于它们的迭代方式。</p>\n<p>for…in 语句以任意顺序迭代对象的可枚举属性。</p>\n<p>for…of 语句遍历可迭代对象定义要迭代的数据。</p>\n<p>以下示例显示了与Array一起使用时，for…of循环和for…in循环之间的区别。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.prototype.objCustom = function() &#123;&#125;; </span><br><span class=\"line\">Array.prototype.arrCustom = function() &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">let iterable = [3, 5, 7];</span><br><span class=\"line\">iterable.foo = &apos;hello&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">for (let i in iterable) &#123;</span><br><span class=\"line\">  console.log(i); // logs 0, 1, 2, &quot;foo&quot;, &quot;arrCustom&quot;, &quot;objCustom&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for (let i in iterable) &#123;</span><br><span class=\"line\">  if (iterable.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">    console.log(i); // logs 0, 1, 2, &quot;foo&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for (let i of iterable) &#123;</span><br><span class=\"line\">  console.log(i); // logs 3, 5, 7</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Object.prototype.objCustom = function() &#123;&#125;;</span><br><span class=\"line\">Array.prototype.arrCustom = function() &#123;&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">let iterable = [3, 5, 7]; </span><br><span class=\"line\">iterable.foo = &apos;hello&apos;;</span><br></pre></td></tr></table></figure>\n\n<p>每个对象将继承objCustom属性，并且作为Array的每个对象将继承arrCustom属性，因为将这些属性添加到Object.prototype和Array.prototype。由于继承和原型链，对象iterable继承属性objCustom和arrCustom。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let i in iterable) &#123;</span><br><span class=\"line\">  console.log(i); // logs 0, 1, 2, &quot;foo&quot;, &quot;arrCustom&quot;, &quot;objCustom&quot; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此循环仅以原始插入顺序记录iterable 对象的可枚举属性。它不记录数组元素3, 5, 7 或hello，因为这些不是枚举属性。但是它记录了数组索引以及arrCustom和objCustom。如果你不知道为什么这些属性被迭代，array iteration and for…in中有更多解释。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let i in iterable) &#123;</span><br><span class=\"line\">  if (iterable.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">    console.log(i); // logs 0, 1, 2, &quot;foo&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个循环类似于第一个，但是它使用hasOwnProperty() 来检查，如果找到的枚举属性是对象自己的（不是继承的）。如果是，该属性被记录。记录的属性是0, 1, 2和foo，因为它们是自身的属性（不是继承的）。属性arrCustom和objCustom不会被记录，因为它们是继承的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let i of iterable) &#123;</span><br><span class=\"line\">  console.log(i); // logs 3, 5, 7 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该循环迭代并记录iterable作为可迭代对象定义的迭代值，这些是数组元素 3, 5, 7，而不是任何对象的属性。</p>\n<h2 id=\"Array-prototype-forEach\"><a href=\"#Array-prototype-forEach\" class=\"headerlink\" title=\"Array.prototype.forEach()\"></a>Array.prototype.forEach()</h2><blockquote>\n<p>forEach() 方法对数组的每个元素执行一次提供的函数。<br>语法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.forEach(callback[, thisArg]);</span><br></pre></td></tr></table></figure>\n\n<p>参数</p>\n<ul>\n<li>callback<br>为数组中每个元素执行的函数，该函数接收三个参数：</li>\n<li>currentValue<br>数组中正在处理的当前元素。</li>\n<li>index可选<br>数组中正在处理的当前元素的索引。</li>\n<li>array可选<br>forEach() 方法正在操作的数组。</li>\n<li>thisArg可选<br>可选参数。当执行回调函数时用作 this 的值(参考对象)。</li>\n<li>返回值<br>undefined.</li>\n</ul>\n<blockquote>\n</blockquote>\n<p>描述<br>forEach 方法按升序为数组中含有效值的每一项执行一次callback 函数，那些已删除或者未初始化的项将被跳过（例如在稀疏数组上）。</p>\n<ul>\n<li>callback 函数会被依次传入三个参数：<ul>\n<li>数组当前项的值</li>\n<li>数组当前项的索引</li>\n<li>数组对象本身</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>如果 thisArg 参数有值，则每次 callback 函数被调用的时候，this 都会指向 thisArg 参数上的这个对象。如果省略了 thisArg 参数,或者赋值为 null 或 undefined，则 this 指向全局对象。callback 函数最终可观察到 this 值，这取决于函数观察到 this 的常用规则。</li>\n</ul>\n<ul>\n<li><p>forEach 遍历的范围在第一次调用 callback 前就会确定。调用 forEach 后添加到数组中的项不会被 callback 访问到。如果已经存在的值被改变，则传递给 callback 的值是 forEach 遍历到他们那一刻的值。已删除的项不会被遍历到。如果已访问的元素在迭代时被删除了（例如使用 shift()），之后的元素将被跳过 - 参见下面的示例。</p>\n</li>\n<li><p>forEach() 为每个数组元素执行callback函数；不像 map() 或者 reduce()，它总是返回 undefined 值，并且不可链式调用。典型用例是在一个链的最后执行副作用。</p>\n</li>\n<li><p>forEach() 被调用时，不会改变原数组（即调用它的数组），即使传递的参数里的 callback被调用时可能会改变原数组。（译注：此处说法似不够准确，可参考EMCA语言规范：’forEach does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.’，即forEach不直接改变调用它的对象，但是对象可能会被callback改变。）</p>\n</li>\n</ul>\n<blockquote>\n<p>注意： 没有办法中止或者跳出 forEach() 循环，除了抛出一个异常。如果你需要这样，使用 forEach() 方法是错误的。<br>若你需要提前终止循环，你可以使用：<br>简单循环<br>for…of 循环<br>Array.prototype.every()<br>Array.prototype.some()<br>Array.prototype.find()<br>Array.prototype.findIndex()<br>这些数组方法可以对数组元素判断，以便确定是否需要继续遍历：every()，some()，find()，findIndex()<br>译者注：若条件允许，也可以使用 filter() 提前过滤出需要遍历的部分，再用 forEach() 处理。</p>\n</blockquote>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>for 循环转换为 forEach</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const items = [&apos;item1&apos;, &apos;item2&apos;, &apos;item3&apos;];</span><br><span class=\"line\">const copy = [];</span><br><span class=\"line\"></span><br><span class=\"line\">// before</span><br><span class=\"line\">for (let i=0; i&lt;items.length; i++) &#123;</span><br><span class=\"line\">  copy.push(items[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// after</span><br><span class=\"line\">items.forEach(function(item)&#123;</span><br><span class=\"line\">  copy.push(item);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>使用 thisArg</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Counter() &#123;</span><br><span class=\"line\">    this.sum = 0;</span><br><span class=\"line\">    this.count = 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Counter.prototype.add = function(array) &#123;</span><br><span class=\"line\">    array.forEach(function(entry) &#123;</span><br><span class=\"line\">        this.sum += entry;</span><br><span class=\"line\">        ++this.count;</span><br><span class=\"line\">    &#125;, this);</span><br><span class=\"line\">    //console.log(this);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var obj = new Counter();</span><br><span class=\"line\">obj.add([1, 3, 5, 7]);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.count; </span><br><span class=\"line\">// 4 === (1+1+1+1)</span><br><span class=\"line\">obj.sum;</span><br><span class=\"line\">// 16 === (1+3+5+7)</span><br></pre></td></tr></table></figure>\n\n<p>因为 thisArg 参数（this）传给了 forEach()，每次调用时，它都被传给 callback 函数，作为它的 this 值。<br>注意：如果使用箭头函数表达式来传入函数参数，thisArg 参数会被忽略，因为箭头函数在词法上绑定了 this 值。</p>\n<p>对象复制函数<br>下面的代码会创建一个给定对象的副本。 创建对象的副本有不同的方法，以下是只是一种方法，并解释了 Array.prototype.forEach() 是如何使用 ECMAScript 5 Object.* 元属性（meta property ）函数工作的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function copy(obj) &#123;</span><br><span class=\"line\">  var copy = Object.create(Object.getPrototypeOf(obj));</span><br><span class=\"line\">  var propNames = Object.getOwnPropertyNames(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">  propNames.forEach(function(name) &#123;</span><br><span class=\"line\">    var desc = Object.getOwnPropertyDescriptor(obj, name);</span><br><span class=\"line\">    Object.defineProperty(copy, name, desc);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  return copy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var obj1 = &#123; a: 1, b: 2 &#125;;</span><br><span class=\"line\">var obj2 = copy(obj1); // obj2 looks like obj1 now</span><br></pre></td></tr></table></figure>\n\n<p>如果数组在迭代时被修改了，则其他元素会被跳过。节<br>下面的例子会输出”one”, “two”, “four”。当到达包含值”two”的项时，整个数组的第一个项被移除了，这导致所有剩下的项上移一个位置。因为元素 “four”现在在数组更前的位置，”three”会被跳过。 forEach()不会在迭代之前创建数组的副本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var words = [&apos;one&apos;, &apos;two&apos;, &apos;three&apos;, &apos;four&apos;];</span><br><span class=\"line\">words.forEach(function(word) &#123;</span><br><span class=\"line\">  console.log(word);</span><br><span class=\"line\">  if (word === &apos;two&apos;) &#123;</span><br><span class=\"line\">    words.shift();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// one</span><br><span class=\"line\">// two</span><br><span class=\"line\">// four</span><br><span class=\"line\">PolyfillEdit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-prototype-map\"><a href=\"#Array-prototype-map\" class=\"headerlink\" title=\"Array.prototype.map()\"></a>Array.prototype.map()</h2><blockquote>\n<p> map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var array1 = [1, 4, 9, 16];</span><br><span class=\"line\"></span><br><span class=\"line\">// pass a function to map</span><br><span class=\"line\">const map1 = array1.map(x =&gt; x * 2);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(map1);</span><br><span class=\"line\">// expected output: Array [2, 8, 18, 32]</span><br><span class=\"line\">&gt; Array [2, 8, 18, 32]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var new_array = arr.map(function callback(currentValue[, index[, array]]) &#123;</span><br><span class=\"line\"> // Return element for new_array </span><br><span class=\"line\">&#125;[, thisArg])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h3><blockquote>\n</blockquote>\n<p>map 方法会给原数组中的每个元素都按顺序调用一次  callback 函数。callback 每次执行后的返回值（包括 undefined）组合起来形成一个新数组。 callback 函数只会在有值的索引上被调用；那些从来没被赋过值或者使用 delete 删除的索引则不会被调用。</p>\n<ul>\n<li><p>callback 函数会被自动传入三个参数：数组元素，元素索引，原数组本身。</p>\n</li>\n<li><p>如果 thisArg 参数有值，则每次 callback 函数被调用的时候，this 都会指向 thisArg 参数上的这个对象。如果省略了 thisArg 参数,或者赋值为 null 或 undefined，则 this 指向全局对象 。</p>\n</li>\n<li><p>map 不修改调用它的原数组本身（当然可以在 callback 执行时改变原数组）。</p>\n</li>\n<li><p>使用 map 方法处理数组时，数组元素的范围是在 callback 方法第一次调用之前就已经确定了。在 map 方法执行的过程中：原数组中新增加的元素将不会被 callback 访问到；若已经存在的元素被改变或删除了，则它们的传递到 callback 的值是 map 方法遍历到它们的那一时刻的值；而被删除的元素将不会被访问到。</p>\n</li>\n</ul>\n<h3 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>求数组中每个元素的平方根<br>下面的代码创建了一个新数组，值为原数组中对应数字的平方根。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var numbers = [1, 4, 9];</span><br><span class=\"line\">var roots = numbers.map(Math.sqrt);</span><br><span class=\"line\">// roots的值为[1, 2, 3], numbers的值仍为[1, 4, 9]</span><br></pre></td></tr></table></figure>\n\n<p>使用 map 重新格式化数组中的对象<br>以下代码使用一个包含对象的数组来重新创建一个格式化后的数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var kvArray = [&#123;key: 1, value: 10&#125;, </span><br><span class=\"line\">               &#123;key: 2, value: 20&#125;, </span><br><span class=\"line\">               &#123;key: 3, value: 30&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">var reformattedArray = kvArray.map(function(obj) &#123; </span><br><span class=\"line\">   var rObj = &#123;&#125;;</span><br><span class=\"line\">   rObj[obj.key] = obj.value;</span><br><span class=\"line\">   return rObj;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// reformattedArray 数组为： [&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;], </span><br><span class=\"line\"></span><br><span class=\"line\">// kvArray 数组未被修改: </span><br><span class=\"line\">// [&#123;key: 1, value: 10&#125;, </span><br><span class=\"line\">//  &#123;key: 2, value: 20&#125;, </span><br><span class=\"line\">//  &#123;key: 3, value: 30&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>使用一个包含一个参数的函数来mapping(构建)一个数字数组<br>下面的代码表示了当函数需要一个参数时map的工作方式。当map循环遍历原始数组时，这个参数会自动被分配成数组中对应的每个元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var numbers = [1, 4, 9];</span><br><span class=\"line\">var doubles = numbers.map(function(num) &#123;</span><br><span class=\"line\">  return num * 2;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// doubles数组的值为： [2, 8, 18]</span><br><span class=\"line\">// numbers数组未被修改： [1, 4, 9]</span><br></pre></td></tr></table></figure>\n\n<p>一般的map 方法<br>下面的例子演示如何在一个 String  上使用 map 方法获取字符串中每个字符所对应的 ASCII 码组成的数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var map = Array.prototype.map</span><br><span class=\"line\">var a = map.call(&quot;Hello World&quot;, function(x) &#123; </span><br><span class=\"line\">  return x.charCodeAt(0); </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// a的值为[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]</span><br></pre></td></tr></table></figure>\n\n<p>querySelectorAll 应用<br>下面代码展示了如何去遍历用 querySelectorAll 得到的动态对象集合。在这里，我们获得了文档里所有选中的选项，并将其打印：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var elems = document.querySelectorAll(&apos;select option:checked&apos;);</span><br><span class=\"line\">var values = Array.prototype.map.call(elems, function(obj) &#123;</span><br><span class=\"line\">  return obj.value;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下，map 方法中的 callback 函数只需要接受一个参数，就是正在被遍历的数组元素本身。但这并不意味着 map 只给 callback 传了一个参数。这个思维惯性可能会让我们犯一个很容易犯的错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 下面的语句返回什么呢:</span><br><span class=\"line\">[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt);</span><br><span class=\"line\">// 你可能觉的会是[1, 2, 3]</span><br><span class=\"line\">// 但实际的结果是 [1, NaN, NaN]</span><br><span class=\"line\"></span><br><span class=\"line\">// 通常使用parseInt时,只需要传递一个参数.</span><br><span class=\"line\">// 但实际上,parseInt可以有两个参数.第二个参数是进制数.</span><br><span class=\"line\">// 可以通过语句&quot;alert(parseInt.length)===2&quot;来验证.</span><br><span class=\"line\">// map方法在调用callback函数时,会给它传递三个参数:当前正在遍历的元素, </span><br><span class=\"line\">// 元素索引, 原数组本身.</span><br><span class=\"line\">// 第三个参数parseInt会忽视, 但第二个参数不会,也就是说,</span><br><span class=\"line\">// parseInt把传过来的索引值当成进制数来使用.从而返回了NaN.</span><br><span class=\"line\"></span><br><span class=\"line\">function returnInt(element) &#123;</span><br><span class=\"line\">  return parseInt(element, 10);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;].map(returnInt); // [1, 2, 3]</span><br><span class=\"line\">// 意料之中的结果</span><br><span class=\"line\"></span><br><span class=\"line\">// 也可以使用简单的箭头函数，结果同上</span><br><span class=\"line\">[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;].map( str =&gt; parseInt(str) );</span><br><span class=\"line\"></span><br><span class=\"line\">// 一个更简单的方式:</span><br><span class=\"line\">[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;].map(Number); // [1, 2, 3]</span><br><span class=\"line\">// 与`parseInt` 不同，下面的结果会返回浮点数或指数:</span><br><span class=\"line\">[&apos;1.1&apos;, &apos;2.2e2&apos;, &apos;3e300&apos;].map(Number); // [1.1, 220, 3e+300]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-prototype-some\"><a href=\"#Array-prototype-some\" class=\"headerlink\" title=\"Array.prototype.some()\"></a>Array.prototype.some()</h2><blockquote>\n<p>some() 方法测试数组中是不是有元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</p>\n</blockquote>\n<blockquote>\n<p>注意：如果用一个空数组进行测试，在任何情况下它返回的都是false。</p>\n</blockquote>\n<p>语法Edit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.some(callback(element[, index[, array]])[, thisArg])</span><br></pre></td></tr></table></figure>\n\n<p>参数</p>\n<ul>\n<li>callback<br>用来测试每个元素的函数，接受三个参数：</li>\n<li>element<br>数组中正在处理的元素。</li>\n<li>index 可选<br>数组中正在处理的元素的索引值。</li>\n<li>array可选<br>some()被调用的数组。</li>\n<li>thisArg可选<br>执行 callback 时使用的 this 值。</li>\n<li>返回值<br>只要数组中有一个元素通过回调函数的测试就会返回true；所有元素都没有通过回调函数的测试返回值才会为false</li>\n</ul>\n<blockquote>\n<p>some() 为数组中的每一个元素执行一次 callback 函数，直到找到一个使得 callback 返回一个“真值”（即可转换为布尔值 true 的值）。如果找到了这样一个值，some() 将会立即返回 true。否则，some() 返回 false。callback 只会在那些”有值“的索引上被调用，不会在那些被删除或从来未被赋值的索引上调用。</p>\n</blockquote>\n<ul>\n<li><p>callback 被调用时传入三个参数：元素的值，元素的索引，被遍历的数组。</p>\n</li>\n<li><p>如果thisArg提供了参数some(),将会把它传给被调用的 callback，作为 this 值。否则，在非严格模式下将会是全局对象，严格模式下是 undefined。</p>\n</li>\n<li><p>some() 被调用时不会改变数组。</p>\n</li>\n<li><p>some() 遍历的元素的范围在第一次调用 callback. 时就已经确定了。在调用 some() 后被添加到数组中的值不会被 callback 访问到。如果数组中存在且还未被访问到的元素被 callback 改变了，则其传递给 callback 的值是 some() 访问到它那一刻的值。</p>\n</li>\n</ul>\n<h3 id=\"示例-4\"><a href=\"#示例-4\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>测试数组元素的值<br>下面的例子检测在数组中是否有元素大于 10。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isBiggerThan10(element, index, array) &#123;</span><br><span class=\"line\">  return element &gt; 10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[2, 5, 8, 1, 4].some(isBiggerThan10);  // false</span><br><span class=\"line\">[12, 5, 8, 1, 4].some(isBiggerThan10); // true</span><br></pre></td></tr></table></figure>\n\n<p>使用箭头函数测试数组元素的值<br>箭头函数 可以通过更简洁的语法实现相同的用例.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2, 5, 8, 1, 4].some(x =&gt; x &gt; 10);  // false</span><br><span class=\"line\">[12, 5, 8, 1, 4].some(x =&gt; x &gt; 10); // true</span><br></pre></td></tr></table></figure>\n\n<p>判断数组元素中是否存在某个值<br>此例中为模仿 includes()  方法, 若元素在数组中存在, 则回调函数返回值为 true :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruits = [&apos;apple&apos;, &apos;banana&apos;, &apos;mango&apos;, &apos;guava&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">function checkAvailability(arr, val) &#123;</span><br><span class=\"line\">  return arr.some(function(arrVal) &#123;</span><br><span class=\"line\">    return val === arrVal;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkAvailability(fruits, &apos;kela&apos;);   // false</span><br><span class=\"line\">checkAvailability(fruits, &apos;banana&apos;); // true</span><br></pre></td></tr></table></figure>\n\n<p>使用箭头函数判断数组元素中是否存在某个值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruits = [&apos;apple&apos;, &apos;banana&apos;, &apos;mango&apos;, &apos;guava&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">function checkAvailability(arr, val) &#123;</span><br><span class=\"line\">  return arr.some(arrVal =&gt; val === arrVal);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkAvailability(fruits, &apos;kela&apos;);   // false</span><br><span class=\"line\">checkAvailability(fruits, &apos;banana&apos;); // true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-prototype-find\"><a href=\"#Array-prototype-find\" class=\"headerlink\" title=\"Array.prototype.find()\"></a>Array.prototype.find()</h2><blockquote>\n<p>find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var array1 = [5, 12, 8, 130, 44];</span><br><span class=\"line\"></span><br><span class=\"line\">var found = array1.find(function(element) &#123;</span><br><span class=\"line\">  return element &gt; 10;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(found);</span><br><span class=\"line\">// expected output: 12</span><br><span class=\"line\">&gt; 12</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>findIndex() 方法，它返回数组中找到的元素的索引，而不是其值。</p>\n</blockquote>\n<p>语法Edit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.find(callback[, thisArg])</span><br></pre></td></tr></table></figure>\n\n<p>参数</p>\n<ul>\n<li>callback<br>在数组每一项上执行的函数，接收 3 个参数：</li>\n</ul>\n<ul>\n<li>element<br>当前遍历到的元素。</li>\n<li>index可选<br>当前遍历到的索引。</li>\n<li>array可选<br>数组本身。</li>\n<li>thisArg可选<br>执行回调时用作this 的对象。</li>\n<li>返回值<br>数组中第一个满足所提供测试函数的元素的值，否则返回 undefined。</li>\n</ul>\n<blockquote>\n<p>描述<br>find方法对数组中的每一项元素执行一次 callback 函数，直至有一个 callback 返回 true。当找到了这样一个元素后，该方法会立即返回这个元素的值，否则返回 undefined。注意 callback 函数会为数组中的每个索引调用即从 0 到 length - 1，而不仅仅是那些被赋值的索引，这意味着对于稀疏数组来说，该方法的效率要低于那些只遍历有值的索引的方法。</p>\n</blockquote>\n<ul>\n<li><p>callback函数带有3个参数：当前元素的值、当前元素的索引，以及数组本身。</p>\n</li>\n<li><p>如果提供了 thisArg参数，那么它将作为每次 callback函数执行时的this ，如果未提供，则使用 undefined。</p>\n</li>\n<li><p>find方法不会改变数组。</p>\n</li>\n<li><p>在第一次调用 callback函数时会确定元素的索引范围，因此在 find方法开始执行之后添加到数组的新元素将不会被 callback函数访问到。如果数组中一个尚未被callback函数访问到的元素的值被callback函数所改变，那么当callback函数访问到它时，它的值是将是根据它在数组中的索引所访问到的当前值。被删除的元素仍旧会被访问到，但是其值已经是undefined了。</p>\n</li>\n</ul>\n<h3 id=\"示例-5\"><a href=\"#示例-5\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>用对象的属性查找数组里的对象节</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var inventory = [</span><br><span class=\"line\">    &#123;name: &apos;apples&apos;, quantity: 2&#125;,</span><br><span class=\"line\">    &#123;name: &apos;bananas&apos;, quantity: 0&#125;,</span><br><span class=\"line\">    &#123;name: &apos;cherries&apos;, quantity: 5&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">function findCherries(fruit) &#123; </span><br><span class=\"line\">    return fruit.name === &apos;cherries&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(inventory.find(findCherries)); // &#123; name: &apos;cherries&apos;, quantity: 5 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>寻找数组中的质数<br>下面的例子展示了如何从一个数组中寻找质数（如果找不到质数则返回undefined）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isPrime(element, index, array) &#123;</span><br><span class=\"line\">  var start = 2;</span><br><span class=\"line\">  while (start &lt;= Math.sqrt(element)) &#123;</span><br><span class=\"line\">    if (element % start++ &lt; 1) &#123;</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return element &gt; 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log([4, 6, 8, 12].find(isPrime)); // undefined, not found</span><br><span class=\"line\">console.log([4, 5, 8, 12].find(isPrime)); // 5</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-prototype-filter\"><a href=\"#Array-prototype-filter\" class=\"headerlink\" title=\"Array.prototype.filter()\"></a>Array.prototype.filter()</h2><blockquote>\n<p>filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var words = [&apos;spray&apos;, &apos;limit&apos;, &apos;elite&apos;, &apos;exuberant&apos;, &apos;destruction&apos;, &apos;present&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">const result = words.filter(word =&gt; word.length &gt; 6);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(result);</span><br><span class=\"line\">// expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]</span><br><span class=\"line\"> Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>语法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])</span><br></pre></td></tr></table></figure>\n\n<p>参数</p>\n<ul>\n<li>callback<br>用来测试数组的每个元素的函数。返回 true 表示该元素通过测试，保留该元素，false 则不保留。它接受以下三个参数：</li>\n<li>element<br>数组中当前正在处理的元素。</li>\n<li>index可选<br>正在处理的元素在数组中的索引。</li>\n<li>array可选<br>调用了 filter 的数组本身。</li>\n<li>thisArg可选<br>执行 callback 时，用于 this 的值。</li>\n<li>返回值<br>一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组。</li>\n</ul>\n<blockquote>\n<p>描述<br>filter 为数组中的每个元素调用一次 callback 函数，并利用所有使得 callback 返回 true 或等价于 true 的值的元素创建一个新数组。callback 只会在已经赋值的索引上被调用，对于那些已经被删除或者从未被赋值的索引不会被调用。那些没有通过 callback 测试的元素会被跳过，不会被包含在新数组中。</p>\n</blockquote>\n<p>callback 被调用时传入三个参数：</p>\n<pre><code>- 元素的值\n- 元素的索引\n- 被遍历的数组本身\n- 如果为 filter 提供一个 thisArg 参数，则它会被作为 callback 被调用时的 this 值。否则，callback 的 this 值在非严格模式下将是全局对象，严格模式下为 undefined。callback 函数最终观察到的 this 值是根据通常函数所看到的 &quot;this&quot;的规则确定的。</code></pre><ul>\n<li><p>filter 不会改变原数组，它返回过滤后的新数组。</p>\n</li>\n<li><p>filter 遍历的元素范围在第一次调用 callback 之前就已经确定了。在调用 filter 之后被添加到数组中的元素不会被 filter 遍历到。如果已经存在的元素被改变了，则他们传入 callback 的值是 filter 遍历到它们那一刻的值。被删除或从来未被赋值的元素不会被遍历到。</p>\n</li>\n</ul>\n<h3 id=\"示例-6\"><a href=\"#示例-6\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>筛选排除所有较小的值节<br>下例使用 filter 创建了一个新数组，该数组的元素由原数组中值大于 10 的元素组成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isBigEnough(element) &#123;</span><br><span class=\"line\">  return element &gt;= 10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var filtered = [12, 5, 8, 130, 44].filter(isBigEnough);</span><br><span class=\"line\">// filtered is [12, 130, 44]</span><br></pre></td></tr></table></figure>\n\n<p>过滤 JSON 中的无效条目<br>以下示例使用 filter() 创建具有非零 id 的元素的 json。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [</span><br><span class=\"line\">  &#123; id: 15 &#125;,</span><br><span class=\"line\">  &#123; id: -1 &#125;,</span><br><span class=\"line\">  &#123; id: 0 &#125;,</span><br><span class=\"line\">  &#123; id: 3 &#125;,</span><br><span class=\"line\">  &#123; id: 12.2 &#125;,</span><br><span class=\"line\">  &#123; &#125;,</span><br><span class=\"line\">  &#123; id: null &#125;,</span><br><span class=\"line\">  &#123; id: NaN &#125;,</span><br><span class=\"line\">  &#123; id: &apos;undefined&apos; &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">var invalidEntries = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">function isNumber(obj) &#123;</span><br><span class=\"line\">  return obj !== undefined &amp;&amp; typeof(obj) === &apos;number&apos; &amp;&amp; !isNaN(obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function filterByID(item) &#123;</span><br><span class=\"line\">  if (isNumber(item.id) &amp;&amp; item.id !== 0) &#123;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  invalidEntries++;</span><br><span class=\"line\">  return false; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arrByID = arr.filter(filterByID);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;Filtered Array\\n&apos;, arrByID); </span><br><span class=\"line\">// Filtered Array</span><br><span class=\"line\">// [&#123; id: 15 &#125;, &#123; id: -1 &#125;, &#123; id: 3 &#125;, &#123; id: 12.2 &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;Number of Invalid Entries = &apos;, invalidEntries); </span><br><span class=\"line\">// Number of Invalid Entries = 5</span><br></pre></td></tr></table></figure>\n\n<p>在数组中搜索<br>下例使用 filter() 根据搜索条件来过滤数组内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruits = [&apos;apple&apos;, &apos;banana&apos;, &apos;grapes&apos;, &apos;mango&apos;, &apos;orange&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Array filters items based on search criteria (query)</span><br><span class=\"line\"> */</span><br><span class=\"line\">function filterItems(query) &#123;</span><br><span class=\"line\">  return fruits.filter(function(el) &#123;</span><br><span class=\"line\">      return el.toLowerCase().indexOf(query.toLowerCase()) &gt; -1;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(filterItems(&apos;ap&apos;)); // [&apos;apple&apos;, &apos;grapes&apos;]</span><br><span class=\"line\">console.log(filterItems(&apos;an&apos;)); // [&apos;banana&apos;, &apos;mango&apos;, &apos;orange&apos;]</span><br></pre></td></tr></table></figure>\n\n<p>ES2015 实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fruits = [&apos;apple&apos;, &apos;banana&apos;, &apos;grapes&apos;, &apos;mango&apos;, &apos;orange&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Array filters items based on search criteria (query)</span><br><span class=\"line\"> */</span><br><span class=\"line\">const filterItems = (query) =&gt; &#123;</span><br><span class=\"line\">  return fruits.filter((el) =&gt;</span><br><span class=\"line\">    el.toLowerCase().indexOf(query.toLowerCase()) &gt; -1</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(filterItems(&apos;ap&apos;)); // [&apos;apple&apos;, &apos;grapes&apos;]</span><br><span class=\"line\">console.log(filterItems(&apos;an&apos;)); // [&apos;banana&apos;, &apos;mango&apos;, &apos;orange&apos;]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-prototype-every\"><a href=\"#Array-prototype-every\" class=\"headerlink\" title=\"Array.prototype.every()\"></a>Array.prototype.every()</h2><blockquote>\n<p>some函数，遍历数组中是否有符合条件的元素，返回Boolean值,只要有一个为真返回真(es5)</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isBelowThreshold(currentValue) &#123;</span><br><span class=\"line\">  return currentValue &lt; 40;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var array1 = [1, 30, 39, 29, 10, 13];</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(array1.every(isBelowThreshold));</span><br><span class=\"line\">// expected output: true</span><br></pre></td></tr></table></figure>\n\n<p>语法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.every（callback（element [，index [，array]]）[，thisArg]）</span><br></pre></td></tr></table></figure>\n\n<p>参数部分</p>\n<ul>\n<li>callback<br>一个用于测试每个元素的函数，带有三个参数：</li>\n<li>element<br>数组中正在处理的当前元素。</li>\n<li>index可选的<br>数组中正在处理的当前元素的索引。</li>\n<li>array可选的<br>调用了some 的数组本身。</li>\n<li>thisArg可选的<br>执行 callback 时，用于 this 的值。</li>\n<li>返回值部分<br>true如果回调函数为每个数组元素都符合条件返回true否则false。</li>\n</ul>\n<blockquote>\n<p>说明<br>方法对数组中出现的每个元素执行一次提供的回调函数，直到找到回调返回错误值的元素为止。如果找到这样一个元素，every方法立即返回false。否则，如果callback为所有元素返回true值，则每个元素都返回true。回调仅对已赋值的数组的索引调用;对于已删除或从未赋值的索引，不会调用它。</p>\n</blockquote>\n<ul>\n<li><p>回调函数由三个参数调用:元素的值、元素的索引和正在遍历的数组对象。</p>\n</li>\n<li><p>如果将thisArg参数提供给each，执行 callback 时，用于 this 的值。</p>\n</li>\n<li><p>every 不会使调用它的数组发生变化。</p>\n</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>检测所有数组元素的大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isBigEnough(element, index, array) &#123;</span><br><span class=\"line\">  return element &gt;= 10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[12, 5, 8, 130, 44].every(isBigEnough);   // false</span><br><span class=\"line\">[12, 54, 18, 130, 44].every(isBigEnough); // true</span><br><span class=\"line\"></span><br><span class=\"line\"> // 使用 arrow function</span><br><span class=\"line\"></span><br><span class=\"line\">[12, 5, 8, 130, 44].every(x =&gt; x &gt;= 10); // false</span><br><span class=\"line\">[12, 54, 18, 130, 44].every(x =&gt; x &gt;= 10); // true​</span><br></pre></td></tr></table></figure>\n\n<p>影响原始数组增删改操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Modifying items</span><br><span class=\"line\">let arr = [1,2,3,4];</span><br><span class=\"line\">arr.every((elem,index,arr)=&gt;&#123;</span><br><span class=\"line\">  arr[index+1]-=1</span><br><span class=\"line\">  console.log(`[$&#123;arr&#125;][$&#123;index&#125;] -&gt; $&#123;elem&#125;`)</span><br><span class=\"line\">  return elem &lt; 2 </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 1st iteration: [1,1,3,4][0] -&gt; 1</span><br><span class=\"line\">// 2nd iteration: [1,1,2,4][1] -&gt; 1</span><br><span class=\"line\">// 3rd iteration: [1,1,2,3][2] -&gt; 2</span><br><span class=\"line\"></span><br><span class=\"line\">// Appending items</span><br><span class=\"line\">arr = [1,2,3,4];</span><br><span class=\"line\">arr.every((elem,index,arr)=&gt;&#123;</span><br><span class=\"line\">  arr.push(&apos;new&apos;)</span><br><span class=\"line\">  console.log(`[$&#123;arr&#125;][$&#123;index&#125;] -&gt; $&#123;elem&#125;`)</span><br><span class=\"line\">  return elem &lt; 5</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// Loop runs upto three iterations, even after appending new items</span><br><span class=\"line\">// 1st iteration: [1,2,3,new][0] -&gt; 1</span><br><span class=\"line\">// 2nd iteration: [1,2,3,new,new][1] -&gt; 2</span><br><span class=\"line\">// 3rd iteration: [1,2,3,new,new,new][2] -&gt; 3</span><br><span class=\"line\"></span><br><span class=\"line\">// Deleting items</span><br><span class=\"line\">arr = [1,2,3,4];</span><br><span class=\"line\">arr.every((elem,index,arr)=&gt;&#123;</span><br><span class=\"line\">  arr.pop()</span><br><span class=\"line\">  console.log(`[$&#123;arr&#125;][$&#123;index&#125;] -&gt; $&#123;elem&#125;`)</span><br><span class=\"line\">  return elem &lt; 4</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// Loop runs upto two iterations only, as the rest item&apos;s been popped off</span><br><span class=\"line\">// 1st iteration: [1,2,3][0] -&gt; 1</span><br><span class=\"line\">// 2nd iteration: [1,2][1] -&gt; 2</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"JS","slug":"JS","count":3,"path":"api/categories/JS.json"}],"tags":[{"name":"js","slug":"js","count":2,"path":"api/tags/js.json"}]}