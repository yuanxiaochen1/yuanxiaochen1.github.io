{"title":"Node基础","slug":"node基础","date":"2019-07-10T13:48:49.000Z","updated":"2019-07-10T02:12:09.000Z","comments":true,"path":"api/articles/node基础.json","photos":[],"link":"","excerpt":null,"covers":["/2019/07/10/node基础/1.png","/2019/07/10/node基础/3.png","/2019/07/10/node基础/4.png"],"content":"<h2 id=\"JavaScript——node\"><a href=\"#JavaScript——node\" class=\"headerlink\" title=\"JavaScript——node\"></a>JavaScript——node</h2><h3 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h3><blockquote>\n<p>一个解析JS的工具，之所以称为后台语言的主要原因，我们通常把node安装在服务器端，在服务器端通过node执行一些代码，实现服务器的某些功能</p>\n</blockquote>\n<h3 id=\"npm-node-package-manager-安装NODE后自带的模块管理工具，基于此完成安装和卸载模块，bower-yarn\"><a href=\"#npm-node-package-manager-安装NODE后自带的模块管理工具，基于此完成安装和卸载模块，bower-yarn\" class=\"headerlink\" title=\"npm(node package manager) 安装NODE后自带的模块管理工具，基于此完成安装和卸载模块，bower yarn\"></a>npm(node package manager) 安装NODE后自带的模块管理工具，基于此完成安装和卸载模块，bower yarn</h3><p>项目架构：基于node.js构建中间层<br>特点：单线程异步/无阻塞I/O/事件驱动<br>node.js作为服务层，抗压和抗并发能力强<br><img src=\"/2019/07/10/node基础/1.png\" alt=\"Alt text\"><br><img src=\"/2019/07/10/node基础/2.png\" alt=\"Alt text\"></p>\n<h3 id=\"I-O\"><a href=\"#I-O\" class=\"headerlink\" title=\"I/O\"></a>I/O</h3><p>I： input<br>O：output<br>I/O指对文件的读写操作</p>\n<blockquote>\n<p>JS在客户端运行，不能对客户端本地的文件进行读写操作，为了保证客户端的信息安全。<br>input：type=’file’  文件上传除外，这种需求需要客户手动自己选择。</p>\n</blockquote>\n<h3 id=\"JS在服务器端运行（基于node），可以对服务器端的文件进行操作。\"><a href=\"#JS在服务器端运行（基于node），可以对服务器端的文件进行操作。\" class=\"headerlink\" title=\"JS在服务器端运行（基于node），可以对服务器端的文件进行操作。\"></a>JS在服务器端运行（基于node），可以对服务器端的文件进行操作。</h3><blockquote>\n<p>node赋予了JS进行I/O操作的能力（内置模块fs）</p>\n</blockquote>\n<h3 id=\"window-amp-global\"><a href=\"#window-amp-global\" class=\"headerlink\" title=\"window &amp;global\"></a>window &amp;global</h3><blockquote>\n<p>在客户端浏览器中运行JS，JS全局对象：window（提供很多内置的属性和方法）在node中运行JS，全局对象是global，this可能是global(REPL中执行代码)，或当前模块(node xxx.js执行)</p>\n</blockquote>\n<ul>\n<li>process  <pre><code>+  nextTick 下个任务\n+  env  node环境变量</code></pre><ul>\n<li>buffer 文件流</li>\n<li>setImmediate 立即执行定时器 类似于（setTimeout(func,0)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"NPM基础命令\"><a href=\"#NPM基础命令\" class=\"headerlink\" title=\"NPM基础命令\"></a>NPM基础命令</h3><ol>\n<li>模块管理（安装和卸载）<blockquote>\n<p>安装在全局环境下和安装在当前项目中</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li><p>全装在全局：<code>$ npm install xxx --global</code> （$ npm i -g xxx）</p>\n</li>\n<li><p>安装在本地项目中：$ npm i xxx</p>\n<ul>\n<li>把模块设置为开发依赖（开发中）：$ npm i xxx –save-dev</li>\n<li>把模块设置为生产依赖（部署到服务器）：$ npm i xxx –save</li>\n</ul>\n</li>\n<li><p>安装在全局和本地的区别</p>\n<ul>\n<li>安装在全局后对任何项目都有作用（也有可能导致版本冲突），但是只能基于命令的方式管理，不能基于CommonJS中的require导入使用（通俗说：就是不能导入到文件中基于代码来处理）<ul>\n<li>$ npm root -g 查看全局安装到的目录</li>\n<li>之所以可以使用命令操作，是因为在全局目录下生成了一个xxx.cmd的文件</li>\n</ul>\n</li>\n<li>安装在本地默认不能基于命令管理，但是可以导入到文件中基于代码操作，只对当前项目有用</li>\n</ul>\n</li>\n<li><p>在本地安装模块之前，最好先：$ npm init -y，生成package.json模块配置文件</p>\n<ul>\n<li><p>把安装的模块生成配置清单，存放在package.json中，后期别人需要部署项目的时候，只需要执行 $ npm i 就可以把所有的依赖项重新安装一遍 “跑环境”</p>\n<ul>\n<li>$ npm i 是把开发和生产依赖都安装一遍</li>\n<li>$ npm i –production 只安装生产依赖的模块</li>\n</ul>\n</li>\n<li><p>在package.json中，可以基于scripts选项配置本地可执行的脚本命令 $npm run xxx</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">\t//=&gt;AAA是命令，值是要做的事情</span><br><span class=\"line\">\t&quot;AAA&quot;: &quot;node xxx.js&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在配置可执行脚本命令的时候，基于process的环境变量区分开发还是生产环境</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">\t//=&gt;set NODE_EVN=dev 设置全局环境变量（MAC下用 export NODE_EVN=dev）</span><br><span class=\"line\">  \t\t&quot;serve&quot;: &quot;set NODE_EVN=dev&amp;&amp;node test1.js&quot;,</span><br><span class=\"line\"> \t\t\t&quot;build&quot;: &quot;set NODE_EVN=pro&amp;&amp;node test1.js&quot;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CommonJS模块管理机制\"><a href=\"#CommonJS模块管理机制\" class=\"headerlink\" title=\"CommonJS模块管理机制\"></a>CommonJS模块管理机制</h3><blockquote>\n<p>模块化思想规定了我们模块如何创建以及导入导出；</p>\n</blockquote>\n<ul>\n<li>AMD  require.js</li>\n<li>CMD sea.js</li>\n<li>CommonJS   node.js  </li>\n<li>ES6 Module  </li>\n</ul>\n<p><strong>内置模块</strong><br><strong>1. http/https : 创建和管理服务的模块</strong><br>        &gt; 创建服务：IIS/NGINX/APPACHE/NODE(http/https[内置模块])</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * 服务器端要做的常规任务</span><br><span class=\"line\"> *   1.创建服务：IIS/NGINX/APPACHE/NODE[HTTP/HTTPS内置模块] =&gt;端口号</span><br><span class=\"line\"> *   2.接收客户端的请求信息（请求静态资源文件的、也有请求数据的）</span><br><span class=\"line\"> *   3.查找到对应的资源文件内容或者对应的数据信息</span><br><span class=\"line\"> *   4.把找到的内容返回给客户端 </span><br><span class=\"line\"> */</span><br><span class=\"line\">let http = require(&apos;http&apos;),</span><br><span class=\"line\">\turl = require(&apos;url&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;HTTP.CREATE-SERVER创建服务</span><br><span class=\"line\">let server = http.createServer((req, res) =&gt; &#123;</span><br><span class=\"line\">\t//=&gt;当客户端向当前服务发送请求的时候，会触发此回调函数（请求N次，回调函数被执行N次），而且每一次都能获取本次请求的相关信息</span><br><span class=\"line\">\t//req:request REQ对象中存储了客户端的请求信息</span><br><span class=\"line\">\t//res:response RES对象中提供了对应的属性和方法，可以让服务器返回给客户端信息</span><br><span class=\"line\">\tres.end(&apos;hello world~~&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//=&gt;SERVER.LISTEN监听端口号</span><br><span class=\"line\">server.listen(8080, () =&gt; &#123;</span><br><span class=\"line\">\t//=&gt;当服务创建成功，并且端口号已经监听完成，触发此回调函数执行</span><br><span class=\"line\">\tconsole.log(&apos;server is created successful！listening on 8080 port！&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> let PORT = 80;</span><br><span class=\"line\">function listen(PORT) &#123;</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t\tserver.listen(PORT, () =&gt; &#123;</span><br><span class=\"line\">\t\t\tconsole.log(`服务已经基于$&#123;PORT&#125;端口启动，请勿关闭！`);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125; catch (err) &#123;</span><br><span class=\"line\">\t\tPORT++;</span><br><span class=\"line\">\t\tlisten(PORT);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">listen(80);</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. fs: 给予JS进行I/O</strong><br>        + 提供属性和方法，让js在node环境下执行能够操作服务器上的资源。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/* ==READ-DIR== */</span><br><span class=\"line\">//=&gt;读取指定目录（相对目录或者绝对目录都可以）中的文件目录</span><br><span class=\"line\"> let result = fs.readdirSync(&apos;./&apos;);</span><br><span class=\"line\"> console.log(result); //=&gt;[&quot;fs1.js&quot;,&quot;note.md&quot;,&quot;node_modules&quot;...]</span><br><span class=\"line\"></span><br><span class=\"line\">//异步操作是：读取成功后触发回调函数执行</span><br><span class=\"line\"> fs.readdir(&apos;./&apos;, (err, result) =&gt; &#123;</span><br><span class=\"line\"> \t//=&gt;ERR存储读取失败后的错误信息</span><br><span class=\"line\"> \t//=&gt;RESULT存储读取成功后的结果（此时ERR=NULL）</span><br><span class=\"line\"> \tif (err === null) &#123;</span><br><span class=\"line\"> \t\tconsole.log(result);</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* ==READ-FILE== */</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;同步或者异步读取某一个文件中的内容</span><br><span class=\"line\">//fs.readFileSync([path],[encoding])：不设置编码格式，默认得到的是Buffer文件流（编码）格式的数据，设置UTF8，得到的结果是字符串（例如:JSON格式、HTML或者CSS等格式）；但是对于富媒体资源（例如：图片、音视频等）我们读取和传输的过程中就是基于BUFFER文件流格式操作的，所以不要设置UTF8读取；</span><br><span class=\"line\"></span><br><span class=\"line\">let result = fs.readFileSync(&apos;./add.png&apos;);</span><br><span class=\"line\">console.log(result); </span><br><span class=\"line\">fs.readFile([path],[encoding],[callback])</span><br><span class=\"line\"> fs.readFile(&apos;./package.json&apos;, &apos;utf8&apos;, (err, result) =&gt; &#123;</span><br><span class=\"line\">\tif (err !== null) return;</span><br><span class=\"line\">\tconsole.log(result);</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">/* ==WRITE-FILE== */</span><br><span class=\"line\">//=&gt;向某个文件中写入内容（如果文件不存在，它会默认创建一个文件再写入，而且写入方式是覆盖式写入“把之前文件中的内容全部覆盖”） =&gt;appendFile是追加写入内容</span><br><span class=\"line\">//=&gt;文件不存在可以，但是需要保证路径的正确性</span><br><span class=\"line\">//=&gt;fs.writeFileSync([pathname],[string/buffer content],[encoding])：没有返回值</span><br><span class=\"line\"> fs.writeFileSync(&apos;./AA.txt&apos;, &apos;你好世界~~&apos;, &apos;utf8&apos;);</span><br><span class=\"line\">fs.appendFileSync(&apos;./AA.txt&apos;, &apos;hello world~~&apos;, &apos;utf8&apos;); </span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;异步操作的方式可以监听其成功或者失败</span><br><span class=\"line\"> fs.writeFile(&apos;./AA.txt&apos;, &apos;哈哈哈~~我学会NODE了~~&apos;, &apos;utf8&apos;, err =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(err);</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">// fs.writeFileSync(&apos;./js/AA.txt&apos;, &apos;哈哈哈~~我学会NODE了~~&apos;, &apos;utf8&apos;); =&gt;这样会直接的报错 （可以基于try/catch异常捕获）</span><br><span class=\"line\"> let err = null;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">\tfs.writeFileSync(&apos;./js/AA.txt&apos;, &apos;哈哈哈~~我学会NODE了~~&apos;, &apos;utf8&apos;);</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">\terr = e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (err !== null) &#123;</span><br><span class=\"line\">\tconsole.log(&apos;执行报错~~&apos;);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;把某个文件及里面的内容拷贝到新的目录中（替换型拷贝：原来目录中存在这个文件，新拷贝的会替换原来的）</span><br><span class=\"line\"> fs.copyFile(&apos;./AA.txt&apos;, &apos;./CC.txt&apos;, err =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(err);</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;创建目录</span><br><span class=\"line\"> fs.mkdir(&apos;./js&apos;, err =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(err);</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;删除目录（但是一定要保证目录中不在有文件，否则不让删除）</span><br><span class=\"line\">fs.rmdir(&apos;./js&apos;, err =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(err);</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;删除文件</span><br><span class=\"line\"></span><br><span class=\"line\">fs.unlink(&apos;./js/1.js&apos;, err =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. url 解析URL地址的模块</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let url = require(&apos;url&apos;);</span><br><span class=\"line\">//=&gt;url.parse(str,true)用来解析URL中每一部分信息的，第二个参数传TRUE，自动会把问号参数解析成键值对的方式，存储在query属性中</span><br><span class=\"line\">// query：问号传递参数的键值对</span><br><span class=\"line\">// pathname：请求路径名称</span><br><span class=\"line\"></span><br><span class=\"line\">let str = &apos;http://www.zhufengpeixun.cn:80/stu/index.html?lx=1&amp;from=weixin#teacher&apos;;</span><br><span class=\"line\">console.log(url.parse(str, true));</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/07/10/node基础/3.png\" alt=\"Alt text\"></p>\n<p><img src=\"/2019/07/10/node基础/4.png\" alt=\"Alt text\"></p>\n<p><strong>4. path 管理路径的模块</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path = require(&apos;path&apos;);</span><br><span class=\"line\">let &#123;</span><br><span class=\"line\">\treadFile</span><br><span class=\"line\">&#125; = require(&apos;../utils/promiseFS&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">readFile(&apos;../package.json&apos;).then(result =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(result);</span><br><span class=\"line\">&#125;).catch(reason =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(reason);</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;获取当前模块所在的绝对路径 &quot;E:\\...\\js\\&quot;</span><br><span class=\"line\">// console.log(__dirname);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;获取当前NODE执行时所在的绝对目录（我们一般认为执行的目录就是项目根目录）</span><br><span class=\"line\">// console.log(path.resolve()); //=&gt;E:\\201908\\第八周\\20190923</span><br><span class=\"line\">//=&gt;如果传递了一个相对目录，也是以获取的绝对目录为依托，再查找对应的目录</span><br><span class=\"line\">// console.log(path.resolve(&apos;../package.json&apos;)); //=&gt;E:\\201908\\第八周\\package.json</span><br></pre></td></tr></table></figure>\n\n<p><strong>第三方模块</strong>  :基于<strong>npm</strong>安装的模块<br>    1. qs<br>    2. mime<br>    3. express<br>    4. express-session<br>    5. body-parser<br><strong>自定义模块</strong><br>    1. node环境下每创建一个js都相当于创建一个新的模块。每个模块中的方法都是该模块私有的方法，不同模块间即使同名的方法也不会冲突。<br>    2. module.exports就是node天生自带的用来导出模块中方法的方法。<br>    3. ruquire是NODE中内置导入模块的方法<br>    4. require导入模块是同步的，每一次导入模块都是把要导入的js文件自上而下执行一遍（执行一遍）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">\t\t\t // 属性和方法  暴露在外面被调用的方法</span><br><span class=\"line\">\t\t\t &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let module = require(&apos;./xx&apos;);</span><br><span class=\"line\">// 1.可以省略.js;</span><br><span class=\"line\">// 2. 调取自定义模块需要加 ../(上级目录) ./(当前目录)  /(根目录)  </span><br><span class=\"line\">// 3. 不加默认逐步产找第三方》内置》报错</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>构建服务器express</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let express = require(&apos;express&apos;),</span><br><span class=\"line\">\tapp = express();</span><br><span class=\"line\">app.listen(8080, () =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(&apos;server is create success！listening on 8080 port！&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(&apos;./static&apos;));</span><br><span class=\"line\">app.use((req, res, next) =&gt; &#123;</span><br><span class=\"line\">\tres.status(404);</span><br><span class=\"line\">\tres.send(&apos;NOT FOUND!&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>构建服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let http = require(&apos;http&apos;),</span><br><span class=\"line\">\turl = require(&apos;url&apos;),</span><br><span class=\"line\">\tpath = require(&apos;path&apos;);</span><br><span class=\"line\">let &#123;</span><br><span class=\"line\">\treadFile</span><br><span class=\"line\">&#125; = require(&apos;./utils/promiseFS&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;HTTP.CREATE-SERVER创建服务</span><br><span class=\"line\">let server = http.createServer((req, res) =&gt; &#123;</span><br><span class=\"line\">\tlet &#123;</span><br><span class=\"line\">\t\t//=&gt;URL存储的是请求信息中的：资源文件的路径名称和问号传参的信息</span><br><span class=\"line\">\t\turl: requestURL</span><br><span class=\"line\">\t&#125; = req;</span><br><span class=\"line\">\tlet &#123;</span><br><span class=\"line\">\t\t//=&gt;请求资源的路径名称</span><br><span class=\"line\">\t\tpathname,</span><br><span class=\"line\">\t\t//=&gt;问号传参信息(键值对)</span><br><span class=\"line\">\t\tquery</span><br><span class=\"line\">\t&#125; = url.parse(requestURL, true);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//=&gt;根据请求的路径和名称，让其去STATIC文件中查找对应的资源文件内容</span><br><span class=\"line\">\tpathname = path.resolve(&apos;./static&apos;) + pathname;</span><br><span class=\"line\">\treadFile(pathname).then(result =&gt; &#123;</span><br><span class=\"line\">\t\t//=&gt;返回的数据格式一般都是字符串或者BUFFER  </span><br><span class=\"line\">\t\t//WRITE服务器返回信息（可以执行多次）</span><br><span class=\"line\">\t\t//END告诉客户端返回的信息已经结束了（必须写的）</span><br><span class=\"line\">\t\t//RES.END相当于基于响应主体返回信息，还需要掌握基于响应头返回信息RES.WRITE-HEAD(STATUS,OPTIONS)</span><br><span class=\"line\">\t\tres.writeHead(200, &#123;</span><br><span class=\"line\">\t\t\t//=&gt;告诉客户端返回的数据格式和编码方式：返回的格式类型是MIME类型（每一种文件都有一个自己所属的类型，而这个类型就是MIME类型）</span><br><span class=\"line\">\t\t\t&apos;content-type&apos;: &apos;text/css&apos;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tres.end(result);</span><br><span class=\"line\">\t&#125;).catch(err =&gt; &#123;</span><br><span class=\"line\">\t\tres.end(&apos;not found!&apos;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;SERVER.LISTEN监听端口号</span><br><span class=\"line\">server.listen(8080, () =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(&apos;server is create success！listening on 8080 port！&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>promiseFs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fs = require(&apos;fs&apos;),</span><br><span class=\"line\">\tpath = require(&apos;path&apos;),</span><br><span class=\"line\">\texportsOBJ = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;根据后缀名返回编码格式:UTF8/NULL</span><br><span class=\"line\">function suffixHandle(pathname) &#123;</span><br><span class=\"line\">\tlet suffixREG = /\\.([0-9a-zA-Z]+)$/,</span><br><span class=\"line\">\t\tsuffix = suffixREG.test(pathname) ? suffixREG.exec(pathname)[1] : &apos;&apos;,</span><br><span class=\"line\">\t\tencoding = &apos;utf8&apos;;</span><br><span class=\"line\">\t/^(PNG|GIF|JPG|JPEG|WEBP|BMP|ICO|SVG|MP3|MP4|WAV|OGG|M3U8)$/i.test(suffix) ? encoding = null : null;</span><br><span class=\"line\">\treturn encoding;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;READ-FILE/READ-DIR/MK-DIR/RM-DIR/UN-LINK</span><br><span class=\"line\">[&apos;readFile&apos;, &apos;readdir&apos;, &apos;mkdir&apos;, &apos;rmdir&apos;, &apos;unlink&apos;].forEach(item =&gt; &#123;</span><br><span class=\"line\">\texportsOBJ[item] = function anonymous(pathname) &#123;</span><br><span class=\"line\">\t\tpathname = path.resolve(pathname);</span><br><span class=\"line\">\t\treturn new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">\t\t\tlet encoding = suffixHandle(pathname),</span><br><span class=\"line\">\t\t\t\tcallback = (err, result) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\tif (err !== null) &#123;</span><br><span class=\"line\">\t\t\t\t\t\treject(err);</span><br><span class=\"line\">\t\t\t\t\t\treturn;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tresolve(result);</span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\tif (item !== &apos;readFile&apos;) &#123;</span><br><span class=\"line\">\t\t\t\tencoding = callback;</span><br><span class=\"line\">\t\t\t\tcallback = null;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfs[item](pathname, encoding, callback);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;WRITE-FILE / APPEND-FILE</span><br><span class=\"line\">[&apos;writeFile&apos;, &apos;appendFile&apos;].forEach(item =&gt; &#123;</span><br><span class=\"line\">\texportsOBJ[item] = function anonymous(pathname, content) &#123;</span><br><span class=\"line\">\t\tpathname = path.resolve(pathname);</span><br><span class=\"line\">\t\t//=&gt;如果是JSON对象,我们转化为JSON字符串</span><br><span class=\"line\">\t\tcontent !== null &amp;&amp; typeof content === &apos;object&apos; ? content = JSON.stringify(content) : null;</span><br><span class=\"line\">\t\ttypeof content !== &apos;string&apos; ? content += &apos;&apos; : null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">\t\t\tlet encoding = suffixHandle(pathname),</span><br><span class=\"line\">\t\t\t\tcallback = (err, result) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\tif (err !== null) &#123;</span><br><span class=\"line\">\t\t\t\t\t\treject(err);</span><br><span class=\"line\">\t\t\t\t\t\treturn;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tresolve(result);</span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\tfs[item](pathname, content, encoding, callback);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;COPY-FILE</span><br><span class=\"line\">exportsOBJ[&apos;copyFile&apos;] = function anonymous(pathname1, pathname2) &#123;</span><br><span class=\"line\">\tpathname1 = path.resolve(pathname1);</span><br><span class=\"line\">\tpathname2 = path.resolve(pathname2);</span><br><span class=\"line\">\treturn new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">\t\tfs[&apos;copyFile&apos;](pathname1, pathname2, err =&gt; &#123;</span><br><span class=\"line\">\t\t\tif (err !== null) &#123;</span><br><span class=\"line\">\t\t\t\treject(err);</span><br><span class=\"line\">\t\t\t\treturn;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tresolve();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* </span><br><span class=\"line\">function readFile(pathname) &#123;</span><br><span class=\"line\">\t//=&gt;富媒体资源在获取内容的时候不能使用UTF8编码格式</span><br><span class=\"line\">\t//获取文件的后缀名</span><br><span class=\"line\">\tlet suffixREG = /\\.([0-9a-zA-Z]+)$/,</span><br><span class=\"line\">\t\tsuffix = suffixREG.test(pathname) ? suffixREG.exec(pathname)[1] : &apos;&apos;,</span><br><span class=\"line\">\t\tencoding = &apos;utf8&apos;;</span><br><span class=\"line\">\t/^(PNG|GIF|JPG|JPEG|WEBP|BMP|ICO|SVG|MP3|MP4|WAV|OGG|M3U8)$/i.test(suffix) ? encoding = null : null;</span><br><span class=\"line\">\t//=&gt;用户调用的时候，传递的PATH-NAME都以项目根目录作为参照（执行JS也是在根目录执行），用户只需要把读取文件，相对根目录的路径和名称传递进来即可 =&gt;获取的是绝对路径</span><br><span class=\"line\">\tpathname = path.resolve(pathname);</span><br><span class=\"line\">\treturn new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">\t\tfs.readFile(pathname, encoding, (err, result) =&gt; &#123;</span><br><span class=\"line\">\t\t\tif (err !== null) &#123;</span><br><span class=\"line\">\t\t\t\treject(err);</span><br><span class=\"line\">\t\t\t\treturn;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tresolve(result);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125; */</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = exportsOBJ;</span><br></pre></td></tr></table></figure>\n\n<p>压缩</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * 读取CSS目录中所有的文件，找到后缀名是.CSS的</span><br><span class=\"line\"> * 依次读取CSS文件中的内容，最后把所有内容合并在一起</span><br><span class=\"line\"> * 把合并后的结果放到DIST文件夹的index.css文件中 </span><br><span class=\"line\"> */</span><br><span class=\"line\">let &#123;</span><br><span class=\"line\">\treaddir,</span><br><span class=\"line\">\treadFile,</span><br><span class=\"line\">\twriteFile</span><br><span class=\"line\">&#125; = require(&apos;./utils/promiseFS&apos;);</span><br><span class=\"line\">let less = require(&apos;less&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">readdir(&apos;./css&apos;).then(result =&gt; &#123;</span><br><span class=\"line\">\tresult = result.filter(item =&gt; /\\.CSS$/i.test(item));</span><br><span class=\"line\">\tresult = result.map(item =&gt; &#123;</span><br><span class=\"line\">\t\treturn readFile(`./css/$&#123;item&#125;`);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\treturn Promise.all(result);</span><br><span class=\"line\">&#125;).then(results =&gt; &#123;</span><br><span class=\"line\">\tresults = results.join(&apos;&apos;);</span><br><span class=\"line\">\t//=&gt;此时的RESULTS存储的是未经过压缩的合并后的CSS代码，接下来基于LESS模块完成CSS内容的压缩</span><br><span class=\"line\">\treturn new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">\t\tless.render(results, &#123;</span><br><span class=\"line\">\t\t\t//=&gt;LESS模块规定：设置压缩的方式</span><br><span class=\"line\">\t\t\tcompress: true</span><br><span class=\"line\">\t\t&#125;, (err, result) =&gt; &#123;</span><br><span class=\"line\">\t\t\tif (err !== null) reject(err);</span><br><span class=\"line\">\t\t\t//=&gt;RESULT是一个对象，对象的CSS属性包含压缩后的代码</span><br><span class=\"line\">\t\t\tresolve(result.css);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;).then(css =&gt; &#123;</span><br><span class=\"line\">\t//=&gt;把压缩后的写在指定的目录中</span><br><span class=\"line\">\treturn writeFile(&apos;./dist/index.css&apos;, css);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"node","slug":"node","count":1,"path":"api/categories/node.json"}],"tags":[{"name":"js","slug":"js","count":2,"path":"api/tags/js.json"}]}