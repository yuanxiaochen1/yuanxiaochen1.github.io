{"title":"各种工具类方法","slug":"各种工具类方法","date":"2019-04-07T03:48:49.000Z","updated":"2019-04-07T02:12:09.000Z","comments":true,"path":"api/articles/各种工具类方法.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<hr>\n<h2 id=\"type：用来检测数据类型的对象\"><a href=\"#type：用来检测数据类型的对象\" class=\"headerlink\" title=\"_type：用来检测数据类型的对象\"></a>_type：用来检测数据类型的对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * _type:用来检测数据类型的对象,里边存着检验数据类型的各种方法</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      value:要检测的数据</span><br><span class=\"line\"> *   @return(返回值)</span><br><span class=\"line\"> *      false/true</span><br><span class=\"line\"> *   用法：_type.[is检测的数据类型](value) </span><br><span class=\"line\"> *      例如：_type.isArray(obj) 检测obj是否为数组</span><br><span class=\"line\"> */</span><br><span class=\"line\">let _type = (function () &#123;</span><br><span class=\"line\">\tvar _obj = &#123;</span><br><span class=\"line\">\t\tisNumeric: &quot;Number&quot;,//数字类型</span><br><span class=\"line\">\t\tisBoolean: &apos;Boolean&apos;,//布尔类型</span><br><span class=\"line\">\t\tisString: &apos;String&apos;,//字符串类型</span><br><span class=\"line\">\t\tisNull: &apos;Null&apos;,//null类型</span><br><span class=\"line\">\t\tisUndefined: &apos;Undefined&apos;,//undefined类型</span><br><span class=\"line\">\t\tisSymbol: &apos;Symbol&apos;,//Symbol类型</span><br><span class=\"line\">\t\tisPlainObject: &apos;Object&apos;,//对象类型</span><br><span class=\"line\">\t\tisArray: &apos;Array&apos;,//数组类型</span><br><span class=\"line\">\t\tisRegExp: &apos;RegExp&apos;,//正则类型</span><br><span class=\"line\">\t\tisDate: &apos;Date&apos;,//日期对象类型</span><br><span class=\"line\">\t\tisFunction: &quot;Function&quot;,//函数类型</span><br><span class=\"line\">\t\tisWindow: &apos;Window&apos;//是否为window</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tvar _type = &#123;&#125;,</span><br><span class=\"line\">\t\t_toString = _type.toString;</span><br><span class=\"line\">\tfor (var key in _obj) &#123;</span><br><span class=\"line\">\t\tif (!_obj.hasOwnProperty(key)) break;</span><br><span class=\"line\">\t\t_type[key] = (function () &#123;</span><br><span class=\"line\">\t\t\tvar reg = new RegExp(&quot;^\\\\[object &quot; + _obj[key] + &quot;\\\\]$&quot;);</span><br><span class=\"line\">\t\t\treturn function anonymous(val) &#123;</span><br><span class=\"line\">\t\t\t\treturn reg.test(_toString.call(val));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn _type;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"each：遍历数组、类数组、对象中的每一项\"><a href=\"#each：遍历数组、类数组、对象中的每一项\" class=\"headerlink\" title=\"_each：遍历数组、类数组、对象中的每一项\"></a>_each：遍历数组、类数组、对象中的每一项</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * _each：遍历数组、类数组、对象中的每一项</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      obj:要遍历的值</span><br><span class=\"line\"> *      callback:回调函数 遍历时运行的函数</span><br><span class=\"line\"> *      context:回调函数this的指向 默认为window</span><br><span class=\"line\"> *   @return(返回值)</span><br><span class=\"line\"> *      遍历后的新值</span><br><span class=\"line\"> *   用到了上边的检验数据类型的方法 _type 所以要同上边的方法一起用</span><br><span class=\"line\"> */</span><br><span class=\"line\">function _each(obj, callback, context = window) &#123;</span><br><span class=\"line\">\tlet isLikeArray = _type.isArray(obj) || ((&apos;length&apos; in obj) &amp;&amp; _type.isNumeric(obj.length));</span><br><span class=\"line\">\ttypeof callback !== &quot;function&quot; ? callback = Function.prototype : null;</span><br><span class=\"line\">\t//=&gt;数组或者类数组</span><br><span class=\"line\">\tif (isLikeArray) &#123;</span><br><span class=\"line\">\t\tlet arr = [...obj];</span><br><span class=\"line\">\t\tfor (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\tlet item = arr[i],</span><br><span class=\"line\">\t\t\t\tresult = callback.call(context, item, i);</span><br><span class=\"line\">\t\t\tif (result === false) break;</span><br><span class=\"line\">\t\t\tif (typeof result === &quot;undefined&quot;) continue;</span><br><span class=\"line\">\t\t\tarr[i] = result;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn arr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//=&gt;对象的处理</span><br><span class=\"line\">\tlet opp = &#123;...obj&#125;;//解构赋值</span><br><span class=\"line\">\tfor (let key in opp) &#123;</span><br><span class=\"line\">\t\tif (!opp.hasOwnProperty(key)) break;//检测是否为私有属性</span><br><span class=\"line\">\t\tlet value = opp[key],</span><br><span class=\"line\">\t\t\tresult = callback.call(context, value, key);</span><br><span class=\"line\">\t\tif (result === false) break;</span><br><span class=\"line\">\t\tif (typeof result === &quot;undefined&quot;) continue;</span><br><span class=\"line\">\t\topp[key] = result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn opp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"replace：实现字符串的替换\"><a href=\"#replace：实现字符串的替换\" class=\"headerlink\" title=\"replace：实现字符串的替换\"></a>replace：实现字符串的替换</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * replace：实现字符串的替换</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      reg:正则</span><br><span class=\"line\"> *      callback:回调函数</span><br><span class=\"line\"> *   @return(返回值)</span><br><span class=\"line\"> *      替换后的新字符串</span><br><span class=\"line\"> */</span><br><span class=\"line\">function replace(reg, callback) &#123;</span><br><span class=\"line\">\tlet _this = this.substring(0),</span><br><span class=\"line\">\t\tisGlobal = reg.global,</span><br><span class=\"line\">\t\tarr = reg.exec(this);</span><br><span class=\"line\">\twhile (arr) &#123;</span><br><span class=\"line\">\t//=&gt;捕获到的结果是数组(执行回调函数,把捕获的结果传递给它)；还要接收回调函数执行的返回值，用返回值替换字符串中当前正则匹配的内容；</span><br><span class=\"line\">\t\tif (typeof callback === &quot;function&quot;) &#123;</span><br><span class=\"line\">\t\t\tlet res = callback.apply(null, arr);</span><br><span class=\"line\">\t\t\tlet index = _this.indexOf(arr[0]);</span><br><span class=\"line\">\t\t\t_this = _this.substring(0, index) + res + _this.substring(index + arr[0].length);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tarr = reg.exec(this);</span><br><span class=\"line\">\t//=&gt;不设置GLOBAL的情况执行一次</span><br><span class=\"line\">\tif (!isGlobal) break;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">return _this;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的节流\"><a href=\"#函数的节流\" class=\"headerlink\" title=\"函数的节流\"></a>函数的节流</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * _throttle:函数的节流</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      func:需要节流的函数</span><br><span class=\"line\"> *      wait:规定执行的等待时间</span><br><span class=\"line\"> */</span><br><span class=\"line\">function _throttle(func, wait) &#123;</span><br><span class=\"line\">\tlet timer = null,</span><br><span class=\"line\">\t\tresult = null,</span><br><span class=\"line\">\t\tprevious = 0;</span><br><span class=\"line\">\treturn function anonymous(...args) &#123;</span><br><span class=\"line\">\t\tlet context = this,</span><br><span class=\"line\">\t\t\tnow = new Date,</span><br><span class=\"line\">\t\t\tspanTime = wait - (now - previous);</span><br><span class=\"line\">\t\tif (spanTime &lt;= 0) &#123;</span><br><span class=\"line\">\t\t\tresult = func.call(context, ...args);</span><br><span class=\"line\">\t\t\tclearTimeout(timer);</span><br><span class=\"line\">\t\t\ttimer = null;</span><br><span class=\"line\">\t\t\tprevious = now;</span><br><span class=\"line\">\t\t&#125; else if (!timer) &#123;</span><br><span class=\"line\">\t\t\ttimer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">\t\t\t\tresult = func.call(context, ...args);</span><br><span class=\"line\">\t\t\t\ttimer = null;</span><br><span class=\"line\">\t\t\t\tprevious = new Date;</span><br><span class=\"line\">\t\t\t&#125;, spanTime);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的防抖\"><a href=\"#函数的防抖\" class=\"headerlink\" title=\"函数的防抖\"></a>函数的防抖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * debounce:函数的防抖</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      func:需要节流的函数</span><br><span class=\"line\"> *      wait:规定执行的等待时间</span><br><span class=\"line\"> *      immediate（false/true）： 边界触发 默认为false，传true表示防抖触发开始就运行一次需要防抖的函数</span><br><span class=\"line\"> */</span><br><span class=\"line\">function debounce(func, wait, immediate) &#123;</span><br><span class=\"line\">\tlet timer = null,</span><br><span class=\"line\">\t\tresult = null;</span><br><span class=\"line\">\treturn function anonymous(...args) &#123;</span><br><span class=\"line\">\t\tlet context = this,</span><br><span class=\"line\">\t\t\tnow = immediate &amp;&amp; !timer;</span><br><span class=\"line\">\t\tclearTimeout(timer);</span><br><span class=\"line\">\t\ttimer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">\t\t\ttimer = null;</span><br><span class=\"line\">\t\t\t!immediate ? result = func.call(context, ...args) : null;</span><br><span class=\"line\">\t\t&#125;, wait);</span><br><span class=\"line\">\t\tnow ? result = func.call(context, ...args) : null;</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时间字符串格式化\"><a href=\"#时间字符串格式化\" class=\"headerlink\" title=\"时间字符串格式化\"></a>时间字符串格式化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">* formatTime：时间字符串的格式化处理</span><br><span class=\"line\">*   @params</span><br><span class=\"line\">*     templete:[string] 我们最后期望获取日期格式的模板</span><br><span class=\"line\">*     模板规则:&#123;0&#125;-&gt;年  &#123;1~5&#125;-&gt;月日时分秒</span><br><span class=\"line\">*   @return</span><br><span class=\"line\">*     [string]格式化后的时间字符串</span><br><span class=\"line\">*/</span><br><span class=\"line\">function formatTime(templete = &quot;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日 &#123;3&#125;时&#123;4&#125;分&#123;5&#125;秒&quot;) &#123;</span><br><span class=\"line\">\tlet timeAry = this.match(/\\d+/g);</span><br><span class=\"line\">\treturn templete.replace(/\\&#123;(\\d+)\\&#125;/g, (...[, $1]) =&gt; &#123;</span><br><span class=\"line\">\t\tlet time = timeAry[$1] || &quot;00&quot;;</span><br><span class=\"line\">\t\treturn time.length &lt; 2 ? &quot;0&quot; + time : time;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t/* 扩展到内置类String.prototype上 */</span><br><span class=\"line\">[&quot;formatTime&quot;].forEach(item =&gt; &#123;</span><br><span class=\"line\">\tString.prototype[item] = eval(item);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">//用法</span><br><span class=\"line\">let time = &quot;2019-8-13 16:51:3&quot;;</span><br><span class=\"line\">console.log(time.formatTime());</span><br><span class=\"line\">console.log(time.formatTime(&quot;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日&quot;));</span><br><span class=\"line\">console.log(time.formatTime(&quot;&#123;1&#125;-&#123;2&#125; &#123;3&#125;:&#123;4&#125;&quot;));</span><br><span class=\"line\">time = &quot;2019/8/13&quot;;</span><br><span class=\"line\">console.log(time.formatTime());</span><br><span class=\"line\">console.log(time.formatTime(&quot;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日&quot;));</span><br><span class=\"line\">console.log(time.formatTime(&quot;&#123;1&#125;-&#123;2&#125; &#123;3&#125;:&#123;4&#125;&quot;));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取URL字符串信息\"><a href=\"#获取URL字符串信息\" class=\"headerlink\" title=\"获取URL字符串信息\"></a>获取URL字符串信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* </span><br><span class=\"line\">* queryURLParams：获取URL地址问号和面的参数信息（可能也包含HASH值）</span><br><span class=\"line\">*   @params</span><br><span class=\"line\">*   @return</span><br><span class=\"line\">*     [object]把所有问号参数信息以键值对的方式存储起来并且返回</span><br><span class=\"line\">*/</span><br><span class=\"line\">function queryURLParams() &#123;</span><br><span class=\"line\">\tlet obj = &#123;&#125;;</span><br><span class=\"line\">\tthis.replace(/([^?=&amp;#]+)=([^?=&amp;#]+)/g, (...[, $1, $2]) =&gt; obj[$1] = $2);</span><br><span class=\"line\">\tthis.replace(/#([^?=&amp;#]+)/g, (...[, $1]) =&gt; obj[&apos;HASH&apos;] = $1);</span><br><span class=\"line\">\treturn obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* 扩展到内置类String.prototype上 */</span><br><span class=\"line\">[&quot;formatTime&quot;, &quot;queryURLParams&quot;].forEach(item =&gt; &#123;</span><br><span class=\"line\">\tString.prototype[item] = eval(item);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//用法：</span><br><span class=\"line\">let url = &quot;http://www.baidu.cn/?lx=1&amp;from=wx#video&quot;;</span><br><span class=\"line\">console.log(url.queryURLParams());</span><br><span class=\"line\">//=&gt;&#123;lx:1,from:&apos;wx&apos;,HASH:&apos;video&apos;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取当前元素距离BODY的左、上偏移量（无视父元素）\"><a href=\"#获取当前元素距离BODY的左、上偏移量（无视父元素）\" class=\"headerlink\" title=\"获取当前元素距离BODY的左、上偏移量（无视父元素）\"></a>获取当前元素距离BODY的左、上偏移量（无视父元素）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * offset：获取当前元素距离BODY的左/上偏移（不论其父参照物是谁）</span><br><span class=\"line\"> *   @params</span><br><span class=\"line\"> *      curEle:current element当前要操作的元素</span><br><span class=\"line\"> *   @return</span><br><span class=\"line\"> *      [object]包含上/左偏移的信息  =&gt; &#123;top:xxx,left:xxx&#125; </span><br><span class=\"line\">*/</span><br><span class=\"line\">function offset(curEle) &#123;</span><br><span class=\"line\">    let par = curEle.offsetParent,</span><br><span class=\"line\">        l = curEle.offsetLeft,</span><br><span class=\"line\">        t = curEle.offsetTop;</span><br><span class=\"line\">    //存在父参照物，而且还没有找到BODY</span><br><span class=\"line\">    while (par &amp;&amp; par.tagName !== &quot;BODY&quot;) &#123;</span><br><span class=\"line\">        //在原有偏移的基础上累加：父参照物的边框、父参照物的偏移</span><br><span class=\"line\">        if (!/MSIE 8\\.0/.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">            //IE8中偏移值自已就算了边框了，不需要我们在加边框的值 navigator.userAgent获取当前浏览器的版本信息</span><br><span class=\"line\">            l += par.clientLeft;</span><br><span class=\"line\">            t += par.clientTop;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        l += par.offsetLeft;</span><br><span class=\"line\">        t += par.offsetTop;</span><br><span class=\"line\">        //继续获取上级参照物</span><br><span class=\"line\">        par = par.offsetParent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        top: t,</span><br><span class=\"line\">        left: l</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bind方法\"><a href=\"#bind方法\" class=\"headerlink\" title=\"bind方法\"></a>bind方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * bind:改变函数中this的指向</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      context:需要节流的函数</span><br><span class=\"line\"> */</span><br><span class=\"line\">//=&gt;bind方法在IE6~8中不兼容，接下来我们自己基于原生JS实现这个方法</span><br><span class=\"line\">function bind(context)&#123;</span><br><span class=\"line\">   context=context||window;</span><br><span class=\"line\">   var _this = this,</span><br><span class=\"line\">       outerArg=[].slice.call(arguments,1);</span><br><span class=\"line\">   return function anonymous() &#123;</span><br><span class=\"line\">       var innerArg=[].slice.call(arguments,0);</span><br><span class=\"line\">\t   _this.apply(context, outerArg.concat(innerArg));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"call方法\"><a href=\"#call方法\" class=\"headerlink\" title=\"call方法\"></a>call方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * call:改变函数中this的指向</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      context:需要节流的函数</span><br><span class=\"line\"> *      其余参数一个一个传</span><br><span class=\"line\"> */</span><br><span class=\"line\">function call(context)&#123;</span><br><span class=\"line\">\tcontext=context||window;</span><br><span class=\"line\">\tlet arg=[],</span><br><span class=\"line\">\t_this=this,</span><br><span class=\"line\">\tresult=null;</span><br><span class=\"line\">\tfor(let i=1;i&lt;arguments.length;i++)&#123;</span><br><span class=\"line\">\t\targ.push(arguments[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcontext.$fn=_this;</span><br><span class=\"line\">\tresult=context.$fn(...arg);</span><br><span class=\"line\">\tdelete context.$fn;</span><br><span class=\"line\">\treturn result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"apply方法\"><a href=\"#apply方法\" class=\"headerlink\" title=\"apply方法\"></a>apply方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * apply:改变函数中this的指向</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      context:需要节流的函数</span><br><span class=\"line\"> *      第二个参数为数组</span><br><span class=\"line\"> */</span><br><span class=\"line\">function apply(context=window,arg=[])&#123;</span><br><span class=\"line\">\tlet _this=this,</span><br><span class=\"line\">\tresult=null,</span><br><span class=\"line\">\tcontext.fn=_this;</span><br><span class=\"line\">\tresult=context.fn(...arg);</span><br><span class=\"line\">\tdelete context.fn;</span><br><span class=\"line\">\treturn result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":[{"name":"JS","slug":"JS","count":2,"path":"api/tags/JS.json"}]}