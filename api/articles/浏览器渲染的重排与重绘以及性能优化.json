{"title":"浏览器渲染的重排与重绘以及前端性能优化","slug":"浏览器渲染的重排与重绘以及性能优化","date":"2019-09-09T15:51:32.000Z","updated":"2019-09-09T16:51:32.000Z","comments":true,"path":"api/articles/浏览器渲染的重排与重绘以及性能优化.json","photos":[],"link":"","excerpt":null,"covers":["/2019/09/09/浏览器渲染的重排与重绘以及性能优化/3.png","/2019/09/09/浏览器渲染的重排与重绘以及性能优化/1.png","/2019/09/09/浏览器渲染的重排与重绘以及性能优化/2.png","/2019/09/09/浏览器渲染的重排与重绘以及性能优化/5.png","/2019/09/09/浏览器渲染的重排与重绘以及性能优化/4.png"],"content":"<h2 id=\"细说浏览器渲染的重排与重绘\"><a href=\"#细说浏览器渲染的重排与重绘\" class=\"headerlink\" title=\"细说浏览器渲染的重排与重绘\"></a>细说浏览器渲染的重排与重绘</h2><blockquote>\n<p>前端性能优化因为涉及到计算机网络、数据算法、图形图像处理、浏览器渲染等多方面计算机知识，常作为前端工程师乐此不疲的技术讨论话题，也正因如此，它也是面试时容易被问及的面试题之一。</p>\n</blockquote>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><ul>\n<li><p>URL从输入到页面展示的过程</p>\n</li>\n<li><p>DOM和JavaScript的关系</p>\n</li>\n<li><p>为什么操作DOM会很“慢”</p>\n</li>\n<li><p>浏览器解析HTML的过程</p>\n</li>\n<li><p>重排</p>\n</li>\n<li><p>重绘</p>\n</li>\n<li><p>优化方案</p>\n</li>\n</ul>\n<h3 id=\"URL从输入到页面展示的过程\"><a href=\"#URL从输入到页面展示的过程\" class=\"headerlink\" title=\"URL从输入到页面展示的过程\"></a>URL从输入到页面展示的过程</h3><p>在探讨浏览器解析html之前，先了解url从输入到最后页面渲染的过程是一个很有必要的步骤，它可以帮助我们把握整体流程，让我们在了解HTML解析细节之前知道它处于整个请求周期中的哪一阶段，这对我们构建完善知识图谱很有帮助。</p>\n<p>首先，我们假设输入的url的请求为最简单的Http请求，以GET请求为例，大致分以下几个步骤：</p>\n<h5 id=\"1-用户在浏览器的地址栏输入访问的URL地址。浏览器会先根据这个URL查看浏览器缓存-系统缓存-路由器缓存，若缓存中有，直接跳到第6步操作，若没有，则按照下面的步骤进行操作。\"><a href=\"#1-用户在浏览器的地址栏输入访问的URL地址。浏览器会先根据这个URL查看浏览器缓存-系统缓存-路由器缓存，若缓存中有，直接跳到第6步操作，若没有，则按照下面的步骤进行操作。\" class=\"headerlink\" title=\"1. 用户在浏览器的地址栏输入访问的URL地址。浏览器会先根据这个URL查看浏览器缓存-系统缓存-路由器缓存，若缓存中有，直接跳到第6步操作，若没有，则按照下面的步骤进行操作。\"></a>1. 用户在浏览器的地址栏输入访问的URL地址。浏览器会先根据这个URL查看浏览器缓存-系统缓存-路由器缓存，若缓存中有，直接跳到第6步操作，若没有，则按照下面的步骤进行操作。</h5><h5 id=\"2-浏览器根据输入的URL地址解析出主机名。\"><a href=\"#2-浏览器根据输入的URL地址解析出主机名。\" class=\"headerlink\" title=\"2. 浏览器根据输入的URL地址解析出主机名。\"></a>2. 浏览器根据输入的URL地址解析出主机名。</h5><blockquote>\n<p>URI（Uniform Resource Identifier / 统一资源标志符）  包含url和urn<br>URL（Uniform Resource Locator / 统一资源定位符）<br>URN（Uniform Resource Name / 统一资源名称）国际统一发版编号（使用率极低）<br>URL    <a href=\"https://mbd.baidu.com:80/newspage/data/landingsuper?context=%7B&quot;nid&quot;%3A&quot;news_9461431018812454469&quot;%7D&amp;n_type=0&amp;p_from=1#ee23\" target=\"_blank\" rel=\"noopener\">https://mbd.baidu.com:80/newspage/data/landingsuper?context=%7B&quot;nid&quot;%3A&quot;news_9461431018812454469&quot;%7D&amp;n_type=0&amp;p_from=1#ee23</a></p>\n</blockquote>\n<ul>\n<li>协议 http://    <ul>\n<li>能够把客户端和服务器端通信的信息进行传输的工具<ul>\n<li>HTTP 超文本传输协议</li>\n<li>HTTPS 为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密</li>\n<li>FTP 文件传输协议（应用于资源的下载和上传）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>域名：mbd.baidu.com：一个让用户方便记忆的名称（不通过域名，直接用服务器的外网ip）（.com /.cn/.com.cn/.edu/.io/.gov/.org/.net<ul>\n<li>顶级域名 baidu.com</li>\n<li><a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a> 1级域名</li>\n<li>music.baidu.com 2级域名</li>\n<li>kbs.music..baidu.com 3级域名</li>\n</ul>\n</li>\n<li>端口号：  :80  (0-65535) <ul>\n<li>用端口号区分同一台服务器上不同的项目,如果项目采用的就是默认端口号，书写地址可以不用加端口号，浏览器再发送请求的时候会默认添加端口号。<ul>\n<li>http 80</li>\n<li>https 443</li>\n<li>ftp 21</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>请求资源路径名称：/newspage/data/landingsuper<ul>\n<li>默认路径或名称  xxx.com/ 没写路径的话找默认资源，可以在服务器自己配置一般默认资源名称default.html </li>\n<li>伪URL地址处理（URL重写为了增加seo搜索引擎优化，动态的网址一般不会被搜索引擎收录，所以我们把动态的网址静态化，需要重写url</li>\n</ul>\n</li>\n<li>问号传参信息:  ?context=%7B”nid”%3A”news_9461431018812454469”%7D&amp;n_type=0&amp;p_from=1<ul>\n<li>客户端把信息传递给服务器方式<ul>\n<li>url地址问号传参</li>\n<li>请求报文传输</li>\n</ul>\n</li>\n<li>实现不同页面之间的信息交互 列表到详情</li>\n</ul>\n</li>\n<li>HASH值 #ee23<ul>\n<li>信息传输</li>\n<li>锚点定位</li>\n<li>基于HASH实现路由管控，不同的HASH值展示不同的组件和模块。</li>\n</ul>\n</li>\n</ul>\n<p>请求的地址中如果出现UNICODE编码内容，现代版浏览器会默认的进行编码<br>    1. 基于encodeURI编码，我们可以基于decodeURI解码，编码的是整个URL，这样整个URL中的特殊字符都会自动编译，<br>    2. encodeURIComponent/decodeURIComponent,是对URL的部分信息编码，一般是？后的信息编码。客户端和服务器端进行信息传输的时候，如果需要把请求的信息编码，要基于这两种赋值，进行统一编码解码。<br>    3. 客户端还存在针对中文的编码方式escape/unescape  后台不一定有，一般应用于客户端页面之间自己的处理。例如从列表跳转到详情，可以把传递的中文信息基于这个编码，详情页面获取编码后的信息再解码。各种客户端中的cookie信息，如果信息是中文，我们也基于这种办法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //=&gt;基于JS实现页面跳转</span><br><span class=\"line\">link.onclick = function () &#123;</span><br><span class=\"line\">\t//=&gt;获取当前页面的URL地址</span><br><span class=\"line\">\tlet url = window.location.href;</span><br><span class=\"line\">\t//=&gt;跳转页面</span><br><span class=\"line\">\twindow.location.href = &quot;http://www.zhufengpeixun.cn/stu/?from=&quot; + encodeURIComponent(url);</span><br><span class=\"line\">\t// window.open(&quot;http://www.zhufengpeixun.cn/&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-浏览器将主机名转换成服务器ip地址。浏览器先查找本地DNS缓存列表，看缓存里面是否存在这个ip-如果有则进入第4步，如果缓存中不存在这个ip地址，就再向浏览器默认的DNS服务器发送查询请求，同时缓存当前这个ip到DNS缓存列表中。更详细步骤参考https-www-cnblogs-com-xsilence-p-6035559-html\"><a href=\"#3-浏览器将主机名转换成服务器ip地址。浏览器先查找本地DNS缓存列表，看缓存里面是否存在这个ip-如果有则进入第4步，如果缓存中不存在这个ip地址，就再向浏览器默认的DNS服务器发送查询请求，同时缓存当前这个ip到DNS缓存列表中。更详细步骤参考https-www-cnblogs-com-xsilence-p-6035559-html\" class=\"headerlink\" title=\"3. 浏览器将主机名转换成服务器ip地址。浏览器先查找本地DNS缓存列表，看缓存里面是否存在这个ip,如果有则进入第4步，如果缓存中不存在这个ip地址，就再向浏览器默认的DNS服务器发送查询请求，同时缓存当前这个ip到DNS缓存列表中。更详细步骤参考https://www.cnblogs.com/xsilence/p/6035559.html\"></a>3. 浏览器将主机名转换成服务器ip地址。浏览器先查找本地DNS缓存列表，看缓存里面是否存在这个ip,如果有则进入第4步，如果缓存中不存在这个ip地址，就再向浏览器默认的DNS服务器发送查询请求，同时缓存当前这个ip到DNS缓存列表中。更详细步骤参考<a href=\"https://www.cnblogs.com/xsilence/p/6035559.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xsilence/p/6035559.html</a></h5><blockquote>\n<p>在服务器上存储着  域名 –服务器外网IP ,对DNS发送请求，进行DNS解析过程即：根据域名，在DNS服务器上查找到对应服务器的外网IP</p>\n</blockquote>\n<p>DNS优化</p>\n<ul>\n<li>缓存 浏览器会在第一次解析后，默认建立缓存，时间为1min</li>\n<li>减少DNS解析次数，一个网站中我们需要发送请求的域名和服务器尽可能减少</li>\n<li>DNS预获取，dns-prefetch: 在页面加载开始的时候，就把当前页面中需要访问其他域名（服务器）的信息进行提前dns解析，以后加载到具体内容部分可以不用解析。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;on&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//static.360buyimg.com&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//misc.360buyimg.com&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//img10.360buyimg.com&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//img11.360buyimg.com&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//img12.360buyimg.com&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h5 id=\"4-拿到ip地址后，浏览器再从URL中解析出端口号。\"><a href=\"#4-拿到ip地址后，浏览器再从URL中解析出端口号。\" class=\"headerlink\" title=\"4. 拿到ip地址后，浏览器再从URL中解析出端口号。\"></a>4. 拿到ip地址后，浏览器再从URL中解析出端口号。</h5><h5 id=\"5-拿到ip和端口后，浏览器会建立一条与目标Web服务器的TCP连接，也就是传说中的三次握手。\"><a href=\"#5-拿到ip和端口后，浏览器会建立一条与目标Web服务器的TCP连接，也就是传说中的三次握手。\" class=\"headerlink\" title=\"5. 拿到ip和端口后，浏览器会建立一条与目标Web服务器的TCP连接，也就是传说中的三次握手。\"></a>5. 拿到ip和端口后，浏览器会建立一条与目标Web服务器的TCP连接，也就是传说中的三次握手。</h5><p><img src=\"/2019/09/09/浏览器渲染的重排与重绘以及性能优化/3.png\" alt=\"Image text\"></p>\n<ul>\n<li>第一次握手：由浏览器发起，告诉服务器我要发送请求了</li>\n<li>第二次握手：由服务器发起，告诉浏览器我准备接受了，你赶紧发送吧</li>\n<li>第三次握手：由浏览器发送，告诉服务器，我马上就发了，准备接受吧</li>\n</ul>\n<h5 id=\"6-浏览器向服务器发送一条HTTP请求报文。\"><a href=\"#6-浏览器向服务器发送一条HTTP请求报文。\" class=\"headerlink\" title=\"6. 浏览器向服务器发送一条HTTP请求报文。\"></a>6. 浏览器向服务器发送一条HTTP请求报文。</h5><h5 id=\"7-服务器向浏览器返回一条HTTP响应报文。\"><a href=\"#7-服务器向浏览器返回一条HTTP响应报文。\" class=\"headerlink\" title=\"7. 服务器向浏览器返回一条HTTP响应报文。\"></a>7. 服务器向浏览器返回一条HTTP响应报文。</h5><ul>\n<li><p>HTTP报文：请求报文+响应报文</p>\n</li>\n<li><p>请求报文 ：所有经过传输协议，客户端传递给服务器的内容<br><img src=\"/2019/09/09/浏览器渲染的重排与重绘以及性能优化/1.png\" alt=\"Image text\"></p>\n<ul>\n<li>起始行</li>\n<li>请求首部</li>\n<li>请求主体<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;</span><br><span class=\"line\">&lt;headers&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;entity-body&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>响应报文：所有经过传输协议，服务器返回给客户端的内容<br><img src=\"/2019/09/09/浏览器渲染的重排与重绘以及性能优化/2.png\" alt=\"Image\"></p>\n<ul>\n<li><p>HTTP状态码的信息</p>\n</li>\n<li><p>响应首部</p>\n</li>\n<li><p>响应主体</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;version&gt;&lt;status&gt;&lt;reason-phrase&gt;</span><br><span class=\"line\">&lt;headers&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;entity-body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>HTTP状态码</p>\n<blockquote>\n<p>1-5开头三位数字</p>\n</blockquote>\n</li>\n<li><p>200 OK</p>\n</li>\n<li><p>201 created一般应用于告诉服务器创建一个新文件，服务器创建成功后返回的状态码</p>\n</li>\n<li><p>204 NO Content 对于某些请求 put delete 请求，服务器拒绝请求，返回空内容，并且以状态码204告知。</p>\n</li>\n<li><p>301 Moved Permanently  永久重定向（永久转移） </p>\n</li>\n<li><p>302 Moved Temporarily  临时转移，现在用307处理，临时重定向Temporary Redirect  主要应用于负载均衡。</p>\n</li>\n<li><p>304 NOT Modified 设置HTTP的协商缓存 </p>\n</li>\n<li><p>400 Bad Request    传递给服务器的 参数错误</p>\n</li>\n<li><p>401 Unauthorized  无权限访问</p>\n</li>\n<li><p>404 Not Found  请求地址错误</p>\n</li>\n<li><p>500  Internal Server Error未知服务器错误</p>\n</li>\n<li><p>503 Service Unavailable 服务器超负荷</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"8-关闭连接-浏览器解析文档。\"><a href=\"#8-关闭连接-浏览器解析文档。\" class=\"headerlink\" title=\"8.关闭连接 浏览器解析文档。\"></a>8.关闭连接 浏览器解析文档。</h5><p><img src=\"/2019/09/09/浏览器渲染的重排与重绘以及性能优化/5.png\" alt=\"Image text\"></p>\n<ul>\n<li>第一次挥手：由浏览器发起，发送给服务器，我请求报文发送完了，你准备关闭吧；</li>\n<li>第二次挥手：由服务器发起，告诉浏览器，我接收完请求报文，我准备关闭，你也准备吧；</li>\n<li>第三次挥手：由服务器发起，告诉浏览器，我响应报文发送完毕，你准备关闭吧；</li>\n<li>第四次挥手：由浏览器发起，告诉服务器，我响应报文接收完毕，我准备关闭，你也准备吧；</li>\n</ul>\n<h5 id=\"9-如果文档中还有资源则重复6、7、8动作，直至资源全部加载完毕。-优化（A：Connection-Keep-Alive-保持TCP不中断）\"><a href=\"#9-如果文档中还有资源则重复6、7、8动作，直至资源全部加载完毕。-优化（A：Connection-Keep-Alive-保持TCP不中断）\" class=\"headerlink\" title=\"9. 如果文档中还有资源则重复6、7、8动作，直至资源全部加载完毕。 优化（A：Connection: Keep-Alive 保持TCP不中断）\"></a>9. 如果文档中还有资源则重复6、7、8动作，直至资源全部加载完毕。 优化（A：Connection: Keep-Alive 保持TCP不中断）</h5><h3 id=\"DOM和JavaScript的关系\"><a href=\"#DOM和JavaScript的关系\" class=\"headerlink\" title=\"DOM和JavaScript的关系\"></a>DOM和JavaScript的关系</h3><p>文档对象模型（DOM）是一个独立于语言，用于操作XML和HTML文档的API,在web端，我们常用来操作HTML，但其实DOM也是可以操作XML文档的。</p>\n<p>我们现在知道，DOM是一个独立于语言的API，换句话说，DOM是一个与语言无关的API，别的语言也可以实现操作DOM的具体api，但是它在浏览器中是用JavaScript来实现的，也因此，DOM是现在JavaScript编码中很重要的一部分，因为JavaScript很多时候都在操作底层文档。</p>\n<h3 id=\"为什么操作DOM会很慢\"><a href=\"#为什么操作DOM会很慢\" class=\"headerlink\" title=\"为什么操作DOM会很慢\"></a>为什么操作DOM会很慢</h3><p>虽然DOM是由JavaScript实现的，但是在浏览器中都是把DOM和JavaScript分开来实现的，比如IE中，JavaScript的实现名为JScript，放在jscript.dll文件中，而DOM则放在另一个叫做mshtml.dll的库中。在Safari中，DOM和渲染是使用Webkit中的WebCore实现，而JavaScript是由独立的JavaScriptCore引擎实现，同样在Chrome中，同样是使用WebCore来实现渲染，而JavaScript引擎则是他们自己研发的V8引擎。</p>\n<p>由于DOM和JavaScript是被分开独立实现的，因此，每一次在通过js操作DOM的时候，就需要先去连接js和DOM，我们可以这样理解：把DOM和JavaScript比作两个岛，他们之间通过一个收费的桥连接着，每一次访问DOM的时候，就需要经过这座桥，并且给“过路费”，访问的次数越多，路费就会越高，并且访问到DOM后，操作具体的DOM还需要给“操作费”，由于浏览器访问DOM的操作很多，因此，“路费”和“操作费”自然会增加，这就是为什么操作DOM会很慢的原因</p>\n<h3 id=\"浏览器渲染HTML的步骤\"><a href=\"#浏览器渲染HTML的步骤\" class=\"headerlink\" title=\"浏览器渲染HTML的步骤\"></a>浏览器渲染HTML的步骤</h3><p><img src=\"/2019/09/09/浏览器渲染的重排与重绘以及性能优化/4.png\" alt=\"Image text\"></p>\n<p>HTML渲染大致分为如下几步：</p>\n<ol>\n<li><p>HTML被HTML解析器解析成DOM Tree, css则被css解析器解析成CSSOM Tree。</p>\n</li>\n<li><p>DOM Tree和CSSOM Tree解析完成后，被附加到一起，形成渲染树（Render Tree）。</p>\n</li>\n<li><p>节点信息计算(重排)，这个过程被叫做Layout(Webkit)或者Reflow(Mozilla)。即根据渲染树计算每个节点的几何信息(计算它们在设备视口(viewport)内的确切位置和大小)。</p>\n</li>\n<li><p>渲染绘制(重绘)，这个过程被叫做(Painting 或者 Repaint)。即根据计算好的信息绘制整个页面(得到节点的绝对像素)。</p>\n</li>\n<li><p>Display:将像素发送给GPU，展示在页面上</p>\n</li>\n</ol>\n<p>以上5步简述浏览器的一次渲染过程，理论上，每一次的dom更改或者css几何属性更改，都会引起一次浏览器的重排/重绘过程，而如果是css的非几何属性更改，则只会引起重绘过程。所以说重排一定会引起重绘，而重绘不一定会引起重排。</p>\n<h3 id=\"重排（Relayout-Reflow）\"><a href=\"#重排（Relayout-Reflow）\" class=\"headerlink\" title=\"重排（Relayout/Reflow）\"></a>重排（Relayout/Reflow）</h3><p>在弄明白什么是重排之前，我们要知道：浏览器渲染页面默认采用的是流式布局模型（Flow Based Layout），这一点很重要。</p>\n<p>所谓重排，实际上是根据渲染树中每个渲染对象的信息，计算出各自渲染对象的几何信息（DOM对象的位置和尺寸大小），并将其安置在界面中的正确位置。</p>\n<p>由于浏览器渲染界面是基于流式布局模型的，也就是某一个DOM节点信息更改了，就需要对DOM结构进行重新计算，重新布局界面，再次引发回流，只是这个结构更改程度会决定周边DOM更改范围，即全局范围和局部范围，全局范围就是从根节点html开始对整个渲染树进行重新布局，例如当我们改变了窗口尺寸或方向或者是修改了根元素的尺寸或者字体大小等；而局部布局可以是对渲染树的某部分或某一个渲染对象进行重新布局。</p>\n<h4 id=\"在此，总结会引起重排的操作有：\"><a href=\"#在此，总结会引起重排的操作有：\" class=\"headerlink\" title=\"在此，总结会引起重排的操作有：\"></a>在此，总结会引起重排的操作有：</h4><ol>\n<li><p>页面首次渲染。</p>\n</li>\n<li><p>浏览器窗口大小发生改变。</p>\n</li>\n<li><p>元素尺寸或位置发生改变。</p>\n</li>\n<li><p>元素内容变化（文字数量或图片大小等等）。</p>\n</li>\n<li><p>元素字体大小变化。</p>\n</li>\n<li><p>添加或者删除可见的DOM元素。</p>\n</li>\n<li><p>激活CSS伪类（例如：:hover）。</p>\n</li>\n<li><p>设置style属性</p>\n</li>\n<li><p>查询某些属性或调用某些方法。</p>\n</li>\n</ol>\n<blockquote>\n<p>常见引起重排属性和方法<br>width    height    margin    padding<br>display    border    position    overflow<br>clientWidth    clientHeight    clientTop    clientLeft<br>offsetWidth    offsetHeight    offsetTop    offsetLeft<br>scrollWidth    scrollHeight    scrollTop    scrollLeft<br>scrollIntoView()    scrollTo()    getComputedStyle()<br>getBoundingClientRect()    scrollIntoViewIfNeeded()</p>\n</blockquote>\n<blockquote>\n<p>重排也叫回流，实际上，reflow的字面意思也是回流，之所以有的叫做重排，也许是因为重排更好理解，更符合中国人的思维。标准文档之所以叫做回流（Reflow）,是因为浏览器渲染是基于“流式布局”的模型，流实际就使我们常说的文档流，当dom或者css几何属性发生改变的时候，文档流会受到波动联动的去更改，流就好比一条河里的水，回流就好比向河里扔了一块石头，激起涟漪，然后引起周边水流受到波及，所以叫做回流，这样理解似乎更标准更规范，不过叫什么并不重要，重要的是我们真正理解了这个过程便好。</p>\n</blockquote>\n<h3 id=\"重绘（Repainting）\"><a href=\"#重绘（Repainting）\" class=\"headerlink\" title=\"重绘（Repainting）\"></a>重绘（Repainting）</h3><p>相比重排，重绘就简单多了，所谓重绘，就是当页面中元素样式的改变并不影响它在文档流中的位置时，例如更改了字体颜色,浏览器会将新样式赋予给元素并重新绘制的过程称。</p>\n<p>常见引起浏览器绘制过程的属性包含：</p>\n<blockquote>\n<p>color    border-style    visibility    background<br>text-decoration    background-image    background-position    background-repeat<br>outline-color    outline    outline-style    border-radius<br>outline-width    box-shadow    background-size</p>\n</blockquote>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><p>我们知道操作DOM是一个高成本的操作，不仅是因为本身js与DOM的链接访问，还包括操作DOM后会引起一连串的连锁反应（重排），因此，从性能优化角度，我们可以从以下几个方面着手：</p>\n<ul>\n<li><p>减少DOM操作（放弃传统操作dom的时代，基于vue/react开始数据影响视图模式）</p>\n<ul>\n<li><p>最小化DOM访问次数，尽量缓存访问DOM的样式信息，避免过度触发回流。</p>\n</li>\n<li><p>如果在一个局部方法中需要多次访问同一个dom，则先暂存它的引用。</p>\n</li>\n</ul>\n</li>\n<li><p>分离读写操作 （现代的浏览器都有渲染队列的机制）</p>\n</li>\n<li><p>采用更优的API替代消费高的api，转换优化消费高的集合</p>\n<ul>\n<li><p>用querySelectorAll()替代getElementByXX()。</p>\n</li>\n<li><p>开启动画的GPU加速，把渲染计算交给GPU。</p>\n</li>\n<li><p>少用HTML集合（类数组）来遍历，因为集合遍历比真数组遍历耗费更高。</p>\n</li>\n<li><p>用事件委托来减少事件处理器的数量。</p>\n</li>\n</ul>\n</li>\n<li><p>减少重排</p>\n<ul>\n<li><p>样式集中改变</p>\n</li>\n<li><p>缓存布局信息</p>\n</li>\n<li><p>元素批量修改</p>\n</li>\n<li><p>避免设置大量的style属性，因为通过设置style属性改变结点样式的话，每一次设置都会触发一次reflow，所以最好是使用class属性</p>\n</li>\n<li><p>动画效果应用到position属性为absolute或fixed的元素上（脱离文档流）</p>\n</li>\n<li><p>动画实现的速度的选择。比如实现一个动画，以1个像素为单位移动这样最平滑，但是reflow就会过于频繁，大量消耗CPU资源，如果以3个像素为单位移动则会好很多。</p>\n</li>\n<li><p>不要使用table布局，因为table中某个元素旦触发了reflow，那么整个table的元素都会触发reflow。那么在不得已使用table的场合，可以设置table-layout:auto;或者是table-layout:fixed这样可以让table一行一行的渲染，这种做法也是为了限制reflow的影响范围</p>\n</li>\n</ul>\n</li>\n<li><p>css及动画处理</p>\n<ul>\n<li><p>少用css表达式</p>\n</li>\n<li><p>减少通过JavaScript代码修改元素样式，尽量使用修改class名方式操作样式或动画；</p>\n</li>\n<li><p>动画尽量使用在绝对定位或固定定位的元素上；</p>\n</li>\n<li><p>隐藏在屏幕外，或在页面滚动时，尽量停止动画；</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"前端性能优化\"><a href=\"#前端性能优化\" class=\"headerlink\" title=\"前端性能优化\"></a>前端性能优化</h3><h4 id=\"1-减少HTTP的请求次数和传输报文的大小\"><a href=\"#1-减少HTTP的请求次数和传输报文的大小\" class=\"headerlink\" title=\"1. 减少HTTP的请求次数和传输报文的大小\"></a>1. 减少HTTP的请求次数和传输报文的大小</h4><ul>\n<li>CSS SPRITE（雪碧图、图片精灵）技术</li>\n<li>使用字体图标（ICON FONT）或者SVG等矢量图<ul>\n<li>减少HTTP请求次数或者减少请求内容的大小</li>\n<li>渲染更快：因为他们是基于代码渲染的，而对于位图（png/jpg/gif）是需要先把图片编码再渲染</li>\n<li>不容易失真变形</li>\n<li>也可以使用webp格式图片，这种格式要小一些（但是需要服务器端支持这种格式的请求处理）</li>\n</ul>\n</li>\n<li>图片懒加载（延迟加载）技术<ul>\n<li>第一次加载页面的时候不去请求真实的图片，提高第一次渲染页面的速度</li>\n<li>当页面加载完，把出现在用户视野区域中的图片做真实加载，没有出现的先不加载（节约流量，也能减少对服务器的请求压力）</li>\n<li>对于数据我们也尽可能分批加载（不要一次请求过多的数据，例如分页技术）</li>\n</ul>\n</li>\n<li>音视频文件取消预加载（preload=’none’），这样可以增加第一次渲染页面的速度，当需要播放的时候再加载</li>\n<li>客户端和服务器端的数据传输尽可能基于JSON格式完成，XML格式比JSON格式要大一些（还可以基于二进制编码或者文件流格式，这种格式比文件传输好很多）</li>\n<li>把页面中的CSS/JS/图片等文件进行合并压缩<ul>\n<li>合并：争取CSS和JS都只导入一个（webpack可以实现自动合并压缩）</li>\n<li>压缩：基于webpack可以压缩、对于图片自己找工具先压缩、还可以使用服务器的GZIP压缩</li>\n</ul>\n</li>\n<li>图片地图：对于多次调取使用的图片（尤其是背景图），我们尽可能把它提取成为公共的样式，而不是每一次重新设置background</li>\n<li>图片BASE64（用BASE64码代表图片，减少HTTP请求，增加浏览器渲染的速度，所以真实项目中，尤其是移动端，如果图片加载缓慢，可能BASE64一下就好了；但是，BASE64会导致文件中的代码超级恶心，不利于维护和开发，所以少使用；webpack中可以配置图片的BASE64；）</li>\n</ul>\n<h4 id=\"2-设置各种缓存、预处理和长连接机制\"><a href=\"#2-设置各种缓存、预处理和长连接机制\" class=\"headerlink\" title=\"2. 设置各种缓存、预处理和长连接机制\"></a>2. 设置各种缓存、预处理和长连接机制</h4><ul>\n<li><p>把不经常更改的静态资源做缓存处理（一般做的是304或者ETAG等协商缓存）</p>\n</li>\n<li><p>建立 Cache-Control 和 Expires HTTP的强缓存</p>\n</li>\n<li><p>DNS缓存或者预处理（DNS PREFETCH），减少DNS的查找</p>\n</li>\n<li><p>设置本地的离线存储（manifest）或者把一些不经常更改的数据做本地存储（webstorage、indexdb）等</p>\n</li>\n<li><p>建立 Connection:keep-alive TCP长连接</p>\n</li>\n<li><p>使用HTTP2版本协议（现在用的一般都是HTTP1.1）<br>  HTTP/2.0 相比1.0有哪些重大改进？ <a href=\"https://www.zhihu.com/question/34074946\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/34074946</a></p>\n</li>\n<li><p>一个项目分为不同的域（不同的服务器），例如：资源WEB服务器、数据服务器、图片服务器、视频服务器等，这样合理利用服务器资源，但是导致过多的DNS解析</p>\n</li>\n</ul>\n<h4 id=\"3-代码方面的性能优化\"><a href=\"#3-代码方面的性能优化\" class=\"headerlink\" title=\"3. 代码方面的性能优化\"></a>3. 代码方面的性能优化</h4><ul>\n<li>减少对闭包的使用（因为过多使用闭包会产生很多不销毁的内存，处理不好的话，会导致内存溢出“栈溢出”），减少闭包的嵌套（减少作用域链的查找层级）</li>\n<li>对于动画来说：能用CSS解决的不用JS（能够用transform处理的，不用传统的css样式，因为transform开启硬件加速，不会引发回流，再或者使用定位的元素也会好很多，因为定位的元素脱离文档流，不会对其它元素的位置造成影响），能用requestAnimationFrame解决的不用定时器<ul>\n<li>requestAnimationFrame还有一个好处，当页面处于休眠无访问状态，动画会自己暂停，直到恢复访问才开始，而定时器是不论什么状态，只要页面不管，就一直处理</li>\n</ul>\n</li>\n<li>避免使用iframe（因为iframe会嵌入其它页面，这样父页面渲染的时候，还要同时把子页面也渲染了，渲染进度会变慢）</li>\n<li>减少直接对DOM的操作（原因是减少DOM的回流和重绘…），当代项目基本上都是基于mvvm/mvc数据驱动视图渲染的，对DOM的操作框架本身完成，性能要好很多</li>\n<li>低耦合高内聚（基于封装的方式：方法封装、插件、组件、框架、类库等封装，减少页面中的冗余代码，提高代码使用率）</li>\n<li>尽可能使用事件委托</li>\n<li>避免出现死循环或者嵌套循环（嵌套循环会成倍增加循环的次数）</li>\n<li>项目中尽可能使用异步编程来模拟出多线程的效果，避免主线程阻塞（异步操作基于PROMISE设计模式来管理）</li>\n<li>JS中不要使用with</li>\n<li>避免使用CSS表达式</li>\n<li>函数的防抖和节流</li>\n<li>减少使用eval（主要原因是防止压缩代码的时候，由于符号书写不合规，导致代码混乱）</li>\n<li>减少filter滤镜的使用</li>\n<li>尽可能减少选择器的层级（选择器是从右向左解析） .box a{} 和 a{}</li>\n<li>尽可能减少TABLE布局</li>\n<li>手动回收堆栈内存（赋值为null）<br>其他</li>\n<li>CDN（地域分布式服务器），加服务器</li>\n</ul>\n<p>JS前端代码优化的108条建议<br>雅虎CSS代码优化的36条建议 <a href=\"https://blog.csdn.net/ime33/article/details/77862047\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ime33/article/details/77862047</a></p>\n<blockquote>\n<p>感谢这个时代，让我们可以站在巨人的肩膀上，窥探程序世界的宏伟壮观，我愿以一颗赤子心，踏遍程序世界的千山万水！愿每一个行走在程序世界的同仁，都活成心中想要的样子，加油。</p>\n</blockquote>\n<p>引用文章：小白师兄 周啸天<br>链接：<a href=\"https://www.imooc.com/article/45936\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/article/45936</a><br>链接：<a href=\"https://www.yuque.com/books/share/b09738d1-9059-4fb5-9581-95df9e85e2c6/wmu1u9\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/books/share/b09738d1-9059-4fb5-9581-95df9e85e2c6/wmu1u9</a></p>\n","categories":[{"name":"JS","slug":"JS","count":3,"path":"api/categories/JS.json"}],"tags":[{"name":"指令","slug":"指令","count":4,"path":"api/tags/指令.json"}]}