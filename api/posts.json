{"total":3,"pageSize":10,"pageCount":1,"data":[{"title":"","slug":"各种工具类方法","date":"2019-09-11T12:51:06.419Z","updated":"2019-09-11T12:51:06.524Z","comments":true,"path":"api/articles/各种工具类方法.json","excerpt":"","keywords":null,"cover":null,"content":"<p>title：工具类的方法</p>\n<h2 id=\"type：用来检测数据类型的对象\"><a href=\"#type：用来检测数据类型的对象\" class=\"headerlink\" title=\"_type：用来检测数据类型的对象\"></a>_type：用来检测数据类型的对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * _type:用来检测数据类型的对象,里边存着检验数据类型的各种方法</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      value:要检测的数据</span><br><span class=\"line\"> *   @return(返回值)</span><br><span class=\"line\"> *      false/true</span><br><span class=\"line\"> *   用法：_type.[is检测的数据类型](value) </span><br><span class=\"line\"> *      例如：_type.isArray(obj) 检测obj是否为数组</span><br><span class=\"line\"> */</span><br><span class=\"line\">let _type = (function () &#123;</span><br><span class=\"line\">\tvar _obj = &#123;</span><br><span class=\"line\">\t\tisNumeric: &quot;Number&quot;,//数字类型</span><br><span class=\"line\">\t\tisBoolean: &apos;Boolean&apos;,//布尔类型</span><br><span class=\"line\">\t\tisString: &apos;String&apos;,//字符串类型</span><br><span class=\"line\">\t\tisNull: &apos;Null&apos;,//null类型</span><br><span class=\"line\">\t\tisUndefined: &apos;Undefined&apos;,//undefined类型</span><br><span class=\"line\">\t\tisSymbol: &apos;Symbol&apos;,//Symbol类型</span><br><span class=\"line\">\t\tisPlainObject: &apos;Object&apos;,//对象类型</span><br><span class=\"line\">\t\tisArray: &apos;Array&apos;,//数组类型</span><br><span class=\"line\">\t\tisRegExp: &apos;RegExp&apos;,//正则类型</span><br><span class=\"line\">\t\tisDate: &apos;Date&apos;,//日期对象类型</span><br><span class=\"line\">\t\tisFunction: &quot;Function&quot;,//函数类型</span><br><span class=\"line\">\t\tisWindow: &apos;Window&apos;//是否为window</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tvar _type = &#123;&#125;,</span><br><span class=\"line\">\t\t_toString = _type.toString;</span><br><span class=\"line\">\tfor (var key in _obj) &#123;</span><br><span class=\"line\">\t\tif (!_obj.hasOwnProperty(key)) break;</span><br><span class=\"line\">\t\t_type[key] = (function () &#123;</span><br><span class=\"line\">\t\t\tvar reg = new RegExp(&quot;^\\\\[object &quot; + _obj[key] + &quot;\\\\]$&quot;);</span><br><span class=\"line\">\t\t\treturn function anonymous(val) &#123;</span><br><span class=\"line\">\t\t\t\treturn reg.test(_toString.call(val));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn _type;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"each：遍历数组、类数组、对象中的每一项\"><a href=\"#each：遍历数组、类数组、对象中的每一项\" class=\"headerlink\" title=\"_each：遍历数组、类数组、对象中的每一项\"></a>_each：遍历数组、类数组、对象中的每一项</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * _each：遍历数组、类数组、对象中的每一项</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      obj:要遍历的值</span><br><span class=\"line\"> *      callback:回调函数 遍历时运行的函数</span><br><span class=\"line\"> *      context:回调函数this的指向 默认为window</span><br><span class=\"line\"> *   @return(返回值)</span><br><span class=\"line\"> *      遍历后的新值</span><br><span class=\"line\"> *   用到了上边的检验数据类型的方法 _type 所以要同上边的方法一起用</span><br><span class=\"line\"> */</span><br><span class=\"line\">function _each(obj, callback, context = window) &#123;</span><br><span class=\"line\">\tlet isLikeArray = _type.isArray(obj) || ((&apos;length&apos; in obj) &amp;&amp; _type.isNumeric(obj.length));</span><br><span class=\"line\">\ttypeof callback !== &quot;function&quot; ? callback = Function.prototype : null;</span><br><span class=\"line\">\t//=&gt;数组或者类数组</span><br><span class=\"line\">\tif (isLikeArray) &#123;</span><br><span class=\"line\">\t\tlet arr = [...obj];</span><br><span class=\"line\">\t\tfor (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\tlet item = arr[i],</span><br><span class=\"line\">\t\t\t\tresult = callback.call(context, item, i);</span><br><span class=\"line\">\t\t\tif (result === false) break;</span><br><span class=\"line\">\t\t\tif (typeof result === &quot;undefined&quot;) continue;</span><br><span class=\"line\">\t\t\tarr[i] = result;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn arr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//=&gt;对象的处理</span><br><span class=\"line\">\tlet opp = &#123;...obj&#125;;//解构赋值</span><br><span class=\"line\">\tfor (let key in opp) &#123;</span><br><span class=\"line\">\t\tif (!opp.hasOwnProperty(key)) break;//检测是否为私有属性</span><br><span class=\"line\">\t\tlet value = opp[key],</span><br><span class=\"line\">\t\t\tresult = callback.call(context, value, key);</span><br><span class=\"line\">\t\tif (result === false) break;</span><br><span class=\"line\">\t\tif (typeof result === &quot;undefined&quot;) continue;</span><br><span class=\"line\">\t\topp[key] = result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn opp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"replace：实现字符串的替换\"><a href=\"#replace：实现字符串的替换\" class=\"headerlink\" title=\"replace：实现字符串的替换\"></a>replace：实现字符串的替换</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * replace：实现字符串的替换</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      reg:正则</span><br><span class=\"line\"> *      callback:回调函数</span><br><span class=\"line\"> *   @return(返回值)</span><br><span class=\"line\"> *      替换后的新字符串</span><br><span class=\"line\"> */</span><br><span class=\"line\">function replace(reg, callback) &#123;</span><br><span class=\"line\">\tlet _this = this.substring(0),</span><br><span class=\"line\">\t\tisGlobal = reg.global,</span><br><span class=\"line\">\t\tarr = reg.exec(this);</span><br><span class=\"line\">\twhile (arr) &#123;</span><br><span class=\"line\">\t//=&gt;捕获到的结果是数组(执行回调函数,把捕获的结果传递给它)；还要接收回调函数执行的返回值，用返回值替换字符串中当前正则匹配的内容；</span><br><span class=\"line\">\t\tif (typeof callback === &quot;function&quot;) &#123;</span><br><span class=\"line\">\t\t\tlet res = callback.apply(null, arr);</span><br><span class=\"line\">\t\t\tlet index = _this.indexOf(arr[0]);</span><br><span class=\"line\">\t\t\t_this = _this.substring(0, index) + res + _this.substring(index + arr[0].length);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tarr = reg.exec(this);</span><br><span class=\"line\">\t//=&gt;不设置GLOBAL的情况执行一次</span><br><span class=\"line\">\tif (!isGlobal) break;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">return _this;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的节流\"><a href=\"#函数的节流\" class=\"headerlink\" title=\"函数的节流\"></a>函数的节流</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * _throttle:函数的节流</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      func:需要节流的函数</span><br><span class=\"line\"> *      wait:规定执行的等待时间</span><br><span class=\"line\"> */</span><br><span class=\"line\">function _throttle(func, wait) &#123;</span><br><span class=\"line\">\tlet timer = null,</span><br><span class=\"line\">\t\tresult = null,</span><br><span class=\"line\">\t\tprevious = 0;</span><br><span class=\"line\">\treturn function anonymous(...args) &#123;</span><br><span class=\"line\">\t\tlet context = this,</span><br><span class=\"line\">\t\t\tnow = new Date,</span><br><span class=\"line\">\t\t\tspanTime = wait - (now - previous);</span><br><span class=\"line\">\t\tif (spanTime &lt;= 0) &#123;</span><br><span class=\"line\">\t\t\tresult = func.call(context, ...args);</span><br><span class=\"line\">\t\t\tclearTimeout(timer);</span><br><span class=\"line\">\t\t\ttimer = null;</span><br><span class=\"line\">\t\t\tprevious = now;</span><br><span class=\"line\">\t\t&#125; else if (!timer) &#123;</span><br><span class=\"line\">\t\t\ttimer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">\t\t\t\tresult = func.call(context, ...args);</span><br><span class=\"line\">\t\t\t\ttimer = null;</span><br><span class=\"line\">\t\t\t\tprevious = new Date;</span><br><span class=\"line\">\t\t\t&#125;, spanTime);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的防抖\"><a href=\"#函数的防抖\" class=\"headerlink\" title=\"函数的防抖\"></a>函数的防抖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * debounce:函数的防抖</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      func:需要节流的函数</span><br><span class=\"line\"> *      wait:规定执行的等待时间</span><br><span class=\"line\"> *      immediate（false/true）： 边界触发 默认为false，传true表示防抖触发开始就运行一次需要防抖的函数</span><br><span class=\"line\"> */</span><br><span class=\"line\">function debounce(func, wait, immediate) &#123;</span><br><span class=\"line\">\tlet timer = null,</span><br><span class=\"line\">\t\tresult = null;</span><br><span class=\"line\">\treturn function anonymous(...args) &#123;</span><br><span class=\"line\">\t\tlet context = this,</span><br><span class=\"line\">\t\t\tnow = immediate &amp;&amp; !timer;</span><br><span class=\"line\">\t\tclearTimeout(timer);</span><br><span class=\"line\">\t\ttimer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">\t\t\ttimer = null;</span><br><span class=\"line\">\t\t\t!immediate ? result = func.call(context, ...args) : null;</span><br><span class=\"line\">\t\t&#125;, wait);</span><br><span class=\"line\">\t\tnow ? result = func.call(context, ...args) : null;</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时间字符串格式化\"><a href=\"#时间字符串格式化\" class=\"headerlink\" title=\"时间字符串格式化\"></a>时间字符串格式化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">* formatTime：时间字符串的格式化处理</span><br><span class=\"line\">*   @params</span><br><span class=\"line\">*     templete:[string] 我们最后期望获取日期格式的模板</span><br><span class=\"line\">*     模板规则:&#123;0&#125;-&gt;年  &#123;1~5&#125;-&gt;月日时分秒</span><br><span class=\"line\">*   @return</span><br><span class=\"line\">*     [string]格式化后的时间字符串</span><br><span class=\"line\">*/</span><br><span class=\"line\">function formatTime(templete = &quot;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日 &#123;3&#125;时&#123;4&#125;分&#123;5&#125;秒&quot;) &#123;</span><br><span class=\"line\">\tlet timeAry = this.match(/\\d+/g);</span><br><span class=\"line\">\treturn templete.replace(/\\&#123;(\\d+)\\&#125;/g, (...[, $1]) =&gt; &#123;</span><br><span class=\"line\">\t\tlet time = timeAry[$1] || &quot;00&quot;;</span><br><span class=\"line\">\t\treturn time.length &lt; 2 ? &quot;0&quot; + time : time;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t/* 扩展到内置类String.prototype上 */</span><br><span class=\"line\">[&quot;formatTime&quot;].forEach(item =&gt; &#123;</span><br><span class=\"line\">\tString.prototype[item] = eval(item);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">//用法</span><br><span class=\"line\">let time = &quot;2019-8-13 16:51:3&quot;;</span><br><span class=\"line\">console.log(time.formatTime());</span><br><span class=\"line\">console.log(time.formatTime(&quot;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日&quot;));</span><br><span class=\"line\">console.log(time.formatTime(&quot;&#123;1&#125;-&#123;2&#125; &#123;3&#125;:&#123;4&#125;&quot;));</span><br><span class=\"line\">time = &quot;2019/8/13&quot;;</span><br><span class=\"line\">console.log(time.formatTime());</span><br><span class=\"line\">console.log(time.formatTime(&quot;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日&quot;));</span><br><span class=\"line\">console.log(time.formatTime(&quot;&#123;1&#125;-&#123;2&#125; &#123;3&#125;:&#123;4&#125;&quot;));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取URL字符串信息\"><a href=\"#获取URL字符串信息\" class=\"headerlink\" title=\"获取URL字符串信息\"></a>获取URL字符串信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* </span><br><span class=\"line\">* queryURLParams：获取URL地址问号和面的参数信息（可能也包含HASH值）</span><br><span class=\"line\">*   @params</span><br><span class=\"line\">*   @return</span><br><span class=\"line\">*     [object]把所有问号参数信息以键值对的方式存储起来并且返回</span><br><span class=\"line\">*/</span><br><span class=\"line\">function queryURLParams() &#123;</span><br><span class=\"line\">\tlet obj = &#123;&#125;;</span><br><span class=\"line\">\tthis.replace(/([^?=&amp;#]+)=([^?=&amp;#]+)/g, (...[, $1, $2]) =&gt; obj[$1] = $2);</span><br><span class=\"line\">\tthis.replace(/#([^?=&amp;#]+)/g, (...[, $1]) =&gt; obj[&apos;HASH&apos;] = $1);</span><br><span class=\"line\">\treturn obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* 扩展到内置类String.prototype上 */</span><br><span class=\"line\">[&quot;formatTime&quot;, &quot;queryURLParams&quot;].forEach(item =&gt; &#123;</span><br><span class=\"line\">\tString.prototype[item] = eval(item);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//用法：</span><br><span class=\"line\">let url = &quot;http://www.baidu.cn/?lx=1&amp;from=wx#video&quot;;</span><br><span class=\"line\">console.log(url.queryURLParams());</span><br><span class=\"line\">//=&gt;&#123;lx:1,from:&apos;wx&apos;,HASH:&apos;video&apos;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取当前元素距离BODY的左、上偏移量（无视父元素）\"><a href=\"#获取当前元素距离BODY的左、上偏移量（无视父元素）\" class=\"headerlink\" title=\"获取当前元素距离BODY的左、上偏移量（无视父元素）\"></a>获取当前元素距离BODY的左、上偏移量（无视父元素）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * offset：获取当前元素距离BODY的左/上偏移（不论其父参照物是谁）</span><br><span class=\"line\"> *   @params</span><br><span class=\"line\"> *      curEle:current element当前要操作的元素</span><br><span class=\"line\"> *   @return</span><br><span class=\"line\"> *      [object]包含上/左偏移的信息  =&gt; &#123;top:xxx,left:xxx&#125; </span><br><span class=\"line\">*/</span><br><span class=\"line\">function offset(curEle) &#123;</span><br><span class=\"line\">    let par = curEle.offsetParent,</span><br><span class=\"line\">        l = curEle.offsetLeft,</span><br><span class=\"line\">        t = curEle.offsetTop;</span><br><span class=\"line\">    //存在父参照物，而且还没有找到BODY</span><br><span class=\"line\">    while (par &amp;&amp; par.tagName !== &quot;BODY&quot;) &#123;</span><br><span class=\"line\">        //在原有偏移的基础上累加：父参照物的边框、父参照物的偏移</span><br><span class=\"line\">        if (!/MSIE 8\\.0/.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">            //IE8中偏移值自已就算了边框了，不需要我们在加边框的值 navigator.userAgent获取当前浏览器的版本信息</span><br><span class=\"line\">            l += par.clientLeft;</span><br><span class=\"line\">            t += par.clientTop;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        l += par.offsetLeft;</span><br><span class=\"line\">        t += par.offsetTop;</span><br><span class=\"line\">        //继续获取上级参照物</span><br><span class=\"line\">        par = par.offsetParent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        top: t,</span><br><span class=\"line\">        left: l</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bind方法\"><a href=\"#bind方法\" class=\"headerlink\" title=\"bind方法\"></a>bind方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * bind:改变函数中this的指向</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      context:需要节流的函数</span><br><span class=\"line\"> */</span><br><span class=\"line\">//=&gt;bind方法在IE6~8中不兼容，接下来我们自己基于原生JS实现这个方法</span><br><span class=\"line\">function bind(context)&#123;</span><br><span class=\"line\">   context=context||window;</span><br><span class=\"line\">   var _this = this,</span><br><span class=\"line\">       outerArg=[].slice.call(arguments,1);</span><br><span class=\"line\">   return function anonymous() &#123;</span><br><span class=\"line\">       var innerArg=[].slice.call(arguments,0);</span><br><span class=\"line\">\t   _this.apply(context, outerArg.concat(innerArg));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"call方法\"><a href=\"#call方法\" class=\"headerlink\" title=\"call方法\"></a>call方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * call:改变函数中this的指向</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      context:需要节流的函数</span><br><span class=\"line\"> *      其余参数一个一个传</span><br><span class=\"line\"> */</span><br><span class=\"line\">function call(context)&#123;</span><br><span class=\"line\">\tcontext=context||window;</span><br><span class=\"line\">\tlet arg=[],</span><br><span class=\"line\">\t_this=this,</span><br><span class=\"line\">\tresult=null;</span><br><span class=\"line\">\tfor(let i=1;i&lt;arguments.length;i++)&#123;</span><br><span class=\"line\">\t\targ.push(arguments[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcontext.$fn=_this;</span><br><span class=\"line\">\tresult=context.$fn(...arg);</span><br><span class=\"line\">\tdelete context.$fn;</span><br><span class=\"line\">\treturn result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"apply方法\"><a href=\"#apply方法\" class=\"headerlink\" title=\"apply方法\"></a>apply方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * apply:改变函数中this的指向</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      context:需要节流的函数</span><br><span class=\"line\"> *      第二个参数为数组</span><br><span class=\"line\"> */</span><br><span class=\"line\">function apply(context=window,arg=[])&#123;</span><br><span class=\"line\">\tlet _this=this,</span><br><span class=\"line\">\tresult=null,</span><br><span class=\"line\">\tcontext.fn=_this;</span><br><span class=\"line\">\tresult=context.fn(...arg);</span><br><span class=\"line\">\tdelete context.fn;</span><br><span class=\"line\">\treturn result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","text":"title：工具类的方法_type：用来检测数据类型的对象1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"正则简单介绍","slug":"正则","date":"2019-09-11T04:07:58.413Z","updated":"2019-09-11T04:08:51.973Z","comments":true,"path":"api/articles/正则.json","excerpt":"","keywords":null,"cover":null,"content":"<h4 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h4><blockquote>\n<p>regular expression：RegExp<br>用来处理字符串的规则</p>\n<ul>\n<li>只能处理字符串</li>\n<li>它是一个规则：可以验证字符串是否符合某个规则（test），也可以把字符串中符合规则的内容捕获到（exec / match…）</li>\n</ul>\n</blockquote>\n<h5 id=\"创建方式有两种\"><a href=\"#创建方式有两种\" class=\"headerlink\" title=\"创建方式有两种\"></a>创建方式有两种</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//=&gt;字面量创建方式（两个斜杠之间包起来的，都是用来描述规则的元字符）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg1 = <span class=\"regexp\">/\\d+/</span>;</span><br><span class=\"line\"><span class=\"comment\">//=&gt;构造函数模式创建  两个参数：元字符字符串，修饰符字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg2 = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"\\\\d+\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"正则表达式由两部分组成\"><a href=\"#正则表达式由两部分组成\" class=\"headerlink\" title=\"正则表达式由两部分组成\"></a>正则表达式由两部分组成</h5><ul>\n<li>元字符</li>\n<li>修饰符<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*常用的元字符*/</span></span><br><span class=\"line\"><span class=\"comment\">//=&gt;1.量词元字符：设置出现的次数</span></span><br><span class=\"line\">* 零到多次  </span><br><span class=\"line\">+ 一到多次</span><br><span class=\"line\">? 零次或者一次</span><br><span class=\"line\">&#123;n&#125; 出现n次</span><br><span class=\"line\">&#123;n,&#125; 出现n到多次</span><br><span class=\"line\">&#123;n,m&#125; 出现n到m次</span><br><span class=\"line\"><span class=\"comment\">//=&gt;2.特殊元字符：单个或者组合在一起代表特殊的含义</span></span><br><span class=\"line\">\\    转义字符（普通-&gt;特殊-&gt;普通）</span><br><span class=\"line\">.    除\\n（换行符）以外的任意字符</span><br><span class=\"line\">^    以哪一个元字符作为开始</span><br><span class=\"line\">$    以哪一个元字符作为结束</span><br><span class=\"line\">\\n   换行符</span><br><span class=\"line\">\\d   <span class=\"number\">0</span>~<span class=\"number\">9</span>之间的一个数字</span><br><span class=\"line\">\\D   非<span class=\"number\">0</span>~<span class=\"number\">9</span>之间的一个数字 （大写和小写的意思是相反的）</span><br><span class=\"line\">\\w   数字、字母、下划线中的任意一个字符</span><br><span class=\"line\">\\s   一个空白字符（包含空格、制表符、换页符等）</span><br><span class=\"line\">\\t   一个制表符（一个TAB键：四个空格）</span><br><span class=\"line\">\\b   匹配一个单词的边界</span><br><span class=\"line\">x|y  x或者y中的一个字符</span><br><span class=\"line\">[xyz] x或者y或者z中的一个字符</span><br><span class=\"line\">[^xy] 除了x/y以外的任意字符</span><br><span class=\"line\">[a-z] 指定a-z这个范围中的任意字符  [<span class=\"number\">0</span><span class=\"number\">-9</span>a-zA-Z_]===\\w</span><br><span class=\"line\">[^a-z] 上一个的取反“非”</span><br><span class=\"line\">()   正则中的分组符号</span><br><span class=\"line\">(?:) 只匹配不捕获</span><br><span class=\"line\">(?=) 正向预查</span><br><span class=\"line\">(?!) 负向预查 </span><br><span class=\"line\"><span class=\"comment\">//=&gt;3.普通元字符：代表本身含义的</span></span><br><span class=\"line\">/putong/ 此正则匹配的就是 <span class=\"string\">\"putong\"</span></span><br><span class=\"line\"><span class=\"comment\">/*正则表达式常用的修饰符：img*/</span></span><br><span class=\"line\">i =&gt;ignoreCase  忽略单词大小写匹配</span><br><span class=\"line\">m =&gt;multiline   可以进行多行匹配</span><br><span class=\"line\">g =&gt;global      全局匹配</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>常用的正则表达式</strong></p>\n<ol>\n<li><p>验证是否为有效数字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 规则分析</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.可能出现 + - 号，也可能不出现  [+-]?</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.一位0-9都可以，多位首位不能是0 (\\d|([1-9]\\d+))</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.小数部分可能有可能没有，一旦有后面必须有小数点+数字 (\\.\\d+)?</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^[+-]?(\\d|([1-9]\\d+))(\\.\\d+)?$/</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证密码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//=&gt;数字、字母、下划线</span></span><br><span class=\"line\"><span class=\"comment\">//=&gt;6~16位</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> val = userPassInp.value,</span><br><span class=\"line\">    reg = <span class=\"regexp\">/^\\w&#123;6,16&#125;$/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> flag=reg.test(val);</span><br><span class=\"line\">&lt;!-- 不用正则 --&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPass</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(val.length&lt;<span class=\"number\">6</span> || val.length&gt;<span class=\"number\">16</span>)&#123;</span><br><span class=\"line\">    \talert(<span class=\"string\">'长度必须介于6-16位之间！'</span>);</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> area=[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>....<span class=\"string\">'_'</span>]; <span class=\"comment\">//=&gt;包含数字、字母、下划线</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;val.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> char=val[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!area.includes(char))&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'格式不正确！'</span>);</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证真实姓名的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.汉字  /^[\\u4E00-\\u9FA5]$/</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.名字长度 2~10位</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.可能有译名 ·汉字  (·[\\u4E00-\\u9FA5]&#123;2,10&#125;)&#123;0,2&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^[\\u4E00-\\u9FA5]&#123;2,10&#125;(·[\\u4E00-\\u9FA5]&#123;2,10&#125;)&#123;0,2&#125;$/</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证邮箱的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^\\w+((-\\w+)|(\\.\\w+))*@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>身份证号码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^(\\d&#123;6&#125;)(\\d&#123;4&#125;)(\\d&#123;2&#125;)(\\d&#123;2&#125;)\\d&#123;2&#125;(\\d)(\\d|X)$/</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把时间字符串进行处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> time = <span class=\"string\">\"2019-08-13\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//=&gt;变为\"2019年08月13日\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^(\\d&#123;4&#125;)-(\\d&#123;1,2&#125;)-(\\d&#123;1,2&#125;)$/</span>;</span><br><span class=\"line\">time = time.replace(reg,(...arg)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [,$<span class=\"number\">1</span>,$<span class=\"number\">2</span>,$<span class=\"number\">3</span>]=arg;</span><br><span class=\"line\">    $<span class=\"number\">2.</span>length&lt;<span class=\"number\">2</span>?$<span class=\"number\">2</span>=<span class=\"string\">\"0\"</span>+$<span class=\"number\">2</span>:<span class=\"literal\">null</span>;</span><br><span class=\"line\">    $<span class=\"number\">3.</span>length&lt;<span class=\"number\">2</span>?$<span class=\"number\">3</span>=<span class=\"string\">\"0\"</span>+$<span class=\"number\">3</span>:<span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $<span class=\"number\">1</span>+<span class=\"string\">\"年\"</span>+$<span class=\"number\">2</span>+<span class=\"string\">\"月\"</span>+$<span class=\"number\">3</span>+<span class=\"string\">\"日\"</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单词首字母大写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"good good study，day day up！\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\b([a-zA-Z])[a-zA-Z]*\\b/g</span>;</span><br><span class=\"line\">str = str.replace(reg,(...arg)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [content,$<span class=\"number\">1</span>]=arg;</span><br><span class=\"line\">    $<span class=\"number\">1</span>=$<span class=\"number\">1.</span>toUpperCase();</span><br><span class=\"line\">    content=content.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $<span class=\"number\">1</span>+content;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str); <span class=\"comment\">//=&gt;\"Good Good Study，Day Day Up！\"</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","text":"正则表达式regular expression：RegExp<br>用来处理字符串的规则只能处理字符串它是一个规则：可以验证字符串是否符合某个规则（test），也可以把字符串中符合规则的内容捕获到（exec / match…）创建方式有两种1<br>2<br>3<br>4<br>","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Math、数字、数组、字符串的方法","slug":"Math、数字、数组、字符串的方法","date":"2019-09-10T16:00:00.000Z","updated":"2019-09-11T12:52:26.035Z","comments":true,"path":"api/articles/Math、数字、数组、字符串的方法.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Math方法\"><a href=\"#Math方法\" class=\"headerlink\" title=\"Math方法\"></a>Math方法</h1><ol>\n<li><p><code>Math.abs([number value])</code>：获取绝对值（绝对值永远是正数或者零）如果传递的不是数字类型，会先基于<code>Number()</code>换为数字再处理。</p>\n</li>\n<li><p><code>Math.ceil/floor([number value])</code>：把一个数向上取整/向下取整</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Math.ceil(12.5));//=&gt;13</span><br><span class=\"line\">console.log(Math.ceil(-12.5));//=&gt;-12</span><br><span class=\"line\">console.log(Math.floor(12.5));//=&gt;12</span><br><span class=\"line\">console.log(Math.floor(-12.5));//=&gt;-13</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Math.round([number value])</code>：四舍五入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Math.round(12.5))//=&gt;13 正数中，.5属于入</span><br><span class=\"line\">console.log(Math.round(-12.5))//=&gt;-12 负数中，.5属于舍</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Math.max/min([val1],[val2],[val3]...)</code>：获取一堆数中的最大值和最小值</p>\n</li>\n<li><p><code>Math.sqrt/pow([number value])</code>：<code>sprt</code>:给一个数开平方<code>pow</code>:计算一个数的多少次幂</p>\n</li>\n<li><p><code>Math.random()</code>：获取0~1之间的随机小数</p>\n</li>\n<li><p>获取[n~m]之间的随机正数，包含n,m,同时n&lt;m<code>Math.round(Math.random()*(m-n)+n)</code></p>\n<h1 id=\"数字方法\"><a href=\"#数字方法\" class=\"headerlink\" title=\"数字方法\"></a>数字方法</h1></li>\n</ol>\n<ul>\n<li><code>NaN</code>：not a number：不是一个数，但它属于数字类型<strong><code>NaN和任何值（包括自己）都不相等</code></strong></li>\n<li><code>isNan([val])</code>检测一个值是否为非有效数字，如果不是有效数字返回turn，反之是有效数字返回false<strong>使用isNaN进行检测的时候，首先会验证检测的值是否为数字类型，如果不是，先基于Number( )这个方法，把值转换成数字类型，然后再检测。</strong></li>\n<li><code>Number([val])</code>转换成数字类型<strong>对象先转换称字符串，只要字符串包含任意一个非有效数字字符（第一个点除外）结果都是NaN，空字符串回变成数字零</strong></li>\n<li><code>parseInt(整数)/parseFloat(小数)([val],[进制])</code>对象先转换称字符串对于字符串来说，它是<strong>从左到右依次查找有效数字字符</strong>，直到遇到非有效数字字符，停止查找（不管后边是否还有数字，都不在找了），把找到的当做数字返回<h1 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h1><h2 id=\"Array函数对象属性方法\"><a href=\"#Array函数对象属性方法\" class=\"headerlink\" title=\"Array函数对象属性方法\"></a>Array函数对象属性方法</h2></li>\n</ul>\n<ol>\n<li><p><code>Arrat.from([val])</code>:从一个类似数组或可迭代对象中创建一个新的数组实例<strong><code>参数：</code></strong>需要转换成数组的伪数组对象或可迭代对象<strong><code>返回值：</code></strong>一个新的数组实例</p>\n<h2 id=\"Arrar-prototype（原型）上的方法\"><a href=\"#Arrar-prototype（原型）上的方法\" class=\"headerlink\" title=\"Arrar.prototype（原型）上的方法\"></a>Arrar.prototype（原型）上的方法</h2><h3 id=\"改变原数组\"><a href=\"#改变原数组\" class=\"headerlink\" title=\"改变原数组\"></a>改变原数组</h3></li>\n<li><p><code>ary.push([val])</code>：向数组末尾追加内容 <strong><code>返回值：</code></strong>新增后数组的长度</p>\n</li>\n<li><p><code>ary.unshift([val])</code>：向数组开始位置增加内容 <strong><code>返回值：</code></strong>删除后数组的</p>\n</li>\n<li><p><code>ary.shift()</code>：删除数组的第一项 <strong><code>返回值：</code></strong>删除的那一项</p>\n</li>\n<li><p><code>ary.pop()</code>：删除数组的最后一项 <strong><code>返回值：</code></strong>删除的那一项</p>\n</li>\n<li><p><code>ary.splice(n,m,[val])</code>：实现数组的增加、删除和修改 <strong><code>参数：</code></strong>n,m(都是数字)  从索引n开始删除m个元素(m不写，删除到末尾)，用[val]占用删除的部分<strong><code>返回值：</code></strong>删除的部分用新数组存储起来返回</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**修改**：n,m,x 从索引n开始删除m个元素，用x占用删除的部分</span><br><span class=\"line\">**增加**：n,0,x 从索引n开始，一个都不删，把x放到索引n的前面</span><br><span class=\"line\">let ary = [12,13,19,15];</span><br><span class=\"line\">let b = ary.splice(1,2,&apos;xxx&apos;,&apos;aaa&apos;,&apos;ddd&apos;)//=&gt;删除 13 19 用&apos;xxx&apos;,&apos;aaa&apos;,&apos;ddd&apos;代替他们的位置</span><br><span class=\"line\">console.log(b) //=&gt;[13,19]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ary.reverse()</code>：把数组倒过来排列 <strong><code>返回值：</code></strong>排列后的新数组</p>\n</li>\n<li><p><code>ary.sort()</code>：实现数组的排序 <strong><code>参数：</code></strong>可以不传（不传只能判断一位数字），可以是一个函数<strong><code>返回值：</code></strong>排序后的新数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary.sort((a,b) =&gt; a-b);//a-b 从小到大   b-a 从大到小</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ary.fill(value,start,end)</code>：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引 <strong><code>参数：</code></strong><code>value:</code>用来填充数组元素的值,<code>start:</code>起始索引(默认值为0),<code>end:</code>终止索引(默认值为 this.length)<strong><code>返回值：</code></strong>修改后的数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3].fill(4, 1); //=&gt; [1, 4, 4]</span><br><span class=\"line\">[1, 2, 3].fill(4, 1, 2); //=&gt; [1, 4, 3]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>末尾添加新项方法</strong><br><code>ary.push()</code>、<code>ary[ary.length] = n</code>、<code>ary.splice(ary.length,0,n)</code></p>\n</li>\n</ol>\n<p><strong>开头新项方法</strong><br><code>ary.unshift()</code>、<code>ary.splice(0,0,n)</code><br><strong>末尾删除最后一项方法</strong><br><code>ary.pop()</code>、<code>ary.length--</code>、<code>ary.splice(ary.length-1)</code><br><strong>开头删除第一项方法</strong><br><code>ary.shift()</code>、<code>ary.splice(0,1)</code></p>\n<h3 id=\"原数组不变\"><a href=\"#原数组不变\" class=\"headerlink\" title=\"原数组不变\"></a>原数组不变</h3><ol start=\"10\">\n<li><code>ary.slice(n,m)</code>：实现数组的查询,从索引n开始找到索引为m的地方(不包含m这一项，m不写找到末尾) <strong><code>返回值：</code></strong>找到的内容以一个新数组的形式返回</li>\n<li><code>ary.concat()</code>：多个任意类型值 <strong><code>返回值：</code></strong>拼接后的新数组）</li>\n<li><code>ary.toString()</code>：把数组转换为字符串 <strong><code>返回值：</code></strong>转化后的字符串，每一项用逗号分隔</li>\n<li><code>ary.join()</code>：把数组转换为字符串 <strong><code>参数：</code></strong>指定的分隔符（字符串格式）<strong><code>返回值：</code></strong>按指定分隔符（默认为逗号）转化后的字符串</li>\n<li><code>ary.indexOf / lastIndexOf()</code>：检测当前项在数组中第一次或者最后一次出现位置的索引（IE6~8中不兼容） <strong><code>返回值：</code></strong>这一项出现的位置索引值（数字），如果数组中没有这一项，返回的结果是-1</li>\n<li><code>ary.includes()</code>：判断一个值是否存在于数组中 <strong><code>返回值：</code></strong>存在true，不存在false</li>\n<li><code>ary.forEach()</code>：遍历数组中的每一项内容 <strong><code>参数：</code></strong>回调函数</li>\n<li><code>ary.map()</code>：创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。 <strong><code>参数：</code></strong>回调函数<strong><code>返回值：</code></strong>一个新数组，每个元素都是回调函数的结果</li>\n<li><code>ary.find()</code>：数组中的每一项元素执行一次 回调函数，直至有一项使函数返回 true。当找到了这样一个元素后，该方法会立即返回这个元素的值，否则返回 undefined。 <strong><code>参数：</code></strong>回调函数(里边包含判断)<strong><code>返回值：</code></strong>数组中第一个满足所提供测试函数的元素的值，否则返回 undefined。</li>\n<li><code>ary.some()</code>：数组中的每一项元素执行一次 回调函数，直至有一项使函数返回 true。当找到了这样一个元素后，该方法会立即返回true，否则返回 false <strong><code>参数：</code></strong>回调函数(里边包含判断)<strong><code>返回值：</code></strong>数组中有满足所提供测试函数的元素则返回true，否则返回false。</li>\n<li><code>ary.flat()</code>：按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。 <strong><code>参数：</code></strong>指定要提取嵌套数组的结构深度(默认值为 1)<strong><code>返回值：</code></strong>一个包含将数组与子数组中所有元素的新数组 <h1 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h1></li>\n<li><ul>\n<li><code>str.length</code>：字符串的长度</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><code>str[0]</code>：获取索引为0(第一个)字符</li>\n<li><code>str[str.length-1]</code>：获取最后一个字符（<code>str.length-1</code>最后一项索引）</li>\n<li><code>str[1000]</code>：undefined 不存在这个索引</li>\n</ul>\n<ol start=\"2\">\n<li><code>str.charAt([val])</code>：根据索引获取指定位置的字符<strong><code>返回值：</code></strong>返回查找的字符（找不到返回的是空字符串不是undefined）</li>\n<li><code>str.charCodeAt([val])</code>：获取指定字符的ASCII码值<strong><code>返回值：</code></strong>返回查找的字符对应的编码值（ 找不到返回的是空字符串不是undefined）</li>\n<li><code>str.substr(n,m)</code>：从索引n开始截取m个字符，m不写截取到末尾（后面的方法也是）<strong><code>返回值：</code></strong>返回一个字符串中从指定位置开始到指定字符数的字符</li>\n<li><code>str.substring(n,m)</code>：从索引n开始截取到m处（不含m），m不写截取到末尾<strong><code>返回值：</code></strong>包含给定字符串的指定部分的新字符串</li>\n<li><code>str.slice(n,m)</code>：从索引n开始截取到m处（不含m），但是slice可以支持负数作为索引，其余两个方法不可以的，<strong>负数索引是按<code>str.length+负索引</code>的值查找</strong> <strong><code>返回值：</code></strong>包含给定字符串的指定部分的新字符串</li>\n<li><code>str.indexOf(x,y)</code>：获取x第一次出现位置的索引，y是控制查找的起始位置索引<strong><code>返回值：</code></strong>这一项出现的位置索引值（数字），如果字符串中没有这一项，返回的结果是-1</li>\n<li><code>str.lastIndexof(x)</code>：获取x最后一次出现位置的索引<strong><code>返回值：</code></strong>这一项出现的位置索引值（数字），如果字符串中没有这一项，返回的结果是-1</li>\n<li><code>str.includes(x)</code>：验证x是否存在字符串中<strong><code>返回值：</code></strong>存在返回true，不存在返回false</li>\n<li><code>str.toUpperCase()</code>：转大写<strong><code>返回值：</code></strong>转换后的新字符串</li>\n<li><code>str.toLowerCase()</code>：转小写<strong><code>返回值：</code></strong>转换后的新字符串</li>\n<li><strong><code>str.split([分隔符])</code></strong>：指定一个分隔符，把字符串按照指定的分隔符拆分成数组（与数组中的<code>join</code>相对应），支持传递正则表达式<strong><code>返回值：</code></strong>转换后的数组</li>\n<li><code>str.replace([reg|val],[回调函数|val])</code>：实现字符串的替换（经常伴随着正则而用）<strong><code>参数：</code></strong>第一个为正则或者原字符串中存在的老字符串，第二个参数为一个回调函数或者要替换成的新字符串<strong><code>返回值：</code></strong>需要替代的部分或者匹配到的被新字符串或者回调函数return的值所取代后的新的字符串（原字符串不会改变）</li>\n</ol>\n","text":"Math方法Math.abs([number value])：获取绝对值（绝对值永远是正数或者零）如果传递的不是数字类型，会先基于Number()换为数字再处理。Math.ceil/floor([number value])：把一个数向上取整/向下取整1<br>2<br>3<br","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}