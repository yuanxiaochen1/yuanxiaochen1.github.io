{"total":4,"pageSize":10,"pageCount":1,"data":[{"title":"Node基础","slug":"node基础","date":"2019-09-22T13:48:49.000Z","updated":"2019-09-22T02:12:09.000Z","comments":true,"path":"api/articles/node基础.json","excerpt":"","keywords":null,"cover":"./node%E5%9F%BA%E7%A1%80/1.png","content":"<h2 id=\"JavaScript——node\"><a href=\"#JavaScript——node\" class=\"headerlink\" title=\"JavaScript——node\"></a>JavaScript——node</h2><h3 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h3><blockquote>\n<p>一个解析JS的工具，之所以称为后台语言的主要原因，我们通常把node安装在服务器端，在服务器端通过node执行一些代码，实现服务器的某些功能</p>\n</blockquote>\n<h3 id=\"npm-node-package-manager-安装NODE后自带的模块管理工具，基于此完成安装和卸载模块，bower-yarn\"><a href=\"#npm-node-package-manager-安装NODE后自带的模块管理工具，基于此完成安装和卸载模块，bower-yarn\" class=\"headerlink\" title=\"npm(node package manager) 安装NODE后自带的模块管理工具，基于此完成安装和卸载模块，bower yarn\"></a>npm(node package manager) 安装NODE后自带的模块管理工具，基于此完成安装和卸载模块，bower yarn</h3><p>项目架构：基于node.js构建中间层<br>特点：单线程异步/无阻塞I/O/事件驱动<br>node.js作为服务层，抗压和抗并发能力强<br><img src=\"./node%E5%9F%BA%E7%A1%80/1.png\" alt=\"Alt text\"><br><img src=\"./node%E5%9F%BA%E7%A1%80/2.png\" alt=\"Alt text\"></p>\n<h3 id=\"I-O\"><a href=\"#I-O\" class=\"headerlink\" title=\"I/O\"></a>I/O</h3><p>I： input<br>O：output<br>I/O指对文件的读写操作</p>\n<blockquote>\n<p>JS在客户端运行，不能对客户端本地的文件进行读写操作，为了保证客户端的信息安全。<br>input：type=’file’  文件上传除外，这种需求需要客户手动自己选择。</p>\n</blockquote>\n<h3 id=\"JS在服务器端运行（基于node），可以对服务器端的文件进行操作。\"><a href=\"#JS在服务器端运行（基于node），可以对服务器端的文件进行操作。\" class=\"headerlink\" title=\"JS在服务器端运行（基于node），可以对服务器端的文件进行操作。\"></a>JS在服务器端运行（基于node），可以对服务器端的文件进行操作。</h3><blockquote>\n<p>node赋予了JS进行I/O操作的能力（内置模块fs）</p>\n</blockquote>\n<h3 id=\"window-amp-global\"><a href=\"#window-amp-global\" class=\"headerlink\" title=\"window &amp;global\"></a>window &amp;global</h3><blockquote>\n<p>在客户端浏览器中运行JS，JS全局对象：window（提供很多内置的属性和方法）在node中运行JS，全局对象是global，this可能是global(REPL中执行代码)，或当前模块(node xxx.js执行)</p>\n</blockquote>\n<ul>\n<li>process  <pre><code>+  nextTick 下个任务\n+  env  node环境变量</code></pre><ul>\n<li>buffer 文件流</li>\n<li>setImmediate 立即执行定时器 类似于（setTimeout(func,0)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"NPM基础命令\"><a href=\"#NPM基础命令\" class=\"headerlink\" title=\"NPM基础命令\"></a>NPM基础命令</h3><ol>\n<li>模块管理（安装和卸载）<blockquote>\n<p>安装在全局环境下和安装在当前项目中</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li><p>全装在全局：<code>$ npm install xxx --global</code> （$ npm i -g xxx）</p>\n</li>\n<li><p>安装在本地项目中：$ npm i xxx</p>\n<ul>\n<li>把模块设置为开发依赖（开发中）：$ npm i xxx –save-dev</li>\n<li>把模块设置为生产依赖（部署到服务器）：$ npm i xxx –save</li>\n</ul>\n</li>\n<li><p>安装在全局和本地的区别</p>\n<ul>\n<li>安装在全局后对任何项目都有作用（也有可能导致版本冲突），但是只能基于命令的方式管理，不能基于CommonJS中的require导入使用（通俗说：就是不能导入到文件中基于代码来处理）<ul>\n<li>$ npm root -g 查看全局安装到的目录</li>\n<li>之所以可以使用命令操作，是因为在全局目录下生成了一个xxx.cmd的文件</li>\n</ul>\n</li>\n<li>安装在本地默认不能基于命令管理，但是可以导入到文件中基于代码操作，只对当前项目有用</li>\n</ul>\n</li>\n<li><p>在本地安装模块之前，最好先：$ npm init -y，生成package.json模块配置文件</p>\n<ul>\n<li><p>把安装的模块生成配置清单，存放在package.json中，后期别人需要部署项目的时候，只需要执行 $ npm i 就可以把所有的依赖项重新安装一遍 “跑环境”</p>\n<ul>\n<li>$ npm i 是把开发和生产依赖都安装一遍</li>\n<li>$ npm i –production 只安装生产依赖的模块</li>\n</ul>\n</li>\n<li><p>在package.json中，可以基于scripts选项配置本地可执行的脚本命令 $npm run xxx</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">\t//=&gt;AAA是命令，值是要做的事情</span><br><span class=\"line\">\t&quot;AAA&quot;: &quot;node xxx.js&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在配置可执行脚本命令的时候，基于process的环境变量区分开发还是生产环境</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">\t//=&gt;set NODE_EVN=dev 设置全局环境变量（MAC下用 export NODE_EVN=dev）</span><br><span class=\"line\">  \t\t&quot;serve&quot;: &quot;set NODE_EVN=dev&amp;&amp;node test1.js&quot;,</span><br><span class=\"line\"> \t\t\t&quot;build&quot;: &quot;set NODE_EVN=pro&amp;&amp;node test1.js&quot;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CommonJS模块管理机制\"><a href=\"#CommonJS模块管理机制\" class=\"headerlink\" title=\"CommonJS模块管理机制\"></a>CommonJS模块管理机制</h3><blockquote>\n<p>模块化思想规定了我们模块如何创建以及导入导出；</p>\n</blockquote>\n<ul>\n<li>AMD  require.js</li>\n<li>CMD sea.js</li>\n<li>CommonJS   node.js  </li>\n<li>ES6 Module  </li>\n</ul>\n<p><strong>内置模块</strong><br><strong>1. http/https : 创建和管理服务的模块</strong><br>        &gt; 创建服务：IIS/NGINX/APPACHE/NODE(http/https[内置模块])</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * 服务器端要做的常规任务</span><br><span class=\"line\"> *   1.创建服务：IIS/NGINX/APPACHE/NODE[HTTP/HTTPS内置模块] =&gt;端口号</span><br><span class=\"line\"> *   2.接收客户端的请求信息（请求静态资源文件的、也有请求数据的）</span><br><span class=\"line\"> *   3.查找到对应的资源文件内容或者对应的数据信息</span><br><span class=\"line\"> *   4.把找到的内容返回给客户端 </span><br><span class=\"line\"> */</span><br><span class=\"line\">let http = require(&apos;http&apos;),</span><br><span class=\"line\">\turl = require(&apos;url&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;HTTP.CREATE-SERVER创建服务</span><br><span class=\"line\">let server = http.createServer((req, res) =&gt; &#123;</span><br><span class=\"line\">\t//=&gt;当客户端向当前服务发送请求的时候，会触发此回调函数（请求N次，回调函数被执行N次），而且每一次都能获取本次请求的相关信息</span><br><span class=\"line\">\t//req:request REQ对象中存储了客户端的请求信息</span><br><span class=\"line\">\t//res:response RES对象中提供了对应的属性和方法，可以让服务器返回给客户端信息</span><br><span class=\"line\">\tres.end(&apos;hello world~~&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//=&gt;SERVER.LISTEN监听端口号</span><br><span class=\"line\">server.listen(8080, () =&gt; &#123;</span><br><span class=\"line\">\t//=&gt;当服务创建成功，并且端口号已经监听完成，触发此回调函数执行</span><br><span class=\"line\">\tconsole.log(&apos;server is created successful！listening on 8080 port！&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> let PORT = 80;</span><br><span class=\"line\">function listen(PORT) &#123;</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t\tserver.listen(PORT, () =&gt; &#123;</span><br><span class=\"line\">\t\t\tconsole.log(`服务已经基于$&#123;PORT&#125;端口启动，请勿关闭！`);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125; catch (err) &#123;</span><br><span class=\"line\">\t\tPORT++;</span><br><span class=\"line\">\t\tlisten(PORT);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">listen(80);</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. fs: 给予JS进行I/O</strong><br>        + 提供属性和方法，让js在node环境下执行能够操作服务器上的资源。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/* ==READ-DIR== */</span><br><span class=\"line\">//=&gt;读取指定目录（相对目录或者绝对目录都可以）中的文件目录</span><br><span class=\"line\"> let result = fs.readdirSync(&apos;./&apos;);</span><br><span class=\"line\"> console.log(result); //=&gt;[&quot;fs1.js&quot;,&quot;note.md&quot;,&quot;node_modules&quot;...]</span><br><span class=\"line\"></span><br><span class=\"line\">//异步操作是：读取成功后触发回调函数执行</span><br><span class=\"line\"> fs.readdir(&apos;./&apos;, (err, result) =&gt; &#123;</span><br><span class=\"line\"> \t//=&gt;ERR存储读取失败后的错误信息</span><br><span class=\"line\"> \t//=&gt;RESULT存储读取成功后的结果（此时ERR=NULL）</span><br><span class=\"line\"> \tif (err === null) &#123;</span><br><span class=\"line\"> \t\tconsole.log(result);</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* ==READ-FILE== */</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;同步或者异步读取某一个文件中的内容</span><br><span class=\"line\">//fs.readFileSync([path],[encoding])：不设置编码格式，默认得到的是Buffer文件流（编码）格式的数据，设置UTF8，得到的结果是字符串（例如:JSON格式、HTML或者CSS等格式）；但是对于富媒体资源（例如：图片、音视频等）我们读取和传输的过程中就是基于BUFFER文件流格式操作的，所以不要设置UTF8读取；</span><br><span class=\"line\"></span><br><span class=\"line\">let result = fs.readFileSync(&apos;./add.png&apos;);</span><br><span class=\"line\">console.log(result); </span><br><span class=\"line\">fs.readFile([path],[encoding],[callback])</span><br><span class=\"line\"> fs.readFile(&apos;./package.json&apos;, &apos;utf8&apos;, (err, result) =&gt; &#123;</span><br><span class=\"line\">\tif (err !== null) return;</span><br><span class=\"line\">\tconsole.log(result);</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">/* ==WRITE-FILE== */</span><br><span class=\"line\">//=&gt;向某个文件中写入内容（如果文件不存在，它会默认创建一个文件再写入，而且写入方式是覆盖式写入“把之前文件中的内容全部覆盖”） =&gt;appendFile是追加写入内容</span><br><span class=\"line\">//=&gt;文件不存在可以，但是需要保证路径的正确性</span><br><span class=\"line\">//=&gt;fs.writeFileSync([pathname],[string/buffer content],[encoding])：没有返回值</span><br><span class=\"line\"> fs.writeFileSync(&apos;./AA.txt&apos;, &apos;你好世界~~&apos;, &apos;utf8&apos;);</span><br><span class=\"line\">fs.appendFileSync(&apos;./AA.txt&apos;, &apos;hello world~~&apos;, &apos;utf8&apos;); </span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;异步操作的方式可以监听其成功或者失败</span><br><span class=\"line\"> fs.writeFile(&apos;./AA.txt&apos;, &apos;哈哈哈~~我学会NODE了~~&apos;, &apos;utf8&apos;, err =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(err);</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">// fs.writeFileSync(&apos;./js/AA.txt&apos;, &apos;哈哈哈~~我学会NODE了~~&apos;, &apos;utf8&apos;); =&gt;这样会直接的报错 （可以基于try/catch异常捕获）</span><br><span class=\"line\"> let err = null;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">\tfs.writeFileSync(&apos;./js/AA.txt&apos;, &apos;哈哈哈~~我学会NODE了~~&apos;, &apos;utf8&apos;);</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">\terr = e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (err !== null) &#123;</span><br><span class=\"line\">\tconsole.log(&apos;执行报错~~&apos;);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;把某个文件及里面的内容拷贝到新的目录中（替换型拷贝：原来目录中存在这个文件，新拷贝的会替换原来的）</span><br><span class=\"line\"> fs.copyFile(&apos;./AA.txt&apos;, &apos;./CC.txt&apos;, err =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(err);</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;创建目录</span><br><span class=\"line\"> fs.mkdir(&apos;./js&apos;, err =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(err);</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;删除目录（但是一定要保证目录中不在有文件，否则不让删除）</span><br><span class=\"line\">fs.rmdir(&apos;./js&apos;, err =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(err);</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;删除文件</span><br><span class=\"line\"></span><br><span class=\"line\">fs.unlink(&apos;./js/1.js&apos;, err =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. url 解析URL地址的模块</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let url = require(&apos;url&apos;);</span><br><span class=\"line\">//=&gt;url.parse(str,true)用来解析URL中每一部分信息的，第二个参数传TRUE，自动会把问号参数解析成键值对的方式，存储在query属性中</span><br><span class=\"line\">// query：问号传递参数的键值对</span><br><span class=\"line\">// pathname：请求路径名称</span><br><span class=\"line\"></span><br><span class=\"line\">let str = &apos;http://www.zhufengpeixun.cn:80/stu/index.html?lx=1&amp;from=weixin#teacher&apos;;</span><br><span class=\"line\">console.log(url.parse(str, true));</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./node%E5%9F%BA%E7%A1%80/3.png\" alt=\"Alt text\"></p>\n<p><img src=\"./node%E5%9F%BA%E7%A1%80/4.png\" alt=\"Alt text\"></p>\n<p><strong>4. path 管理路径的模块</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path = require(&apos;path&apos;);</span><br><span class=\"line\">let &#123;</span><br><span class=\"line\">\treadFile</span><br><span class=\"line\">&#125; = require(&apos;../utils/promiseFS&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">readFile(&apos;../package.json&apos;).then(result =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(result);</span><br><span class=\"line\">&#125;).catch(reason =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(reason);</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;获取当前模块所在的绝对路径 &quot;E:\\...\\js\\&quot;</span><br><span class=\"line\">// console.log(__dirname);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;获取当前NODE执行时所在的绝对目录（我们一般认为执行的目录就是项目根目录）</span><br><span class=\"line\">// console.log(path.resolve()); //=&gt;E:\\201908\\第八周\\20190923</span><br><span class=\"line\">//=&gt;如果传递了一个相对目录，也是以获取的绝对目录为依托，再查找对应的目录</span><br><span class=\"line\">// console.log(path.resolve(&apos;../package.json&apos;)); //=&gt;E:\\201908\\第八周\\package.json</span><br></pre></td></tr></table></figure>\n\n<p><strong>第三方模块</strong>  :基于<strong>npm</strong>安装的模块<br>    1. qs<br>    2. mime<br>    3. express<br>    4. express-session<br>    5. body-parser<br><strong>自定义模块</strong><br>    1. node环境下每创建一个js都相当于创建一个新的模块。每个模块中的方法都是该模块私有的方法，不同模块间即使同名的方法也不会冲突。<br>    2. module.exports就是node天生自带的用来导出模块中方法的方法。<br>    3. ruquire是NODE中内置导入模块的方法<br>    4. require导入模块是同步的，每一次导入模块都是把要导入的js文件自上而下执行一遍（执行一遍）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">\t\t\t // 属性和方法  暴露在外面被调用的方法</span><br><span class=\"line\">\t\t\t &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let module = require(&apos;./xx&apos;);</span><br><span class=\"line\">// 1.可以省略.js;</span><br><span class=\"line\">// 2. 调取自定义模块需要加 ../(上级目录) ./(当前目录)  /(根目录)  </span><br><span class=\"line\">// 3. 不加默认逐步产找第三方》内置》报错</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>构建服务器express</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let express = require(&apos;express&apos;),</span><br><span class=\"line\">\tapp = express();</span><br><span class=\"line\">app.listen(8080, () =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(&apos;server is create success！listening on 8080 port！&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(&apos;./static&apos;));</span><br><span class=\"line\">app.use((req, res, next) =&gt; &#123;</span><br><span class=\"line\">\tres.status(404);</span><br><span class=\"line\">\tres.send(&apos;NOT FOUND!&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>构建服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let http = require(&apos;http&apos;),</span><br><span class=\"line\">\turl = require(&apos;url&apos;),</span><br><span class=\"line\">\tpath = require(&apos;path&apos;);</span><br><span class=\"line\">let &#123;</span><br><span class=\"line\">\treadFile</span><br><span class=\"line\">&#125; = require(&apos;./utils/promiseFS&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;HTTP.CREATE-SERVER创建服务</span><br><span class=\"line\">let server = http.createServer((req, res) =&gt; &#123;</span><br><span class=\"line\">\tlet &#123;</span><br><span class=\"line\">\t\t//=&gt;URL存储的是请求信息中的：资源文件的路径名称和问号传参的信息</span><br><span class=\"line\">\t\turl: requestURL</span><br><span class=\"line\">\t&#125; = req;</span><br><span class=\"line\">\tlet &#123;</span><br><span class=\"line\">\t\t//=&gt;请求资源的路径名称</span><br><span class=\"line\">\t\tpathname,</span><br><span class=\"line\">\t\t//=&gt;问号传参信息(键值对)</span><br><span class=\"line\">\t\tquery</span><br><span class=\"line\">\t&#125; = url.parse(requestURL, true);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//=&gt;根据请求的路径和名称，让其去STATIC文件中查找对应的资源文件内容</span><br><span class=\"line\">\tpathname = path.resolve(&apos;./static&apos;) + pathname;</span><br><span class=\"line\">\treadFile(pathname).then(result =&gt; &#123;</span><br><span class=\"line\">\t\t//=&gt;返回的数据格式一般都是字符串或者BUFFER  </span><br><span class=\"line\">\t\t//WRITE服务器返回信息（可以执行多次）</span><br><span class=\"line\">\t\t//END告诉客户端返回的信息已经结束了（必须写的）</span><br><span class=\"line\">\t\t//RES.END相当于基于响应主体返回信息，还需要掌握基于响应头返回信息RES.WRITE-HEAD(STATUS,OPTIONS)</span><br><span class=\"line\">\t\tres.writeHead(200, &#123;</span><br><span class=\"line\">\t\t\t//=&gt;告诉客户端返回的数据格式和编码方式：返回的格式类型是MIME类型（每一种文件都有一个自己所属的类型，而这个类型就是MIME类型）</span><br><span class=\"line\">\t\t\t&apos;content-type&apos;: &apos;text/css&apos;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tres.end(result);</span><br><span class=\"line\">\t&#125;).catch(err =&gt; &#123;</span><br><span class=\"line\">\t\tres.end(&apos;not found!&apos;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;SERVER.LISTEN监听端口号</span><br><span class=\"line\">server.listen(8080, () =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(&apos;server is create success！listening on 8080 port！&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>promiseFs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fs = require(&apos;fs&apos;),</span><br><span class=\"line\">\tpath = require(&apos;path&apos;),</span><br><span class=\"line\">\texportsOBJ = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;根据后缀名返回编码格式:UTF8/NULL</span><br><span class=\"line\">function suffixHandle(pathname) &#123;</span><br><span class=\"line\">\tlet suffixREG = /\\.([0-9a-zA-Z]+)$/,</span><br><span class=\"line\">\t\tsuffix = suffixREG.test(pathname) ? suffixREG.exec(pathname)[1] : &apos;&apos;,</span><br><span class=\"line\">\t\tencoding = &apos;utf8&apos;;</span><br><span class=\"line\">\t/^(PNG|GIF|JPG|JPEG|WEBP|BMP|ICO|SVG|MP3|MP4|WAV|OGG|M3U8)$/i.test(suffix) ? encoding = null : null;</span><br><span class=\"line\">\treturn encoding;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;READ-FILE/READ-DIR/MK-DIR/RM-DIR/UN-LINK</span><br><span class=\"line\">[&apos;readFile&apos;, &apos;readdir&apos;, &apos;mkdir&apos;, &apos;rmdir&apos;, &apos;unlink&apos;].forEach(item =&gt; &#123;</span><br><span class=\"line\">\texportsOBJ[item] = function anonymous(pathname) &#123;</span><br><span class=\"line\">\t\tpathname = path.resolve(pathname);</span><br><span class=\"line\">\t\treturn new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">\t\t\tlet encoding = suffixHandle(pathname),</span><br><span class=\"line\">\t\t\t\tcallback = (err, result) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\tif (err !== null) &#123;</span><br><span class=\"line\">\t\t\t\t\t\treject(err);</span><br><span class=\"line\">\t\t\t\t\t\treturn;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tresolve(result);</span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\tif (item !== &apos;readFile&apos;) &#123;</span><br><span class=\"line\">\t\t\t\tencoding = callback;</span><br><span class=\"line\">\t\t\t\tcallback = null;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfs[item](pathname, encoding, callback);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;WRITE-FILE / APPEND-FILE</span><br><span class=\"line\">[&apos;writeFile&apos;, &apos;appendFile&apos;].forEach(item =&gt; &#123;</span><br><span class=\"line\">\texportsOBJ[item] = function anonymous(pathname, content) &#123;</span><br><span class=\"line\">\t\tpathname = path.resolve(pathname);</span><br><span class=\"line\">\t\t//=&gt;如果是JSON对象,我们转化为JSON字符串</span><br><span class=\"line\">\t\tcontent !== null &amp;&amp; typeof content === &apos;object&apos; ? content = JSON.stringify(content) : null;</span><br><span class=\"line\">\t\ttypeof content !== &apos;string&apos; ? content += &apos;&apos; : null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">\t\t\tlet encoding = suffixHandle(pathname),</span><br><span class=\"line\">\t\t\t\tcallback = (err, result) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\tif (err !== null) &#123;</span><br><span class=\"line\">\t\t\t\t\t\treject(err);</span><br><span class=\"line\">\t\t\t\t\t\treturn;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tresolve(result);</span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\tfs[item](pathname, content, encoding, callback);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//=&gt;COPY-FILE</span><br><span class=\"line\">exportsOBJ[&apos;copyFile&apos;] = function anonymous(pathname1, pathname2) &#123;</span><br><span class=\"line\">\tpathname1 = path.resolve(pathname1);</span><br><span class=\"line\">\tpathname2 = path.resolve(pathname2);</span><br><span class=\"line\">\treturn new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">\t\tfs[&apos;copyFile&apos;](pathname1, pathname2, err =&gt; &#123;</span><br><span class=\"line\">\t\t\tif (err !== null) &#123;</span><br><span class=\"line\">\t\t\t\treject(err);</span><br><span class=\"line\">\t\t\t\treturn;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tresolve();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* </span><br><span class=\"line\">function readFile(pathname) &#123;</span><br><span class=\"line\">\t//=&gt;富媒体资源在获取内容的时候不能使用UTF8编码格式</span><br><span class=\"line\">\t//获取文件的后缀名</span><br><span class=\"line\">\tlet suffixREG = /\\.([0-9a-zA-Z]+)$/,</span><br><span class=\"line\">\t\tsuffix = suffixREG.test(pathname) ? suffixREG.exec(pathname)[1] : &apos;&apos;,</span><br><span class=\"line\">\t\tencoding = &apos;utf8&apos;;</span><br><span class=\"line\">\t/^(PNG|GIF|JPG|JPEG|WEBP|BMP|ICO|SVG|MP3|MP4|WAV|OGG|M3U8)$/i.test(suffix) ? encoding = null : null;</span><br><span class=\"line\">\t//=&gt;用户调用的时候，传递的PATH-NAME都以项目根目录作为参照（执行JS也是在根目录执行），用户只需要把读取文件，相对根目录的路径和名称传递进来即可 =&gt;获取的是绝对路径</span><br><span class=\"line\">\tpathname = path.resolve(pathname);</span><br><span class=\"line\">\treturn new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">\t\tfs.readFile(pathname, encoding, (err, result) =&gt; &#123;</span><br><span class=\"line\">\t\t\tif (err !== null) &#123;</span><br><span class=\"line\">\t\t\t\treject(err);</span><br><span class=\"line\">\t\t\t\treturn;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tresolve(result);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125; */</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = exportsOBJ;</span><br></pre></td></tr></table></figure>\n\n<p>压缩</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * 读取CSS目录中所有的文件，找到后缀名是.CSS的</span><br><span class=\"line\"> * 依次读取CSS文件中的内容，最后把所有内容合并在一起</span><br><span class=\"line\"> * 把合并后的结果放到DIST文件夹的index.css文件中 </span><br><span class=\"line\"> */</span><br><span class=\"line\">let &#123;</span><br><span class=\"line\">\treaddir,</span><br><span class=\"line\">\treadFile,</span><br><span class=\"line\">\twriteFile</span><br><span class=\"line\">&#125; = require(&apos;./utils/promiseFS&apos;);</span><br><span class=\"line\">let less = require(&apos;less&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">readdir(&apos;./css&apos;).then(result =&gt; &#123;</span><br><span class=\"line\">\tresult = result.filter(item =&gt; /\\.CSS$/i.test(item));</span><br><span class=\"line\">\tresult = result.map(item =&gt; &#123;</span><br><span class=\"line\">\t\treturn readFile(`./css/$&#123;item&#125;`);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\treturn Promise.all(result);</span><br><span class=\"line\">&#125;).then(results =&gt; &#123;</span><br><span class=\"line\">\tresults = results.join(&apos;&apos;);</span><br><span class=\"line\">\t//=&gt;此时的RESULTS存储的是未经过压缩的合并后的CSS代码，接下来基于LESS模块完成CSS内容的压缩</span><br><span class=\"line\">\treturn new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">\t\tless.render(results, &#123;</span><br><span class=\"line\">\t\t\t//=&gt;LESS模块规定：设置压缩的方式</span><br><span class=\"line\">\t\t\tcompress: true</span><br><span class=\"line\">\t\t&#125;, (err, result) =&gt; &#123;</span><br><span class=\"line\">\t\t\tif (err !== null) reject(err);</span><br><span class=\"line\">\t\t\t//=&gt;RESULT是一个对象，对象的CSS属性包含压缩后的代码</span><br><span class=\"line\">\t\t\tresolve(result.css);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;).then(css =&gt; &#123;</span><br><span class=\"line\">\t//=&gt;把压缩后的写在指定的目录中</span><br><span class=\"line\">\treturn writeFile(&apos;./dist/index.css&apos;, css);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n","text":"JavaScript——nodenode一个解析JS的工具，之所以称为后台语言的主要原因，我们通常把node安装在服务器端，在服务器端通过node执行一些代码，实现服务器的某些功能npm(node package manager) 安装NODE后自带的模块管理工具，基于此完成安装","link":"","raw":null,"photos":[],"categories":[{"name":"node","slug":"node","count":1,"path":"api/categories/node.json"}],"tags":[{"name":"js","slug":"js","count":1,"path":"api/tags/js.json"}]},{"title":"各种工具类方法","slug":"各种工具类方法","date":"2019-09-11T12:51:06.419Z","updated":"2019-09-11T12:55:29.646Z","comments":true,"path":"api/articles/各种工具类方法.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"type：用来检测数据类型的对象\"><a href=\"#type：用来检测数据类型的对象\" class=\"headerlink\" title=\"_type：用来检测数据类型的对象\"></a>_type：用来检测数据类型的对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * _type:用来检测数据类型的对象,里边存着检验数据类型的各种方法</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      value:要检测的数据</span><br><span class=\"line\"> *   @return(返回值)</span><br><span class=\"line\"> *      false/true</span><br><span class=\"line\"> *   用法：_type.[is检测的数据类型](value) </span><br><span class=\"line\"> *      例如：_type.isArray(obj) 检测obj是否为数组</span><br><span class=\"line\"> */</span><br><span class=\"line\">let _type = (function () &#123;</span><br><span class=\"line\">\tvar _obj = &#123;</span><br><span class=\"line\">\t\tisNumeric: &quot;Number&quot;,//数字类型</span><br><span class=\"line\">\t\tisBoolean: &apos;Boolean&apos;,//布尔类型</span><br><span class=\"line\">\t\tisString: &apos;String&apos;,//字符串类型</span><br><span class=\"line\">\t\tisNull: &apos;Null&apos;,//null类型</span><br><span class=\"line\">\t\tisUndefined: &apos;Undefined&apos;,//undefined类型</span><br><span class=\"line\">\t\tisSymbol: &apos;Symbol&apos;,//Symbol类型</span><br><span class=\"line\">\t\tisPlainObject: &apos;Object&apos;,//对象类型</span><br><span class=\"line\">\t\tisArray: &apos;Array&apos;,//数组类型</span><br><span class=\"line\">\t\tisRegExp: &apos;RegExp&apos;,//正则类型</span><br><span class=\"line\">\t\tisDate: &apos;Date&apos;,//日期对象类型</span><br><span class=\"line\">\t\tisFunction: &quot;Function&quot;,//函数类型</span><br><span class=\"line\">\t\tisWindow: &apos;Window&apos;//是否为window</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tvar _type = &#123;&#125;,</span><br><span class=\"line\">\t\t_toString = _type.toString;</span><br><span class=\"line\">\tfor (var key in _obj) &#123;</span><br><span class=\"line\">\t\tif (!_obj.hasOwnProperty(key)) break;</span><br><span class=\"line\">\t\t_type[key] = (function () &#123;</span><br><span class=\"line\">\t\t\tvar reg = new RegExp(&quot;^\\\\[object &quot; + _obj[key] + &quot;\\\\]$&quot;);</span><br><span class=\"line\">\t\t\treturn function anonymous(val) &#123;</span><br><span class=\"line\">\t\t\t\treturn reg.test(_toString.call(val));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn _type;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"each：遍历数组、类数组、对象中的每一项\"><a href=\"#each：遍历数组、类数组、对象中的每一项\" class=\"headerlink\" title=\"_each：遍历数组、类数组、对象中的每一项\"></a>_each：遍历数组、类数组、对象中的每一项</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * _each：遍历数组、类数组、对象中的每一项</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      obj:要遍历的值</span><br><span class=\"line\"> *      callback:回调函数 遍历时运行的函数</span><br><span class=\"line\"> *      context:回调函数this的指向 默认为window</span><br><span class=\"line\"> *   @return(返回值)</span><br><span class=\"line\"> *      遍历后的新值</span><br><span class=\"line\"> *   用到了上边的检验数据类型的方法 _type 所以要同上边的方法一起用</span><br><span class=\"line\"> */</span><br><span class=\"line\">function _each(obj, callback, context = window) &#123;</span><br><span class=\"line\">\tlet isLikeArray = _type.isArray(obj) || ((&apos;length&apos; in obj) &amp;&amp; _type.isNumeric(obj.length));</span><br><span class=\"line\">\ttypeof callback !== &quot;function&quot; ? callback = Function.prototype : null;</span><br><span class=\"line\">\t//=&gt;数组或者类数组</span><br><span class=\"line\">\tif (isLikeArray) &#123;</span><br><span class=\"line\">\t\tlet arr = [...obj];</span><br><span class=\"line\">\t\tfor (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\tlet item = arr[i],</span><br><span class=\"line\">\t\t\t\tresult = callback.call(context, item, i);</span><br><span class=\"line\">\t\t\tif (result === false) break;</span><br><span class=\"line\">\t\t\tif (typeof result === &quot;undefined&quot;) continue;</span><br><span class=\"line\">\t\t\tarr[i] = result;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn arr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//=&gt;对象的处理</span><br><span class=\"line\">\tlet opp = &#123;...obj&#125;;//解构赋值</span><br><span class=\"line\">\tfor (let key in opp) &#123;</span><br><span class=\"line\">\t\tif (!opp.hasOwnProperty(key)) break;//检测是否为私有属性</span><br><span class=\"line\">\t\tlet value = opp[key],</span><br><span class=\"line\">\t\t\tresult = callback.call(context, value, key);</span><br><span class=\"line\">\t\tif (result === false) break;</span><br><span class=\"line\">\t\tif (typeof result === &quot;undefined&quot;) continue;</span><br><span class=\"line\">\t\topp[key] = result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn opp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"replace：实现字符串的替换\"><a href=\"#replace：实现字符串的替换\" class=\"headerlink\" title=\"replace：实现字符串的替换\"></a>replace：实现字符串的替换</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * replace：实现字符串的替换</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      reg:正则</span><br><span class=\"line\"> *      callback:回调函数</span><br><span class=\"line\"> *   @return(返回值)</span><br><span class=\"line\"> *      替换后的新字符串</span><br><span class=\"line\"> */</span><br><span class=\"line\">function replace(reg, callback) &#123;</span><br><span class=\"line\">\tlet _this = this.substring(0),</span><br><span class=\"line\">\t\tisGlobal = reg.global,</span><br><span class=\"line\">\t\tarr = reg.exec(this);</span><br><span class=\"line\">\twhile (arr) &#123;</span><br><span class=\"line\">\t//=&gt;捕获到的结果是数组(执行回调函数,把捕获的结果传递给它)；还要接收回调函数执行的返回值，用返回值替换字符串中当前正则匹配的内容；</span><br><span class=\"line\">\t\tif (typeof callback === &quot;function&quot;) &#123;</span><br><span class=\"line\">\t\t\tlet res = callback.apply(null, arr);</span><br><span class=\"line\">\t\t\tlet index = _this.indexOf(arr[0]);</span><br><span class=\"line\">\t\t\t_this = _this.substring(0, index) + res + _this.substring(index + arr[0].length);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tarr = reg.exec(this);</span><br><span class=\"line\">\t//=&gt;不设置GLOBAL的情况执行一次</span><br><span class=\"line\">\tif (!isGlobal) break;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">return _this;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的节流\"><a href=\"#函数的节流\" class=\"headerlink\" title=\"函数的节流\"></a>函数的节流</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * _throttle:函数的节流</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      func:需要节流的函数</span><br><span class=\"line\"> *      wait:规定执行的等待时间</span><br><span class=\"line\"> */</span><br><span class=\"line\">function _throttle(func, wait) &#123;</span><br><span class=\"line\">\tlet timer = null,</span><br><span class=\"line\">\t\tresult = null,</span><br><span class=\"line\">\t\tprevious = 0;</span><br><span class=\"line\">\treturn function anonymous(...args) &#123;</span><br><span class=\"line\">\t\tlet context = this,</span><br><span class=\"line\">\t\t\tnow = new Date,</span><br><span class=\"line\">\t\t\tspanTime = wait - (now - previous);</span><br><span class=\"line\">\t\tif (spanTime &lt;= 0) &#123;</span><br><span class=\"line\">\t\t\tresult = func.call(context, ...args);</span><br><span class=\"line\">\t\t\tclearTimeout(timer);</span><br><span class=\"line\">\t\t\ttimer = null;</span><br><span class=\"line\">\t\t\tprevious = now;</span><br><span class=\"line\">\t\t&#125; else if (!timer) &#123;</span><br><span class=\"line\">\t\t\ttimer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">\t\t\t\tresult = func.call(context, ...args);</span><br><span class=\"line\">\t\t\t\ttimer = null;</span><br><span class=\"line\">\t\t\t\tprevious = new Date;</span><br><span class=\"line\">\t\t\t&#125;, spanTime);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的防抖\"><a href=\"#函数的防抖\" class=\"headerlink\" title=\"函数的防抖\"></a>函数的防抖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * debounce:函数的防抖</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      func:需要节流的函数</span><br><span class=\"line\"> *      wait:规定执行的等待时间</span><br><span class=\"line\"> *      immediate（false/true）： 边界触发 默认为false，传true表示防抖触发开始就运行一次需要防抖的函数</span><br><span class=\"line\"> */</span><br><span class=\"line\">function debounce(func, wait, immediate) &#123;</span><br><span class=\"line\">\tlet timer = null,</span><br><span class=\"line\">\t\tresult = null;</span><br><span class=\"line\">\treturn function anonymous(...args) &#123;</span><br><span class=\"line\">\t\tlet context = this,</span><br><span class=\"line\">\t\t\tnow = immediate &amp;&amp; !timer;</span><br><span class=\"line\">\t\tclearTimeout(timer);</span><br><span class=\"line\">\t\ttimer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">\t\t\ttimer = null;</span><br><span class=\"line\">\t\t\t!immediate ? result = func.call(context, ...args) : null;</span><br><span class=\"line\">\t\t&#125;, wait);</span><br><span class=\"line\">\t\tnow ? result = func.call(context, ...args) : null;</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时间字符串格式化\"><a href=\"#时间字符串格式化\" class=\"headerlink\" title=\"时间字符串格式化\"></a>时间字符串格式化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">* formatTime：时间字符串的格式化处理</span><br><span class=\"line\">*   @params</span><br><span class=\"line\">*     templete:[string] 我们最后期望获取日期格式的模板</span><br><span class=\"line\">*     模板规则:&#123;0&#125;-&gt;年  &#123;1~5&#125;-&gt;月日时分秒</span><br><span class=\"line\">*   @return</span><br><span class=\"line\">*     [string]格式化后的时间字符串</span><br><span class=\"line\">*/</span><br><span class=\"line\">function formatTime(templete = &quot;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日 &#123;3&#125;时&#123;4&#125;分&#123;5&#125;秒&quot;) &#123;</span><br><span class=\"line\">\tlet timeAry = this.match(/\\d+/g);</span><br><span class=\"line\">\treturn templete.replace(/\\&#123;(\\d+)\\&#125;/g, (...[, $1]) =&gt; &#123;</span><br><span class=\"line\">\t\tlet time = timeAry[$1] || &quot;00&quot;;</span><br><span class=\"line\">\t\treturn time.length &lt; 2 ? &quot;0&quot; + time : time;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t/* 扩展到内置类String.prototype上 */</span><br><span class=\"line\">[&quot;formatTime&quot;].forEach(item =&gt; &#123;</span><br><span class=\"line\">\tString.prototype[item] = eval(item);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">//用法</span><br><span class=\"line\">let time = &quot;2019-8-13 16:51:3&quot;;</span><br><span class=\"line\">console.log(time.formatTime());</span><br><span class=\"line\">console.log(time.formatTime(&quot;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日&quot;));</span><br><span class=\"line\">console.log(time.formatTime(&quot;&#123;1&#125;-&#123;2&#125; &#123;3&#125;:&#123;4&#125;&quot;));</span><br><span class=\"line\">time = &quot;2019/8/13&quot;;</span><br><span class=\"line\">console.log(time.formatTime());</span><br><span class=\"line\">console.log(time.formatTime(&quot;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日&quot;));</span><br><span class=\"line\">console.log(time.formatTime(&quot;&#123;1&#125;-&#123;2&#125; &#123;3&#125;:&#123;4&#125;&quot;));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取URL字符串信息\"><a href=\"#获取URL字符串信息\" class=\"headerlink\" title=\"获取URL字符串信息\"></a>获取URL字符串信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* </span><br><span class=\"line\">* queryURLParams：获取URL地址问号和面的参数信息（可能也包含HASH值）</span><br><span class=\"line\">*   @params</span><br><span class=\"line\">*   @return</span><br><span class=\"line\">*     [object]把所有问号参数信息以键值对的方式存储起来并且返回</span><br><span class=\"line\">*/</span><br><span class=\"line\">function queryURLParams() &#123;</span><br><span class=\"line\">\tlet obj = &#123;&#125;;</span><br><span class=\"line\">\tthis.replace(/([^?=&amp;#]+)=([^?=&amp;#]+)/g, (...[, $1, $2]) =&gt; obj[$1] = $2);</span><br><span class=\"line\">\tthis.replace(/#([^?=&amp;#]+)/g, (...[, $1]) =&gt; obj[&apos;HASH&apos;] = $1);</span><br><span class=\"line\">\treturn obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* 扩展到内置类String.prototype上 */</span><br><span class=\"line\">[&quot;formatTime&quot;, &quot;queryURLParams&quot;].forEach(item =&gt; &#123;</span><br><span class=\"line\">\tString.prototype[item] = eval(item);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//用法：</span><br><span class=\"line\">let url = &quot;http://www.baidu.cn/?lx=1&amp;from=wx#video&quot;;</span><br><span class=\"line\">console.log(url.queryURLParams());</span><br><span class=\"line\">//=&gt;&#123;lx:1,from:&apos;wx&apos;,HASH:&apos;video&apos;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取当前元素距离BODY的左、上偏移量（无视父元素）\"><a href=\"#获取当前元素距离BODY的左、上偏移量（无视父元素）\" class=\"headerlink\" title=\"获取当前元素距离BODY的左、上偏移量（无视父元素）\"></a>获取当前元素距离BODY的左、上偏移量（无视父元素）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * offset：获取当前元素距离BODY的左/上偏移（不论其父参照物是谁）</span><br><span class=\"line\"> *   @params</span><br><span class=\"line\"> *      curEle:current element当前要操作的元素</span><br><span class=\"line\"> *   @return</span><br><span class=\"line\"> *      [object]包含上/左偏移的信息  =&gt; &#123;top:xxx,left:xxx&#125; </span><br><span class=\"line\">*/</span><br><span class=\"line\">function offset(curEle) &#123;</span><br><span class=\"line\">    let par = curEle.offsetParent,</span><br><span class=\"line\">        l = curEle.offsetLeft,</span><br><span class=\"line\">        t = curEle.offsetTop;</span><br><span class=\"line\">    //存在父参照物，而且还没有找到BODY</span><br><span class=\"line\">    while (par &amp;&amp; par.tagName !== &quot;BODY&quot;) &#123;</span><br><span class=\"line\">        //在原有偏移的基础上累加：父参照物的边框、父参照物的偏移</span><br><span class=\"line\">        if (!/MSIE 8\\.0/.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">            //IE8中偏移值自已就算了边框了，不需要我们在加边框的值 navigator.userAgent获取当前浏览器的版本信息</span><br><span class=\"line\">            l += par.clientLeft;</span><br><span class=\"line\">            t += par.clientTop;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        l += par.offsetLeft;</span><br><span class=\"line\">        t += par.offsetTop;</span><br><span class=\"line\">        //继续获取上级参照物</span><br><span class=\"line\">        par = par.offsetParent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        top: t,</span><br><span class=\"line\">        left: l</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bind方法\"><a href=\"#bind方法\" class=\"headerlink\" title=\"bind方法\"></a>bind方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * bind:改变函数中this的指向</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      context:需要节流的函数</span><br><span class=\"line\"> */</span><br><span class=\"line\">//=&gt;bind方法在IE6~8中不兼容，接下来我们自己基于原生JS实现这个方法</span><br><span class=\"line\">function bind(context)&#123;</span><br><span class=\"line\">   context=context||window;</span><br><span class=\"line\">   var _this = this,</span><br><span class=\"line\">       outerArg=[].slice.call(arguments,1);</span><br><span class=\"line\">   return function anonymous() &#123;</span><br><span class=\"line\">       var innerArg=[].slice.call(arguments,0);</span><br><span class=\"line\">\t   _this.apply(context, outerArg.concat(innerArg));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"call方法\"><a href=\"#call方法\" class=\"headerlink\" title=\"call方法\"></a>call方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * call:改变函数中this的指向</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      context:需要节流的函数</span><br><span class=\"line\"> *      其余参数一个一个传</span><br><span class=\"line\"> */</span><br><span class=\"line\">function call(context)&#123;</span><br><span class=\"line\">\tcontext=context||window;</span><br><span class=\"line\">\tlet arg=[],</span><br><span class=\"line\">\t_this=this,</span><br><span class=\"line\">\tresult=null;</span><br><span class=\"line\">\tfor(let i=1;i&lt;arguments.length;i++)&#123;</span><br><span class=\"line\">\t\targ.push(arguments[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcontext.$fn=_this;</span><br><span class=\"line\">\tresult=context.$fn(...arg);</span><br><span class=\"line\">\tdelete context.$fn;</span><br><span class=\"line\">\treturn result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"apply方法\"><a href=\"#apply方法\" class=\"headerlink\" title=\"apply方法\"></a>apply方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * apply:改变函数中this的指向</span><br><span class=\"line\"> *   @params(参数)</span><br><span class=\"line\"> *      context:需要节流的函数</span><br><span class=\"line\"> *      第二个参数为数组</span><br><span class=\"line\"> */</span><br><span class=\"line\">function apply(context=window,arg=[])&#123;</span><br><span class=\"line\">\tlet _this=this,</span><br><span class=\"line\">\tresult=null,</span><br><span class=\"line\">\tcontext.fn=_this;</span><br><span class=\"line\">\tresult=context.fn(...arg);</span><br><span class=\"line\">\tdelete context.fn;</span><br><span class=\"line\">\treturn result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","text":"_type：用来检测数据类型的对象1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"正则简单介绍","slug":"正则","date":"2019-09-11T04:07:58.413Z","updated":"2019-09-11T04:08:51.973Z","comments":true,"path":"api/articles/正则.json","excerpt":"","keywords":null,"cover":null,"content":"<h4 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h4><blockquote>\n<p>regular expression：RegExp<br>用来处理字符串的规则</p>\n<ul>\n<li>只能处理字符串</li>\n<li>它是一个规则：可以验证字符串是否符合某个规则（test），也可以把字符串中符合规则的内容捕获到（exec / match…）</li>\n</ul>\n</blockquote>\n<h5 id=\"创建方式有两种\"><a href=\"#创建方式有两种\" class=\"headerlink\" title=\"创建方式有两种\"></a>创建方式有两种</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//=&gt;字面量创建方式（两个斜杠之间包起来的，都是用来描述规则的元字符）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg1 = <span class=\"regexp\">/\\d+/</span>;</span><br><span class=\"line\"><span class=\"comment\">//=&gt;构造函数模式创建  两个参数：元字符字符串，修饰符字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg2 = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"\\\\d+\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"正则表达式由两部分组成\"><a href=\"#正则表达式由两部分组成\" class=\"headerlink\" title=\"正则表达式由两部分组成\"></a>正则表达式由两部分组成</h5><ul>\n<li>元字符</li>\n<li>修饰符<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*常用的元字符*/</span></span><br><span class=\"line\"><span class=\"comment\">//=&gt;1.量词元字符：设置出现的次数</span></span><br><span class=\"line\">* 零到多次  </span><br><span class=\"line\">+ 一到多次</span><br><span class=\"line\">? 零次或者一次</span><br><span class=\"line\">&#123;n&#125; 出现n次</span><br><span class=\"line\">&#123;n,&#125; 出现n到多次</span><br><span class=\"line\">&#123;n,m&#125; 出现n到m次</span><br><span class=\"line\"><span class=\"comment\">//=&gt;2.特殊元字符：单个或者组合在一起代表特殊的含义</span></span><br><span class=\"line\">\\    转义字符（普通-&gt;特殊-&gt;普通）</span><br><span class=\"line\">.    除\\n（换行符）以外的任意字符</span><br><span class=\"line\">^    以哪一个元字符作为开始</span><br><span class=\"line\">$    以哪一个元字符作为结束</span><br><span class=\"line\">\\n   换行符</span><br><span class=\"line\">\\d   <span class=\"number\">0</span>~<span class=\"number\">9</span>之间的一个数字</span><br><span class=\"line\">\\D   非<span class=\"number\">0</span>~<span class=\"number\">9</span>之间的一个数字 （大写和小写的意思是相反的）</span><br><span class=\"line\">\\w   数字、字母、下划线中的任意一个字符</span><br><span class=\"line\">\\s   一个空白字符（包含空格、制表符、换页符等）</span><br><span class=\"line\">\\t   一个制表符（一个TAB键：四个空格）</span><br><span class=\"line\">\\b   匹配一个单词的边界</span><br><span class=\"line\">x|y  x或者y中的一个字符</span><br><span class=\"line\">[xyz] x或者y或者z中的一个字符</span><br><span class=\"line\">[^xy] 除了x/y以外的任意字符</span><br><span class=\"line\">[a-z] 指定a-z这个范围中的任意字符  [<span class=\"number\">0</span><span class=\"number\">-9</span>a-zA-Z_]===\\w</span><br><span class=\"line\">[^a-z] 上一个的取反“非”</span><br><span class=\"line\">()   正则中的分组符号</span><br><span class=\"line\">(?:) 只匹配不捕获</span><br><span class=\"line\">(?=) 正向预查</span><br><span class=\"line\">(?!) 负向预查 </span><br><span class=\"line\"><span class=\"comment\">//=&gt;3.普通元字符：代表本身含义的</span></span><br><span class=\"line\">/putong/ 此正则匹配的就是 <span class=\"string\">\"putong\"</span></span><br><span class=\"line\"><span class=\"comment\">/*正则表达式常用的修饰符：img*/</span></span><br><span class=\"line\">i =&gt;ignoreCase  忽略单词大小写匹配</span><br><span class=\"line\">m =&gt;multiline   可以进行多行匹配</span><br><span class=\"line\">g =&gt;global      全局匹配</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>常用的正则表达式</strong></p>\n<ol>\n<li><p>验证是否为有效数字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 规则分析</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.可能出现 + - 号，也可能不出现  [+-]?</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.一位0-9都可以，多位首位不能是0 (\\d|([1-9]\\d+))</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.小数部分可能有可能没有，一旦有后面必须有小数点+数字 (\\.\\d+)?</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^[+-]?(\\d|([1-9]\\d+))(\\.\\d+)?$/</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证密码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//=&gt;数字、字母、下划线</span></span><br><span class=\"line\"><span class=\"comment\">//=&gt;6~16位</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> val = userPassInp.value,</span><br><span class=\"line\">    reg = <span class=\"regexp\">/^\\w&#123;6,16&#125;$/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> flag=reg.test(val);</span><br><span class=\"line\">&lt;!-- 不用正则 --&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPass</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(val.length&lt;<span class=\"number\">6</span> || val.length&gt;<span class=\"number\">16</span>)&#123;</span><br><span class=\"line\">    \talert(<span class=\"string\">'长度必须介于6-16位之间！'</span>);</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> area=[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>....<span class=\"string\">'_'</span>]; <span class=\"comment\">//=&gt;包含数字、字母、下划线</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;val.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> char=val[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!area.includes(char))&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'格式不正确！'</span>);</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证真实姓名的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.汉字  /^[\\u4E00-\\u9FA5]$/</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.名字长度 2~10位</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.可能有译名 ·汉字  (·[\\u4E00-\\u9FA5]&#123;2,10&#125;)&#123;0,2&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^[\\u4E00-\\u9FA5]&#123;2,10&#125;(·[\\u4E00-\\u9FA5]&#123;2,10&#125;)&#123;0,2&#125;$/</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证邮箱的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^\\w+((-\\w+)|(\\.\\w+))*@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>身份证号码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^(\\d&#123;6&#125;)(\\d&#123;4&#125;)(\\d&#123;2&#125;)(\\d&#123;2&#125;)\\d&#123;2&#125;(\\d)(\\d|X)$/</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把时间字符串进行处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> time = <span class=\"string\">\"2019-08-13\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//=&gt;变为\"2019年08月13日\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^(\\d&#123;4&#125;)-(\\d&#123;1,2&#125;)-(\\d&#123;1,2&#125;)$/</span>;</span><br><span class=\"line\">time = time.replace(reg,(...arg)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [,$<span class=\"number\">1</span>,$<span class=\"number\">2</span>,$<span class=\"number\">3</span>]=arg;</span><br><span class=\"line\">    $<span class=\"number\">2.</span>length&lt;<span class=\"number\">2</span>?$<span class=\"number\">2</span>=<span class=\"string\">\"0\"</span>+$<span class=\"number\">2</span>:<span class=\"literal\">null</span>;</span><br><span class=\"line\">    $<span class=\"number\">3.</span>length&lt;<span class=\"number\">2</span>?$<span class=\"number\">3</span>=<span class=\"string\">\"0\"</span>+$<span class=\"number\">3</span>:<span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $<span class=\"number\">1</span>+<span class=\"string\">\"年\"</span>+$<span class=\"number\">2</span>+<span class=\"string\">\"月\"</span>+$<span class=\"number\">3</span>+<span class=\"string\">\"日\"</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单词首字母大写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"good good study，day day up！\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\b([a-zA-Z])[a-zA-Z]*\\b/g</span>;</span><br><span class=\"line\">str = str.replace(reg,(...arg)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [content,$<span class=\"number\">1</span>]=arg;</span><br><span class=\"line\">    $<span class=\"number\">1</span>=$<span class=\"number\">1.</span>toUpperCase();</span><br><span class=\"line\">    content=content.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $<span class=\"number\">1</span>+content;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str); <span class=\"comment\">//=&gt;\"Good Good Study，Day Day Up！\"</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","text":"正则表达式regular expression：RegExp<br>用来处理字符串的规则只能处理字符串它是一个规则：可以验证字符串是否符合某个规则（test），也可以把字符串中符合规则的内容捕获到（exec / match…）创建方式有两种1<br>2<br>3<br>4<br>","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Math、数字、数组、字符串的方法","slug":"Math、数字、数组、字符串的方法","date":"2019-09-10T16:00:00.000Z","updated":"2019-09-11T12:54:58.693Z","comments":true,"path":"api/articles/Math、数字、数组、字符串的方法.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Math方法\"><a href=\"#Math方法\" class=\"headerlink\" title=\"Math方法\"></a>Math方法</h1><ol>\n<li><p><code>Math.abs([number value])</code>：获取绝对值（绝对值永远是正数或者零）如果传递的不是数字类型，会先基于<code>Number()</code>换为数字再处理。</p>\n</li>\n<li><p><code>Math.ceil/floor([number value])</code>：把一个数向上取整/向下取整</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Math.ceil(12.5));//=&gt;13</span><br><span class=\"line\">console.log(Math.ceil(-12.5));//=&gt;-12</span><br><span class=\"line\">console.log(Math.floor(12.5));//=&gt;12</span><br><span class=\"line\">console.log(Math.floor(-12.5));//=&gt;-13</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Math.round([number value])</code>：四舍五入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Math.round(12.5))//=&gt;13 正数中，.5属于入</span><br><span class=\"line\">console.log(Math.round(-12.5))//=&gt;-12 负数中，.5属于舍</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Math.max/min([val1],[val2],[val3]...)</code>：获取一堆数中的最大值和最小值</p>\n</li>\n<li><p><code>Math.sqrt/pow([number value])</code>：<code>sprt</code>:给一个数开平方<code>pow</code>:计算一个数的多少次幂</p>\n</li>\n<li><p><code>Math.random()</code>：获取0~1之间的随机小数</p>\n</li>\n<li><p>获取[n~m]之间的随机正数，包含n,m,同时n&lt;m<code>Math.round(Math.random()*(m-n)+n)</code></p>\n<h1 id=\"数字方法\"><a href=\"#数字方法\" class=\"headerlink\" title=\"数字方法\"></a>数字方法</h1></li>\n</ol>\n<ul>\n<li><code>NaN</code>：not a number：不是一个数，但它属于数字类型<strong><code>NaN和任何值（包括自己）都不相等</code></strong></li>\n<li><code>isNan([val])</code>检测一个值是否为非有效数字，如果不是有效数字返回turn，反之是有效数字返回false<strong>使用isNaN进行检测的时候，首先会验证检测的值是否为数字类型，如果不是，先基于Number( )这个方法，把值转换成数字类型，然后再检测。</strong></li>\n<li><code>Number([val])</code>转换成数字类型<strong>对象先转换称字符串，只要字符串包含任意一个非有效数字字符（第一个点除外）结果都是NaN，空字符串回变成数字零</strong></li>\n<li><code>parseInt(整数)/parseFloat(小数)([val],[进制])</code>对象先转换称字符串对于字符串来说，它是<strong>从左到右依次查找有效数字字符</strong>，直到遇到非有效数字字符，停止查找（不管后边是否还有数字，都不在找了），把找到的当做数字返回<h1 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h1><h2 id=\"Array函数对象属性方法\"><a href=\"#Array函数对象属性方法\" class=\"headerlink\" title=\"Array函数对象属性方法\"></a>Array函数对象属性方法</h2></li>\n</ul>\n<ol>\n<li><p><code>Arrat.from([val])</code>:从一个类似数组或可迭代对象中创建一个新的数组实例<strong><code>参数：</code></strong>需要转换成数组的伪数组对象或可迭代对象<strong><code>返回值：</code></strong>一个新的数组实例</p>\n<h2 id=\"Arrar-prototype（原型）上的方法\"><a href=\"#Arrar-prototype（原型）上的方法\" class=\"headerlink\" title=\"Arrar.prototype（原型）上的方法\"></a>Arrar.prototype（原型）上的方法</h2><h3 id=\"改变原数组\"><a href=\"#改变原数组\" class=\"headerlink\" title=\"改变原数组\"></a>改变原数组</h3></li>\n<li><p><code>ary.push([val])</code>：向数组末尾追加内容 <strong><code>返回值：</code></strong>新增后数组的长度</p>\n</li>\n<li><p><code>ary.unshift([val])</code>：向数组开始位置增加内容 <strong><code>返回值：</code></strong>删除后数组的</p>\n</li>\n<li><p><code>ary.shift()</code>：删除数组的第一项 <strong><code>返回值：</code></strong>删除的那一项</p>\n</li>\n<li><p><code>ary.pop()</code>：删除数组的最后一项 <strong><code>返回值：</code></strong>删除的那一项</p>\n</li>\n<li><p><code>ary.splice(n,m,[val])</code>：实现数组的增加、删除和修改 <strong><code>参数：</code></strong>n,m(都是数字)  从索引n开始删除m个元素(m不写，删除到末尾)，用[val]占用删除的部分<strong><code>返回值：</code></strong>删除的部分用新数组存储起来返回</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**修改**：n,m,x 从索引n开始删除m个元素，用x占用删除的部分</span><br><span class=\"line\">**增加**：n,0,x 从索引n开始，一个都不删，把x放到索引n的前面</span><br><span class=\"line\">let ary = [12,13,19,15];</span><br><span class=\"line\">let b = ary.splice(1,2,&apos;xxx&apos;,&apos;aaa&apos;,&apos;ddd&apos;)//=&gt;删除 13 19 用&apos;xxx&apos;,&apos;aaa&apos;,&apos;ddd&apos;代替他们的位置</span><br><span class=\"line\">console.log(b) //=&gt;[13,19]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ary.reverse()</code>：把数组倒过来排列 <strong><code>返回值：</code></strong>排列后的新数组</p>\n</li>\n<li><p><code>ary.sort()</code>：实现数组的排序 <strong><code>参数：</code></strong>可以不传（不传只能判断一位数字），可以是一个函数<strong><code>返回值：</code></strong>排序后的新数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary.sort((a,b) =&gt; a-b);//a-b 从小到大   b-a 从大到小</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ary.fill(value,start,end)</code>：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引 <strong><code>参数：</code></strong><code>value:</code>用来填充数组元素的值,<code>start:</code>起始索引(默认值为0),<code>end:</code>终止索引(默认值为 this.length)<strong><code>返回值：</code></strong>修改后的数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3].fill(4, 1); //=&gt; [1, 4, 4]</span><br><span class=\"line\">[1, 2, 3].fill(4, 1, 2); //=&gt; [1, 4, 3]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>末尾添加新项方法</strong><br><code>ary.push()</code>、<code>ary[ary.length] = n</code>、<code>ary.splice(ary.length,0,n)</code></p>\n</li>\n</ol>\n<p><strong>开头新项方法</strong><br><code>ary.unshift()</code>、<code>ary.splice(0,0,n)</code><br><strong>末尾删除最后一项方法</strong><br><code>ary.pop()</code>、<code>ary.length--</code>、<code>ary.splice(ary.length-1)</code><br><strong>开头删除第一项方法</strong><br><code>ary.shift()</code>、<code>ary.splice(0,1)</code></p>\n<h3 id=\"原数组不变\"><a href=\"#原数组不变\" class=\"headerlink\" title=\"原数组不变\"></a>原数组不变</h3><ol start=\"10\">\n<li><code>ary.slice(n,m)</code>：实现数组的查询,从索引n开始找到索引为m的地方(不包含m这一项，m不写找到末尾) <strong><code>返回值：</code></strong>找到的内容以一个新数组的形式返回</li>\n<li><code>ary.concat()</code>：多个任意类型值 <strong><code>返回值：</code></strong>拼接后的新数组）</li>\n<li><code>ary.toString()</code>：把数组转换为字符串 <strong><code>返回值：</code></strong>转化后的字符串，每一项用逗号分隔</li>\n<li><code>ary.join()</code>：把数组转换为字符串 <strong><code>参数：</code></strong>指定的分隔符（字符串格式）<strong><code>返回值：</code></strong>按指定分隔符（默认为逗号）转化后的字符串</li>\n<li><code>ary.indexOf / lastIndexOf()</code>：检测当前项在数组中第一次或者最后一次出现位置的索引（IE6~8中不兼容） <strong><code>返回值：</code></strong>这一项出现的位置索引值（数字），如果数组中没有这一项，返回的结果是-1</li>\n<li><code>ary.includes()</code>：判断一个值是否存在于数组中 <strong><code>返回值：</code></strong>存在true，不存在false</li>\n<li><code>ary.forEach()</code>：遍历数组中的每一项内容 <strong><code>参数：</code></strong>回调函数</li>\n<li><code>ary.map()</code>：创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。 <strong><code>参数：</code></strong>回调函数<strong><code>返回值：</code></strong>一个新数组，每个元素都是回调函数的结果</li>\n<li><code>ary.find()</code>：数组中的每一项元素执行一次 回调函数，直至有一项使函数返回 true。当找到了这样一个元素后，该方法会立即返回这个元素的值，否则返回 undefined。 <strong><code>参数：</code></strong>回调函数(里边包含判断)<strong><code>返回值：</code></strong>数组中第一个满足所提供测试函数的元素的值，否则返回 undefined。</li>\n<li><code>ary.some()</code>：数组中的每一项元素执行一次 回调函数，直至有一项使函数返回 true。当找到了这样一个元素后，该方法会立即返回true，否则返回 false <strong><code>参数：</code></strong>回调函数(里边包含判断)<strong><code>返回值：</code></strong>数组中有满足所提供测试函数的元素则返回true，否则返回false。</li>\n<li><code>ary.flat()</code>：按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。 <strong><code>参数：</code></strong>指定要提取嵌套数组的结构深度(默认值为 1)<strong><code>返回值：</code></strong>一个包含将数组与子数组中所有元素的新数组 <h1 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h1></li>\n<li><ul>\n<li><code>str.length</code>：字符串的长度</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><code>str[0]</code>：获取索引为0(第一个)字符</li>\n<li><code>str[str.length-1]</code>：获取最后一个字符（<code>str.length-1</code>最后一项索引）</li>\n<li><code>str[1000]</code>：undefined 不存在这个索引</li>\n</ul>\n<ol start=\"2\">\n<li><code>str.charAt([val])</code>：根据索引获取指定位置的字符<strong><code>返回值：</code></strong>返回查找的字符（找不到返回的是空字符串不是undefined）</li>\n<li><code>str.charCodeAt([val])</code>：获取指定字符的ASCII码值<strong><code>返回值：</code></strong>返回查找的字符对应的编码值（ 找不到返回的是空字符串不是undefined）</li>\n<li><code>str.substr(n,m)</code>：从索引n开始截取m个字符，m不写截取到末尾（后面的方法也是）<strong><code>返回值：</code></strong>返回一个字符串中从指定位置开始到指定字符数的字符</li>\n<li><code>str.substring(n,m)</code>：从索引n开始截取到m处（不含m），m不写截取到末尾<strong><code>返回值：</code></strong>包含给定字符串的指定部分的新字符串</li>\n<li><code>str.slice(n,m)</code>：从索引n开始截取到m处（不含m），但是slice可以支持负数作为索引，其余两个方法不可以的，<strong>负数索引是按<code>str.length+负索引</code>的值查找</strong> <strong><code>返回值：</code></strong>包含给定字符串的指定部分的新字符串</li>\n<li><code>str.indexOf(x,y)</code>：获取x第一次出现位置的索引，y是控制查找的起始位置索引<strong><code>返回值：</code></strong>这一项出现的位置索引值（数字），如果字符串中没有这一项，返回的结果是-1</li>\n<li><code>str.lastIndexof(x)</code>：获取x最后一次出现位置的索引<strong><code>返回值：</code></strong>这一项出现的位置索引值（数字），如果字符串中没有这一项，返回的结果是-1</li>\n<li><code>str.includes(x)</code>：验证x是否存在字符串中<strong><code>返回值：</code></strong>存在返回true，不存在返回false</li>\n<li><code>str.toUpperCase()</code>：转大写<strong><code>返回值：</code></strong>转换后的新字符串</li>\n<li><code>str.toLowerCase()</code>：转小写<strong><code>返回值：</code></strong>转换后的新字符串</li>\n<li><strong><code>str.split([分隔符])</code></strong>：指定一个分隔符，把字符串按照指定的分隔符拆分成数组（与数组中的<code>join</code>相对应），支持传递正则表达式<strong><code>返回值：</code></strong>转换后的数组</li>\n<li><code>str.replace([reg|val],[回调函数|val])</code>：实现字符串的替换（经常伴随着正则而用）<strong><code>参数：</code></strong>第一个为正则或者原字符串中存在的老字符串，第二个参数为一个回调函数或者要替换成的新字符串<strong><code>返回值：</code></strong>需要替代的部分或者匹配到的被新字符串或者回调函数return的值所取代后的新的字符串（原字符串不会改变）</li>\n</ol>\n","text":"Math方法Math.abs([number value])：获取绝对值（绝对值永远是正数或者零）如果传递的不是数字类型，会先基于Number()换为数字再处理。Math.ceil/floor([number value])：把一个数向上取整/向下取整1<br>2<br>3<br","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}