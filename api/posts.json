{"total":1,"pageSize":10,"pageCount":1,"data":[{"title":"","slug":"Math、数字、数组、字符串的方法","date":"2019-09-09T14:57:43.316Z","updated":"2019-09-09T14:57:43.401Z","comments":true,"path":"api/articles/Math、数字、数组、字符串的方法.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Math、数字、数组、字符串的方法\"><a href=\"#Math、数字、数组、字符串的方法\" class=\"headerlink\" title=\"Math、数字、数组、字符串的方法\"></a>Math、数字、数组、字符串的方法</h1><h3 id=\"Math方法\"><a href=\"#Math方法\" class=\"headerlink\" title=\"Math方法\"></a>Math方法</h3><ol>\n<li><p><code>Math.abs([number value])</code>：获取绝对值（绝对值永远是正数或者零）如果传递的不是数字类型，会先基于<code>Number()</code>换为数字再处理。</p>\n</li>\n<li><p><code>Math.ceil/floor([number value])</code>：把一个数向上取整/向下取整</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Math.ceil(12.5));//=&gt;13</span><br><span class=\"line\">console.log(Math.ceil(-12.5));//=&gt;-12</span><br><span class=\"line\">console.log(Math.floor(12.5));//=&gt;12</span><br><span class=\"line\">console.log(Math.floor(-12.5));//=&gt;-13</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Math.round([number value])</code>：四舍五入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Math.round(12.5))//=&gt;13 正数中，.5属于入</span><br><span class=\"line\">console.log(Math.round(-12.5))//=&gt;-12 负数中，.5属于舍</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Math.max/min([val1],[val2],[val3]...)</code>：获取一堆数中的最大值和最小值</p>\n</li>\n<li><p><code>Math.sqrt/pow([number value])</code>：<code>sprt</code>:给一个数开平方<code>pow</code>:计算一个数的多少次幂</p>\n</li>\n<li><p><code>Math.random()</code>：获取0~1之间的随机小数</p>\n</li>\n<li><p>获取[n~m]之间的随机正数，包含n,m,同时n&lt;m<code>Math.round(Math.random()*(m-n)+n)</code></p>\n<h3 id=\"数字方法\"><a href=\"#数字方法\" class=\"headerlink\" title=\"数字方法\"></a>数字方法</h3></li>\n</ol>\n<ul>\n<li><code>NaN</code>：not a number：不是一个数，但它属于数字类型<strong><code>NaN和任何值（包括自己）都不相等</code></strong></li>\n<li><code>isNan([val])</code>检测一个值是否为非有效数字，如果不是有效数字返回turn，反之是有效数字返回false<strong>使用isNaN进行检测的时候，首先会验证检测的值是否为数字类型，如果不是，先基于Number( )这个方法，把值转换成数字类型，然后再检测。</strong></li>\n<li><code>Number([val])</code>转换成数字类型<strong>对象先转换称字符串，只要字符串包含任意一个非有效数字字符（第一个点除外）结果都是NaN，空字符串回变成数字零</strong></li>\n<li><code>parseInt(整数)/parseFloat(小数)([val],[进制])</code>对象先转换称字符串对于字符串来说，它是<strong>从左到右依次查找有效数字字符</strong>，直到遇到非有效数字字符，停止查找（不管后边是否还有数字，都不在找了），把找到的当做数字返回<h3 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h3><h4 id=\"Array函数对象属性方法\"><a href=\"#Array函数对象属性方法\" class=\"headerlink\" title=\"Array函数对象属性方法\"></a>Array函数对象属性方法</h4></li>\n</ul>\n<ol>\n<li><p><code>Arrat.from([val])</code>:从一个类似数组或可迭代对象中创建一个新的数组实例<strong><code>参数：</code></strong>需要转换成数组的伪数组对象或可迭代对象<strong><code>返回值：</code></strong>一个新的数组实例</p>\n<h4 id=\"Arrar-prototype（原型）上的方法\"><a href=\"#Arrar-prototype（原型）上的方法\" class=\"headerlink\" title=\"Arrar.prototype（原型）上的方法\"></a>Arrar.prototype（原型）上的方法</h4><h5 id=\"改变原数组\"><a href=\"#改变原数组\" class=\"headerlink\" title=\"改变原数组\"></a>改变原数组</h5></li>\n<li><p><code>ary.push([val])</code>：向数组末尾追加内容 <strong><code>返回值：</code></strong>新增后数组的长度</p>\n</li>\n<li><p><code>ary.unshift([val])</code>：向数组开始位置增加内容 <strong><code>返回值：</code></strong>删除后数组的</p>\n</li>\n<li><p><code>ary.shift()</code>：删除数组的第一项 <strong><code>返回值：</code></strong>删除的那一项</p>\n</li>\n<li><p><code>ary.pop()</code>：删除数组的最后一项 <strong><code>返回值：</code></strong>删除的那一项</p>\n</li>\n<li><p><code>ary.splice(n,m,[val])</code>：实现数组的增加、删除和修改 <strong><code>参数：</code></strong>n,m(都是数字)  从索引n开始删除m个元素(m不写，删除到末尾)，用[val]占用删除的部分<strong><code>返回值：</code></strong>删除的部分用新数组存储起来返回</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**修改**：n,m,x 从索引n开始删除m个元素，用x占用删除的部分</span><br><span class=\"line\">**增加**：n,0,x 从索引n开始，一个都不删，把x放到索引n的前面</span><br><span class=\"line\">let ary = [12,13,19,15];</span><br><span class=\"line\">let b = ary.splice(1,2,&apos;xxx&apos;,&apos;aaa&apos;,&apos;ddd&apos;)//=&gt;删除 13 19 用&apos;xxx&apos;,&apos;aaa&apos;,&apos;ddd&apos;代替他们的位置</span><br><span class=\"line\">console.log(b) //=&gt;[13,19]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ary.reverse()</code>：把数组倒过来排列 <strong><code>返回值：</code></strong>排列后的新数组</p>\n</li>\n<li><p><code>ary.sort()</code>：实现数组的排序 <strong><code>参数：</code></strong>可以不传（不传只能判断一位数字），可以是一个函数<strong><code>返回值：</code></strong>排序后的新数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary.sort((a,b) =&gt; a-b);//a-b 从小到大   b-a 从大到小</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ary.fill(value,start,end)</code>：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引 <strong><code>参数：</code></strong><code>value:</code>用来填充数组元素的值,<code>start:</code>起始索引(默认值为0),<code>end:</code>终止索引(默认值为 this.length)<strong><code>返回值：</code></strong>修改后的数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3].fill(4, 1); //=&gt; [1, 4, 4]</span><br><span class=\"line\">[1, 2, 3].fill(4, 1, 2); //=&gt; [1, 4, 3]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>末尾添加新项方法</strong><br><code>ary.push()</code>、<code>ary[ary.length] = n</code>、<code>ary.splice(ary.length,0,n)</code></p>\n</li>\n</ol>\n<p><strong>开头新项方法</strong><br><code>ary.unshift()</code>、<code>ary.splice(0,0,n)</code><br><strong>末尾删除最后一项方法</strong><br><code>ary.pop()</code>、<code>ary.length--</code>、<code>ary.splice(ary.length-1)</code><br><strong>开头删除第一项方法</strong><br><code>ary.shift()</code>、<code>ary.splice(0,1)</code></p>\n<h5 id=\"原数组不变\"><a href=\"#原数组不变\" class=\"headerlink\" title=\"原数组不变\"></a>原数组不变</h5><ol start=\"10\">\n<li><code>ary.slice(n,m)</code>：实现数组的查询,从索引n开始找到索引为m的地方(不包含m这一项，m不写找到末尾) <strong><code>返回值：</code></strong>找到的内容以一个新数组的形式返回</li>\n<li><code>ary.concat()</code>：多个任意类型值 <strong><code>返回值：</code></strong>拼接后的新数组）</li>\n<li><code>ary.toString()</code>：把数组转换为字符串 <strong><code>返回值：</code></strong>转化后的字符串，每一项用逗号分隔</li>\n<li><code>ary.join()</code>：把数组转换为字符串 <strong><code>参数：</code></strong>指定的分隔符（字符串格式）<strong><code>返回值：</code></strong>按指定分隔符（默认为逗号）转化后的字符串</li>\n<li><code>ary.indexOf / lastIndexOf()</code>：检测当前项在数组中第一次或者最后一次出现位置的索引（IE6~8中不兼容） <strong><code>返回值：</code></strong>这一项出现的位置索引值（数字），如果数组中没有这一项，返回的结果是-1</li>\n<li><code>ary.includes()</code>：判断一个值是否存在于数组中 <strong><code>返回值：</code></strong>存在true，不存在false</li>\n<li><code>ary.forEach()</code>：遍历数组中的每一项内容 <strong><code>参数：</code></strong>回调函数</li>\n<li><code>ary.map()</code>：创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。 <strong><code>参数：</code></strong>回调函数<strong><code>返回值：</code></strong>一个新数组，每个元素都是回调函数的结果</li>\n<li><code>ary.find()</code>：数组中的每一项元素执行一次 回调函数，直至有一项使函数返回 true。当找到了这样一个元素后，该方法会立即返回这个元素的值，否则返回 undefined。 <strong><code>参数：</code></strong>回调函数(里边包含判断)<strong><code>返回值：</code></strong>数组中第一个满足所提供测试函数的元素的值，否则返回 undefined。</li>\n<li><code>ary.some()</code>：数组中的每一项元素执行一次 回调函数，直至有一项使函数返回 true。当找到了这样一个元素后，该方法会立即返回true，否则返回 false <strong><code>参数：</code></strong>回调函数(里边包含判断)<strong><code>返回值：</code></strong>数组中有满足所提供测试函数的元素则返回true，否则返回false。</li>\n<li><code>ary.flat()</code>：按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。 <strong><code>参数：</code></strong>指定要提取嵌套数组的结构深度(默认值为 1)<strong><code>返回值：</code></strong>一个包含将数组与子数组中所有元素的新数组 <h3 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h3></li>\n<li><ul>\n<li><code>str.length</code>：字符串的长度</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><code>str[0]</code>：获取索引为0(第一个)字符</li>\n<li><code>str[str.length-1]</code>：获取最后一个字符（<code>str.length-1</code>最后一项索引）</li>\n<li><code>str[1000]</code>：undefined 不存在这个索引</li>\n</ul>\n<ol start=\"2\">\n<li><code>str.charAt([val])</code>：根据索引获取指定位置的字符<strong><code>返回值：</code></strong>返回查找的字符（找不到返回的是空字符串不是undefined）</li>\n<li><code>str.charCodeAt([val])</code>：获取指定字符的ASCII码值<strong><code>返回值：</code></strong>返回查找的字符对应的编码值（ 找不到返回的是空字符串不是undefined）</li>\n<li><code>str.substr(n,m)</code>：从索引n开始截取m个字符，m不写截取到末尾（后面的方法也是）<strong><code>返回值：</code></strong>返回一个字符串中从指定位置开始到指定字符数的字符</li>\n<li><code>str.substring(n,m)</code>：从索引n开始截取到m处（不含m），m不写截取到末尾<strong><code>返回值：</code></strong>包含给定字符串的指定部分的新字符串</li>\n<li><code>str.slice(n,m)</code>：从索引n开始截取到m处（不含m），但是slice可以支持负数作为索引，其余两个方法不可以的，<strong>负数索引是按<code>str.length+负索引</code>的值查找</strong> <strong><code>返回值：</code></strong>包含给定字符串的指定部分的新字符串</li>\n<li><code>str.indexOf(x,y)</code>：获取x第一次出现位置的索引，y是控制查找的起始位置索引<strong><code>返回值：</code></strong>这一项出现的位置索引值（数字），如果字符串中没有这一项，返回的结果是-1</li>\n<li><code>str.lastIndexof(x)</code>：获取x最后一次出现位置的索引<strong><code>返回值：</code></strong>这一项出现的位置索引值（数字），如果字符串中没有这一项，返回的结果是-1</li>\n<li><code>str.includes(x)</code>：验证x是否存在字符串中<strong><code>返回值：</code></strong>存在返回true，不存在返回false</li>\n<li><code>str.toUpperCase()</code>：转大写<strong><code>返回值：</code></strong>转换后的寻字符串</li>\n<li><code>str.toLowerCase()</code>：转小写<strong><code>返回值：</code></strong>转换后的寻字符串</li>\n<li><strong><code>str.split([分隔符])</code></strong>：指定一个分隔符，把字符串按照指定的分隔符拆分成数组（与数组中的<code>join</code>相对应），支持传递正则表达式<strong><code>返回值：</code></strong>转换后的数组</li>\n<li><code>str.replace([reg|val],[回调函数|val])</code>：实现字符串的替换（经常伴随着正则而用）<strong><code>参数：</code></strong>第一个为正则或者原字符串中存在的老字符串，第二个参数为一个回调函数或者要替换成的新字符串<strong><code>返回值：</code></strong>需要替代的部分或者匹配到的被新字符串或者回调函数return的值所取代后的新的字符串（原字符串不会改变）</li>\n</ol>\n","text":"Math、数字、数组、字符串的方法Math方法Math.abs([number value])：获取绝对值（绝对值永远是正数或者零）如果传递的不是数字类型，会先基于Number()换为数字再处理。Math.ceil/floor([number value])：把一个数向上取整/向","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}